
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000822c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800836c  0800836c  0000936c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800858c  0800858c  0000a098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800858c  0800858c  0000958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008594  08008594  0000a098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800859c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000098  08008634  0000a098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008634  0000a33c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7c5  00000000  00000000  0000a0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb7  00000000  00000000  00024887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00028840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135e  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213c5  00000000  00000000  0002b526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bdca  00000000  00000000  0004c8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb421  00000000  00000000  000686b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ec  00000000  00000000  00123b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	08008354 	.word	0x08008354

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	08008354 	.word	0x08008354

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000590:	2004      	movs	r0, #4
 8000592:	f7ff ffdb 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff ffd8 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ffd5 	bl	800054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2138      	movs	r1, #56	@ 0x38
 80005a6:	480a      	ldr	r0, [pc, #40]	@ (80005d0 <MX_GPIO_Init+0x54>)
 80005a8:	f002 fc1c 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005ac:	2338      	movs	r3, #56	@ 0x38
 80005ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <MX_GPIO_Init+0x54>)
 80005c2:	f002 f9e1 	bl	8002988 <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	48000800 	.word	0x48000800

080005d4 <LL_AHB2_GRP1_EnableClock>:
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800060c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000610:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800061c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000620:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000628:	68fb      	ldr	r3, [r7, #12]
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800063c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000640:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	43db      	mvns	r3, r3
 8000646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800064a:	4013      	ands	r3, r2
 800064c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
uint8_t i2c_buff[STD_BUFFER_SIZE];

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <MX_I2C1_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_SLAVE_ADDR;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_I2C1_Init+0x74>)
 800066a:	2278      	movs	r2, #120	@ 0x78
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000694:	f002 fbd6 	bl	8002e44 <HAL_I2C_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fb6b 	bl	8000d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4809      	ldr	r0, [pc, #36]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006a6:	f003 ffb4 	bl	8004612 <HAL_I2CEx_ConfigAnalogFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 fb62 	bl	8000d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006b8:	f003 fff5 	bl	80046a6 <HAL_I2CEx_ConfigDigitalFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 fb59 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000b4 	.word	0x200000b4
 80006d0:	40005400 	.word	0x40005400
 80006d4:	00100d14 	.word	0x00100d14

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2238      	movs	r2, #56	@ 0x38
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f006 ff96 	bl	800762a <memset>
  if(i2cHandle->Instance==I2C1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <HAL_I2C_MspInit+0xa8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d136      	bne.n	8000776 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000710:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4618      	mov	r0, r3
 8000718:	f005 fa24 	bl	8005b64 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000722:	f000 fb29 	bl	8000d78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff ff54 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800072c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000730:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000732:	2312      	movs	r3, #18
 8000734:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073e:	2304      	movs	r3, #4
 8000740:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000746:	4619      	mov	r1, r3
 8000748:	480e      	ldr	r0, [pc, #56]	@ (8000784 <HAL_I2C_MspInit+0xac>)
 800074a:	f002 f91d 	bl	8002988 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000752:	f7ff ff57 	bl	8000604 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	201e      	movs	r0, #30
 800075c:	f002 f839 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000760:	201e      	movs	r0, #30
 8000762:	f002 f850 	bl	8002806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	201f      	movs	r0, #31
 800076c:	f002 f831 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000770:	201f      	movs	r0, #31
 8000772:	f002 f848 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3758      	adds	r7, #88	@ 0x58
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005400 	.word	0x40005400
 8000784:	48000400 	.word	0x48000400

08000788 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <HAL_I2C_MspDeInit+0x40>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d112      	bne.n	80007c0 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800079a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800079e:	f7ff ff49 	bl	8000634 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <HAL_I2C_MspDeInit+0x44>)
 80007a6:	f002 fa4f 	bl	8002c48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80007aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ae:	4807      	ldr	r0, [pc, #28]	@ (80007cc <HAL_I2C_MspDeInit+0x44>)
 80007b0:	f002 fa4a 	bl	8002c48 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80007b4:	201e      	movs	r0, #30
 80007b6:	f002 f834 	bl	8002822 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80007ba:	201f      	movs	r0, #31
 80007bc:	f002 f831 	bl	8002822 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40005400 	.word	0x40005400
 80007cc:	48000400 	.word	0x48000400

080007d0 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d107      	bne.n	80007f2 <HAL_I2C_SlaveRxCpltCallback+0x22>
                printf(", ");
        }
        printf("\r\n");
        */

        HAL_I2C_Slave_Receive_IT(hi2c, i2c_buff, STD_BUFFER_SIZE);
 80007e2:	2209      	movs	r2, #9
 80007e4:	4906      	ldr	r1, [pc, #24]	@ (8000800 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f002 fbf6 	bl	8002fd8 <HAL_I2C_Slave_Receive_IT>
        BSP_LED_Toggle(LED_BLUE);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fd59 	bl	80012a4 <BSP_LED_Toggle>
    }
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40005400 	.word	0x40005400
 8000800:	20000108 	.word	0x20000108

08000804 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0f      	ldr	r2, [pc, #60]	@ (8000850 <HAL_I2C_ErrorCallback+0x4c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d118      	bne.n	8000848 <HAL_I2C_ErrorCallback+0x44>
    	/*
    	uint32_t err = HAL_I2C_GetError(hi2c);
    	printf("I2C ERROR: 0x%08lx\r\n", err);
    	*/

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	2b10      	cmp	r3, #16
 8000822:	d103      	bne.n	800082c <HAL_I2C_ErrorCallback+0x28>
        {
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2210      	movs	r2, #16
 800082a:	61da      	str	r2, [r3, #28]
        }
        HAL_I2C_DeInit(hi2c);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f002 fba4 	bl	8002f7a <HAL_I2C_DeInit>
        HAL_I2C_Init(hi2c);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f002 fb06 	bl	8002e44 <HAL_I2C_Init>
        HAL_I2C_Slave_Receive_IT(hi2c, i2c_buff, STD_BUFFER_SIZE);
 8000838:	2209      	movs	r2, #9
 800083a:	4906      	ldr	r1, [pc, #24]	@ (8000854 <HAL_I2C_ErrorCallback+0x50>)
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f002 fbcb 	bl	8002fd8 <HAL_I2C_Slave_Receive_IT>
        BSP_LED_Toggle(LED_RED);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 fd2e 	bl	80012a4 <BSP_LED_Toggle>
    }
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005400 	.word	0x40005400
 8000854:	20000108 	.word	0x20000108

08000858 <LL_AHB2_GRP1_EnableClock>:
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087c:	68fb      	ldr	r3, [r7, #12]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f001 fe0b 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f98d 	bl	8000bb0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff ffd6 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	2002      	movs	r0, #2
 80008ae:	f7ff ffd3 	bl	8000858 <LL_AHB2_GRP1_EnableClock>

  // DEBUG_SUBGHZSPI_{NSSOUT, SCKOUT, MSIOOUT, MOSIOUT} pins
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80008b2:	23f0      	movs	r3, #240	@ 0xf0
 80008b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 80008c2:	230d      	movs	r3, #13
 80008c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f002 f85a 	bl	8002988 <HAL_GPIO_Init>

  // DEBUG_RF_{HSE32RDY, NRESET} pins
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80008d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 80008da:	230d      	movs	r3, #13
 80008dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f002 f84e 	bl	8002988 <HAL_GPIO_Init>

  // DEBUG_RF_{SMPSRDY, LDORDY} pins
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4;
 80008ec:	2314      	movs	r3, #20
 80008ee:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	489c      	ldr	r0, [pc, #624]	@ (8000b68 <main+0x2e0>)
 80008f8:	f002 f846 	bl	8002988 <HAL_GPIO_Init>

  // RF_BUSY pin
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 8000902:	2306      	movs	r3, #6
 8000904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000910:	f002 f83a 	bl	8002988 <HAL_GPIO_Init>

  // RF_{IRQ0, IRQ1, IRQ2} pins
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
 8000914:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8000918:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	4891      	ldr	r0, [pc, #580]	@ (8000b68 <main+0x2e0>)
 8000922:	f002 f831 	bl	8002988 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f7ff fe29 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 800092a:	f7ff fe95 	bl	8000658 <MX_I2C1_Init>
  MX_SUBGHZ_Init();
 800092e:	f000 fa91 	bl	8000e54 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000932:	f000 fb8f 	bl	8001054 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_GREEN);
 8000936:	2001      	movs	r0, #1
 8000938:	f000 fc60 	bl	80011fc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800093c:	2002      	movs	r0, #2
 800093e:	f000 fc5d 	bl	80011fc <BSP_LED_Init>

  radioInit();
 8000942:	f000 f99d 	bl	8000c80 <radioInit>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000946:	2000      	movs	r0, #0
 8000948:	f000 fc58 	bl	80011fc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fc55 	bl	80011fc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000952:	2002      	movs	r0, #2
 8000954:	f000 fc52 	bl	80011fc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000958:	2101      	movs	r1, #1
 800095a:	2000      	movs	r0, #0
 800095c:	f000 fcbc 	bl	80012d8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000960:	2101      	movs	r1, #1
 8000962:	2001      	movs	r0, #1
 8000964:	f000 fcb8 	bl	80012d8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000968:	2101      	movs	r1, #1
 800096a:	2002      	movs	r0, #2
 800096c:	f000 fcb4 	bl	80012d8 <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8000970:	2300      	movs	r3, #0
 8000972:	2200      	movs	r2, #0
 8000974:	f240 2143 	movw	r1, #579	@ 0x243
 8000978:	f240 2043 	movw	r0, #579	@ 0x243
 800097c:	f001 f846 	bl	8001a0c <SUBGRF_SetDioIrqParams>
                         IRQ_TX_DONE | IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
                         IRQ_RADIO_NONE,
                         IRQ_RADIO_NONE);

  i2c_enabled = false;
 8000980:	4b7a      	ldr	r3, [pc, #488]	@ (8000b6c <main+0x2e4>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
  enable_lora_tx = true;
 8000986:	4b7a      	ldr	r3, [pc, #488]	@ (8000b70 <main+0x2e8>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
  enable_lora_rx = false;
 800098c:	4b79      	ldr	r3, [pc, #484]	@ (8000b74 <main+0x2ec>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  rng_mode = true;
 8000992:	4b79      	ldr	r3, [pc, #484]	@ (8000b78 <main+0x2f0>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]

  if(i2c_enabled) {
 8000998:	4b74      	ldr	r3, [pc, #464]	@ (8000b6c <main+0x2e4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <main+0x122>
	  HAL_I2C_Slave_Receive_IT(&hi2c1, i2c_buff, STD_BUFFER_SIZE);
 80009a0:	2209      	movs	r2, #9
 80009a2:	4976      	ldr	r1, [pc, #472]	@ (8000b7c <main+0x2f4>)
 80009a4:	4876      	ldr	r0, [pc, #472]	@ (8000b80 <main+0x2f8>)
 80009a6:	f002 fb17 	bl	8002fd8 <HAL_I2C_Slave_Receive_IT>
  }

  printf("\rTELEMETRIA NUCLEO V1.1 (2025)\n\r");
 80009aa:	4876      	ldr	r0, [pc, #472]	@ (8000b84 <main+0x2fc>)
 80009ac:	f006 fde8 	bl	8007580 <iprintf>

  while (1)
  {

    if (enable_lora_tx) {
 80009b0:	4b6f      	ldr	r3, [pc, #444]	@ (8000b70 <main+0x2e8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d07a      	beq.n	8000aae <main+0x226>

    	if(i2c_enabled) {
 80009b8:	4b6c      	ldr	r3, [pc, #432]	@ (8000b6c <main+0x2e4>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <main+0x146>
    		memcpy(lora_buff, i2c_buff, STD_BUFFER_SIZE);
 80009c0:	4b71      	ldr	r3, [pc, #452]	@ (8000b88 <main+0x300>)
 80009c2:	4a6e      	ldr	r2, [pc, #440]	@ (8000b7c <main+0x2f4>)
 80009c4:	6810      	ldr	r0, [r2, #0]
 80009c6:	6851      	ldr	r1, [r2, #4]
 80009c8:	c303      	stmia	r3!, {r0, r1}
 80009ca:	7a12      	ldrb	r2, [r2, #8]
 80009cc:	701a      	strb	r2, [r3, #0]
    	}

    	if(rng_mode) {
 80009ce:	4b6a      	ldr	r3, [pc, #424]	@ (8000b78 <main+0x2f0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d022      	beq.n	8000a1c <main+0x194>
    		lora_buff[0] = 0x01;
 80009d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000b88 <main+0x300>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
    		for(uint8_t i = 1; i < STD_BUFFER_SIZE; i++){
 80009dc:	2301      	movs	r3, #1
 80009de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80009e2:	e017      	b.n	8000a14 <main+0x18c>
    			lora_buff[i] = random() % 0xFF;
 80009e4:	f006 fccc 	bl	8007380 <random>
 80009e8:	4602      	mov	r2, r0
 80009ea:	4b68      	ldr	r3, [pc, #416]	@ (8000b8c <main+0x304>)
 80009ec:	fb83 1302 	smull	r1, r3, r3, r2
 80009f0:	4413      	add	r3, r2
 80009f2:	11d9      	asrs	r1, r3, #7
 80009f4:	17d3      	asrs	r3, r2, #31
 80009f6:	1ac9      	subs	r1, r1, r3
 80009f8:	460b      	mov	r3, r1
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	1a5b      	subs	r3, r3, r1
 80009fe:	1ad1      	subs	r1, r2, r3
 8000a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a04:	b2c9      	uxtb	r1, r1
 8000a06:	4a60      	ldr	r2, [pc, #384]	@ (8000b88 <main+0x300>)
 8000a08:	54d1      	strb	r1, [r2, r3]
    		for(uint8_t i = 1; i < STD_BUFFER_SIZE; i++){
 8000a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a0e:	3301      	adds	r3, #1
 8000a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d9e3      	bls.n	80009e4 <main+0x15c>
    		}
    	}

	    tx_done = false;
 8000a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8000b90 <main+0x308>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
	    tx_timeout = false;
 8000a22:	4b5c      	ldr	r3, [pc, #368]	@ (8000b94 <main+0x30c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

	    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f001 fc1e 	bl	800226c <SUBGRF_SetSwitch>
	    SUBGRF_SendPayload(lora_buff, sizeof(lora_buff), 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2109      	movs	r1, #9
 8000a34:	4854      	ldr	r0, [pc, #336]	@ (8000b88 <main+0x300>)
 8000a36:	f000 fe81 	bl	800173c <SUBGRF_SendPayload>

	    while (!tx_done && !tx_timeout) {
 8000a3a:	bf00      	nop
 8000a3c:	4b54      	ldr	r3, [pc, #336]	@ (8000b90 <main+0x308>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <main+0x1d4>
 8000a4c:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <main+0x30c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f083 0301 	eor.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1ef      	bne.n	8000a3c <main+0x1b4>
	    }

	    if (tx_done) {
 8000a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000b90 <main+0x308>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d01a      	beq.n	8000a9c <main+0x214>


		  printf("\r\nlora_buff: ");
 8000a66:	484c      	ldr	r0, [pc, #304]	@ (8000b98 <main+0x310>)
 8000a68:	f006 fd8a 	bl	8007580 <iprintf>
		  for (int i = 0; i < sizeof(lora_buff); i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	e00a      	b.n	8000a88 <main+0x200>
			  printf("%02X ", lora_buff[i]);
 8000a72:	4a45      	ldr	r2, [pc, #276]	@ (8000b88 <main+0x300>)
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4847      	ldr	r0, [pc, #284]	@ (8000b9c <main+0x314>)
 8000a7e:	f006 fd7f 	bl	8007580 <iprintf>
		  for (int i = 0; i < sizeof(lora_buff); i++) {
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	3301      	adds	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d9f1      	bls.n	8000a72 <main+0x1ea>
		  }


		  BSP_LED_Off(LED_RED);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f000 fbee 	bl	8001270 <BSP_LED_Off>
		  BSP_LED_Toggle(LED_GREEN);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fc05 	bl	80012a4 <BSP_LED_Toggle>
 8000a9a:	e061      	b.n	8000b60 <main+0x2d8>

	    } else if (tx_timeout) {
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <main+0x30c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d05c      	beq.n	8000b60 <main+0x2d8>
		  BSP_LED_Toggle(LED_RED);
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f000 fbfc 	bl	80012a4 <BSP_LED_Toggle>
 8000aac:	e058      	b.n	8000b60 <main+0x2d8>
	    }
    } else if (enable_lora_rx) {
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <main+0x2ec>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d054      	beq.n	8000b60 <main+0x2d8>

    	rx_done = rx_timeout = rx_error = false;
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <main+0x318>)
 8000aba:	4611      	mov	r1, r2
 8000abc:	7019      	strb	r1, [r3, #0]
 8000abe:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <main+0x31c>)
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	7019      	strb	r1, [r3, #0]
 8000ac4:	4b38      	ldr	r3, [pc, #224]	@ (8000ba8 <main+0x320>)
 8000ac6:	701a      	strb	r2, [r3, #0]
        SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2001      	movs	r0, #1
 8000acc:	f001 fbce 	bl	800226c <SUBGRF_SetSwitch>
    	SUBGRF_SetRx(3000 << 6);
 8000ad0:	4836      	ldr	r0, [pc, #216]	@ (8000bac <main+0x324>)
 8000ad2:	f000 fec3 	bl	800185c <SUBGRF_SetRx>
    	while (!rx_done && !rx_timeout && !rx_error);
 8000ad6:	bf00      	nop
 8000ad8:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <main+0x320>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f083 0301 	eor.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00f      	beq.n	8000b08 <main+0x280>
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <main+0x31c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d007      	beq.n	8000b08 <main+0x280>
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <main+0x318>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f083 0301 	eor.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1e7      	bne.n	8000ad8 <main+0x250>

    	if (rx_done)
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <main+0x320>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d020      	beq.n	8000b54 <main+0x2cc>
		{
    	  uint8_t rx_size;
		  SUBGRF_GetPayload(lora_buff, &rx_size, 0xFF);
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	22ff      	movs	r2, #255	@ 0xff
 8000b16:	4619      	mov	r1, r3
 8000b18:	481b      	ldr	r0, [pc, #108]	@ (8000b88 <main+0x300>)
 8000b1a:	f000 fded 	bl	80016f8 <SUBGRF_GetPayload>
		  printf("\r\nlora_buff: ");
 8000b1e:	481e      	ldr	r0, [pc, #120]	@ (8000b98 <main+0x310>)
 8000b20:	f006 fd2e 	bl	8007580 <iprintf>
		  for (int i = 0; i < sizeof(lora_buff); i++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	e00a      	b.n	8000b40 <main+0x2b8>
			  printf("%02X ", lora_buff[i]);
 8000b2a:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <main+0x300>)
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4619      	mov	r1, r3
 8000b34:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <main+0x314>)
 8000b36:	f006 fd23 	bl	8007580 <iprintf>
		  for (int i = 0; i < sizeof(lora_buff); i++) {
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d9f1      	bls.n	8000b2a <main+0x2a2>
		  }
		  BSP_LED_Off(LED_RED);
 8000b46:	2002      	movs	r0, #2
 8000b48:	f000 fb92 	bl	8001270 <BSP_LED_Off>
		  BSP_LED_Toggle(LED_GREEN);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fba9 	bl	80012a4 <BSP_LED_Toggle>
 8000b52:	e005      	b.n	8000b60 <main+0x2d8>
		} else {
		  BSP_LED_Off(LED_GREEN);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fb8b 	bl	8001270 <BSP_LED_Off>
		  BSP_LED_Toggle(LED_RED);
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f000 fba2 	bl	80012a4 <BSP_LED_Toggle>
		}
    }

    HAL_Delay(SLEEP_TIME);
 8000b60:	2014      	movs	r0, #20
 8000b62:	f001 fd17 	bl	8002594 <HAL_Delay>
    if (enable_lora_tx) {
 8000b66:	e723      	b.n	80009b0 <main+0x128>
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	20000121 	.word	0x20000121
 8000b70:	20000122 	.word	0x20000122
 8000b74:	20000123 	.word	0x20000123
 8000b78:	20000124 	.word	0x20000124
 8000b7c:	20000108 	.word	0x20000108
 8000b80:	200000b4 	.word	0x200000b4
 8000b84:	0800836c 	.word	0x0800836c
 8000b88:	20000118 	.word	0x20000118
 8000b8c:	80808081 	.word	0x80808081
 8000b90:	20000111 	.word	0x20000111
 8000b94:	20000112 	.word	0x20000112
 8000b98:	08008390 	.word	0x08008390
 8000b9c:	080083a0 	.word	0x080083a0
 8000ba0:	20000114 	.word	0x20000114
 8000ba4:	20000115 	.word	0x20000115
 8000ba8:	20000113 	.word	0x20000113
 8000bac:	0002ee00 	.word	0x0002ee00

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09a      	sub	sp, #104	@ 0x68
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	2248      	movs	r2, #72	@ 0x48
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f006 fd33 	bl	800762a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <SystemClock_Config+0xa0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bde:	4a1c      	ldr	r2, [pc, #112]	@ (8000c50 <SystemClock_Config+0xa0>)
 8000be0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <SystemClock_Config+0xa0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bfe:	2360      	movs	r3, #96	@ 0x60
 8000c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 f868 	bl	8004ce0 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c16:	f000 f8af 	bl	8000d78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000c1a:	234f      	movs	r3, #79	@ 0x4f
 8000c1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fbd4 	bl	80053e4 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c42:	f000 f899 	bl	8000d78 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3768      	adds	r7, #104	@ 0x68
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	58000400 	.word	0x58000400

08000c54 <_write>:
 * @param file Stream de destino
 * @param ptr Ponteiro para o vetor de caracteres
 * @param len Comprimento do vetor de caracteres
 * @retval Tamanho do vetor de caracteres redirecionado
 */
int _write(int file, char *ptr, int len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <_write+0x28>)
 8000c6c:	f005 fdcf 	bl	800680e <HAL_UART_Transmit>
    return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000138 	.word	0x20000138

08000c80 <radioInit>:
/**
  * @brief  Initialize the Sub-GHz radio and dependent hardware.
  * @retval None
  */
void radioInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0
  SUBGRF_Init(RadioOnDioIrq);
 8000c86:	4820      	ldr	r0, [pc, #128]	@ (8000d08 <radioInit+0x88>)
 8000c88:	f000 fcde 	bl	8001648 <SUBGRF_Init>

  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f9bc 	bl	800200c <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8000c94:	481d      	ldr	r0, [pc, #116]	@ (8000d0c <radioInit+0x8c>)
 8000c96:	f000 ff15 	bl	8001ac4 <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8000c9a:	200e      	movs	r0, #14
 8000c9c:	f001 fb0e 	bl	80022bc <SUBGRF_SetRfTxPower>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 ff55 	bl	8001b50 <SUBGRF_SetPacketType>

  ModulationParams_t modParams = {
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	753b      	strb	r3, [r7, #20]
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      .CodingRate          = LORA_CR_4_5,
      .SpreadingFactor     = LORA_SF7,
      .LowDatarateOptimize = 0
    }
  };
  SUBGRF_SetModulationParams(&modParams);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 f82f 	bl	8001d38 <SUBGRF_SetModulationParams>

  PacketParams_t pktParams = {
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	703b      	strb	r3, [r7, #0]
 8000cec:	2308      	movs	r3, #8
 8000cee:	81fb      	strh	r3, [r7, #14]
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	747b      	strb	r3, [r7, #17]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	74bb      	strb	r3, [r7, #18]
      .InvertIQ       = LORA_IQ_NORMAL,
      .PayloadLength  = 0x09,          // valor “max” genérico
      .PreambleLength = LORA_PREAMBLE_LENGTH
    }
  };
  SUBGRF_SetPacketParams(&pktParams);
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f8ea 	bl	8001ed4 <SUBGRF_SetPacketParams>
}
 8000d00:	bf00      	nop
 8000d02:	3730      	adds	r7, #48	@ 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08000d11 	.word	0x08000d11
 8000d0c:	33bca100 	.word	0x33bca100

08000d10 <RadioOnDioIrq>:
  * @brief  Receive data trough SUBGHZSPI peripheral
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */
void RadioOnDioIrq(RadioIrqMasks_t irq)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
  if(irq == IRQ_TX_DONE)        tx_done    = true;
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d103      	bne.n	8000d28 <RadioOnDioIrq+0x18>
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <RadioOnDioIrq+0x54>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
  else if(irq == IRQ_RX_TX_TIMEOUT) { tx_timeout = true; rx_timeout = true; }
  else if (irq == IRQ_RX_DONE) rx_done = true;
  else if (irq == IRQ_CRC_ERROR) rx_error = true;
}
 8000d26:	e017      	b.n	8000d58 <RadioOnDioIrq+0x48>
  else if(irq == IRQ_RX_TX_TIMEOUT) { tx_timeout = true; rx_timeout = true; }
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d2e:	d106      	bne.n	8000d3e <RadioOnDioIrq+0x2e>
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <RadioOnDioIrq+0x58>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <RadioOnDioIrq+0x5c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
}
 8000d3c:	e00c      	b.n	8000d58 <RadioOnDioIrq+0x48>
  else if (irq == IRQ_RX_DONE) rx_done = true;
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d103      	bne.n	8000d4c <RadioOnDioIrq+0x3c>
 8000d44:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <RadioOnDioIrq+0x60>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	e005      	b.n	8000d58 <RadioOnDioIrq+0x48>
  else if (irq == IRQ_CRC_ERROR) rx_error = true;
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2b40      	cmp	r3, #64	@ 0x40
 8000d50:	d102      	bne.n	8000d58 <RadioOnDioIrq+0x48>
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <RadioOnDioIrq+0x64>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000111 	.word	0x20000111
 8000d68:	20000112 	.word	0x20000112
 8000d6c:	20000115 	.word	0x20000115
 8000d70:	20000113 	.word	0x20000113
 8000d74:	20000114 	.word	0x20000114

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x8>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f001 fbbc 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <I2C1_EV_IRQHandler+0x10>)
 8000dee:	f002 f943 	bl	8003078 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000b4 	.word	0x200000b4

08000dfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <I2C1_ER_IRQHandler+0x10>)
 8000e02:	f002 f953 	bl	80030ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000b4 	.word	0x200000b4

08000e10 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000e16:	f005 fadb 	bl	80063d0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000128 	.word	0x20000128

08000e24 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e30:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e48:	68fb      	ldr	r3, [r7, #12]
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_SUBGHZ_Init+0x20>)
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_SUBGHZ_Init+0x20>)
 8000e60:	f005 f834 	bl	8005ecc <HAL_SUBGHZ_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000e6a:	f7ff ff85 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000128 	.word	0x20000128

08000e78 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff ffcf 	bl	8000e24 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2032      	movs	r0, #50	@ 0x32
 8000e8c:	f001 fca1 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000e90:	2032      	movs	r0, #50	@ 0x32
 8000e92:	f001 fcb8 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <_kill>:

int _kill(int pid, int sig)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eb6:	f006 fc07 	bl	80076c8 <__errno>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2216      	movs	r2, #22
 8000ebe:	601a      	str	r2, [r3, #0]
  return -1;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_exit>:

void _exit (int status)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ffe7 	bl	8000eac <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ede:	bf00      	nop
 8000ee0:	e7fd      	b.n	8000ede <_exit+0x12>

08000ee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e00a      	b.n	8000f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	4601      	mov	r1, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	b2ca      	uxtb	r2, r1
 8000f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbf0      	blt.n	8000ef4 <_read+0x12>
  }

  return len;
 8000f12:	687b      	ldr	r3, [r7, #4]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <_isatty>:

int _isatty(int file)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f006 fb8c 	bl	80076c8 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20010000 	.word	0x20010000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	20000134 	.word	0x20000134
 8000fe4:	20000340 	.word	0x20000340

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_AHB2_GRP1_EnableClock>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001002:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001010:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <LL_APB1_GRP1_EnableClock>:
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001030:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4313      	orrs	r3, r2
 800103a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001040:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001048:	68fb      	ldr	r3, [r7, #12]
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <MX_USART2_UART_Init+0x94>)
 800105c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800109e:	f005 fb66 	bl	800676e <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010a8:	f7ff fe66 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 80010b0:	f006 f89d 	bl	80071ee <HAL_UARTEx_SetTxFifoThreshold>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010ba:	f7ff fe5d 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 80010c2:	f006 f8d2 	bl	800726a <HAL_UARTEx_SetRxFifoThreshold>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f7ff fe54 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 80010d2:	f006 f854 	bl	800717e <HAL_UARTEx_DisableFifoMode>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010dc:	f7ff fe4c 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000138 	.word	0x20000138
 80010e8:	40004400 	.word	0x40004400

080010ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	@ 0x58
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2238      	movs	r2, #56	@ 0x38
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f006 fa8c 	bl	800762a <memset>
  if(uartHandle->Instance==USART2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_UART_MspInit+0x88>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d126      	bne.n	800116a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800111c:	2302      	movs	r3, #2
 800111e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001120:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001124:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4618      	mov	r0, r3
 800112c:	f004 fd1a 	bl	8005b64 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001136:	f7ff fe1f 	bl	8000d78 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800113e:	f7ff ff71 	bl	8001024 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff ff56 	bl	8000ff4 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001148:	230c      	movs	r3, #12
 800114a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001158:	2307      	movs	r3, #7
 800115a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001166:	f001 fc0f 	bl	8002988 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3758      	adds	r7, #88	@ 0x58
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004400 	.word	0x40004400

08001178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800117c:	f7ff ff34 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	@ (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	@ (80011c4 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011a6:	f006 fa95 	bl	80076d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fb6d 	bl	8000888 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   r0, =_estack
 80011b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80011bc:	0800859c 	.word	0x0800859c
  ldr r2, =_sbss
 80011c0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80011c4:	2000033c 	.word	0x2000033c

080011c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>

080011ca <LL_AHB2_GRP1_EnableClock>:
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4013      	ands	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
	...

080011fc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001216:	2002      	movs	r0, #2
 8001218:	f7ff ffd7 	bl	80011ca <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <BSP_LED_Init+0x6c>)
 8001220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001224:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <BSP_LED_Init+0x70>)
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fba1 	bl	8002988 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <BSP_LED_Init+0x70>)
 800124a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <BSP_LED_Init+0x6c>)
 8001252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	f001 fdc3 	bl	8002de4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08008464 	.word	0x08008464
 800126c:	20000004 	.word	0x20000004

08001270 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <BSP_LED_Off+0x2c>)
 800127e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <BSP_LED_Off+0x30>)
 8001286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	f001 fda9 	bl	8002de4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	08008464 	.word	0x08008464

080012a4 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <BSP_LED_Toggle+0x2c>)
 80012b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4906      	ldr	r1, [pc, #24]	@ (80012d4 <BSP_LED_Toggle+0x30>)
 80012ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f001 fda6 	bl	8002e12 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000004 	.word	0x20000004
 80012d4:	08008464 	.word	0x08008464

080012d8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	4613      	mov	r3, r2
 80012e6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <BSP_PB_Init+0x2e>
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff ff63 	bl	80011ca <LL_AHB2_GRP1_EnableClock>
 8001304:	e00c      	b.n	8001320 <BSP_PB_Init+0x48>
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d103      	bne.n	8001314 <BSP_PB_Init+0x3c>
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff ff5c 	bl	80011ca <LL_AHB2_GRP1_EnableClock>
 8001312:	e005      	b.n	8001320 <BSP_PB_Init+0x48>
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d102      	bne.n	8001320 <BSP_PB_Init+0x48>
 800131a:	2004      	movs	r0, #4
 800131c:	f7ff ff55 	bl	80011ca <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <BSP_PB_Init+0xf0>)
 8001324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001328:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <BSP_PB_Init+0xf4>)
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fb1c 	bl	8002988 <HAL_GPIO_Init>
 8001350:	e035      	b.n	80013be <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8001352:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001356:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <BSP_PB_Init+0xf4>)
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	f107 020c 	add.w	r2, r7, #12
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fb0e 	bl	8002988 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4a17      	ldr	r2, [pc, #92]	@ (80013d0 <BSP_PB_Init+0xf8>)
 8001372:	441a      	add	r2, r3
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4917      	ldr	r1, [pc, #92]	@ (80013d4 <BSP_PB_Init+0xfc>)
 8001378:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f001 faee 	bl	8002960 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <BSP_PB_Init+0xf8>)
 800138a:	1898      	adds	r0, r3, r2
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <BSP_PB_Init+0x100>)
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	461a      	mov	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	f001 fac9 	bl	800292e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <BSP_PB_Init+0x104>)
 80013a0:	56d0      	ldrsb	r0, [r2, r3]
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <BSP_PB_Init+0x108>)
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f001 fa10 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a09      	ldr	r2, [pc, #36]	@ (80013dc <BSP_PB_Init+0x104>)
 80013b6:	56d3      	ldrsb	r3, [r2, r3]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fa24 	bl	8002806 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800846c 	.word	0x0800846c
 80013cc:	20000010 	.word	0x20000010
 80013d0:	200001cc 	.word	0x200001cc
 80013d4:	08008478 	.word	0x08008478
 80013d8:	2000001c 	.word	0x2000001c
 80013dc:	08008474 	.word	0x08008474
 80013e0:	20000028 	.word	0x20000028

080013e4 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fff1 	bl	80013e4 <BSP_PB_Callback>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}

08001406 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff ffea 	bl	80013e4 <BSP_PB_Callback>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8001418:	2002      	movs	r0, #2
 800141a:	f7ff ffe3 	bl	80013e4 <BSP_PB_Callback>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <LL_AHB2_GRP1_EnableClock>:
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001430:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800143e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4013      	ands	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001468:	2004      	movs	r0, #4
 800146a:	f7ff ffda 	bl	8001422 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800146e:	2310      	movs	r3, #16
 8001470:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <BSP_RADIO_Init+0x78>)
 8001484:	f001 fa80 	bl	8002988 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001488:	2320      	movs	r3, #32
 800148a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	480e      	ldr	r0, [pc, #56]	@ (80014cc <BSP_RADIO_Init+0x78>)
 8001492:	f001 fa79 	bl	8002988 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001496:	2308      	movs	r3, #8
 8001498:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	480b      	ldr	r0, [pc, #44]	@ (80014cc <BSP_RADIO_Init+0x78>)
 80014a0:	f001 fa72 	bl	8002988 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80014a4:	2200      	movs	r2, #0
 80014a6:	2120      	movs	r1, #32
 80014a8:	4808      	ldr	r0, [pc, #32]	@ (80014cc <BSP_RADIO_Init+0x78>)
 80014aa:	f001 fc9b 	bl	8002de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80014ae:	2200      	movs	r2, #0
 80014b0:	2110      	movs	r1, #16
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <BSP_RADIO_Init+0x78>)
 80014b4:	f001 fc96 	bl	8002de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <BSP_RADIO_Init+0x78>)
 80014be:	f001 fc91 	bl	8002de4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	48000800 	.word	0x48000800

080014d0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d84b      	bhi.n	8001578 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80014e0:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	08001519 	.word	0x08001519
 80014f0:	08001539 	.word	0x08001539
 80014f4:	08001559 	.word	0x08001559
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2108      	movs	r1, #8
 80014fc:	4821      	ldr	r0, [pc, #132]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80014fe:	f001 fc71 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2110      	movs	r1, #16
 8001506:	481f      	ldr	r0, [pc, #124]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001508:	f001 fc6c 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2120      	movs	r1, #32
 8001510:	481c      	ldr	r0, [pc, #112]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001512:	f001 fc67 	bl	8002de4 <HAL_GPIO_WritePin>
      break;      
 8001516:	e030      	b.n	800157a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2108      	movs	r1, #8
 800151c:	4819      	ldr	r0, [pc, #100]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800151e:	f001 fc61 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001522:	2201      	movs	r2, #1
 8001524:	2110      	movs	r1, #16
 8001526:	4817      	ldr	r0, [pc, #92]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001528:	f001 fc5c 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800152c:	2200      	movs	r2, #0
 800152e:	2120      	movs	r1, #32
 8001530:	4814      	ldr	r0, [pc, #80]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001532:	f001 fc57 	bl	8002de4 <HAL_GPIO_WritePin>
      break;
 8001536:	e020      	b.n	800157a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2108      	movs	r1, #8
 800153c:	4811      	ldr	r0, [pc, #68]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800153e:	f001 fc51 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001542:	2201      	movs	r2, #1
 8001544:	2110      	movs	r1, #16
 8001546:	480f      	ldr	r0, [pc, #60]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001548:	f001 fc4c 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800154c:	2201      	movs	r2, #1
 800154e:	2120      	movs	r1, #32
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001552:	f001 fc47 	bl	8002de4 <HAL_GPIO_WritePin>
      break;
 8001556:	e010      	b.n	800157a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2108      	movs	r1, #8
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800155e:	f001 fc41 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001562:	2200      	movs	r2, #0
 8001564:	2110      	movs	r1, #16
 8001566:	4807      	ldr	r0, [pc, #28]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001568:	f001 fc3c 	bl	8002de4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800156c:	2201      	movs	r2, #1
 800156e:	2120      	movs	r1, #32
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001572:	f001 fc37 	bl	8002de4 <HAL_GPIO_WritePin>
      break;
 8001576:	e000      	b.n	800157a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001578:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	48000800 	.word	0x48000800

08001588 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80015c2:	230f      	movs	r3, #15
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e001      	b.n	80015cc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80015c8:	2316      	movs	r3, #22
 80015ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80015dc:	f7ff ff3a 	bl	8001454 <BSP_RADIO_Init>
 80015e0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff6c 	bl	80014d0 <BSP_RADIO_ConfigRFSwitch>
 80015f8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001606:	f7ff ffbf 	bl	8001588 <BSP_RADIO_GetTxConfig>
 800160a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800160c:	4618      	mov	r0, r3
 800160e:	bd80      	pop	{r7, pc}

08001610 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001614:	f7ff ffbf 	bl	8001596 <BSP_RADIO_IsTCXO>
 8001618:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}

0800161e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001622:	f7ff ffbf 	bl	80015a4 <BSP_RADIO_IsDCDC>
 8001626:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}

0800162c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ffba 	bl	80015b2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800163e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001656:	4a1d      	ldr	r2, [pc, #116]	@ (80016cc <SUBGRF_Init+0x84>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800165c:	f7ff fbfa 	bl	8000e54 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8001660:	2002      	movs	r0, #2
 8001662:	f000 feff 	bl	8002464 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <SUBGRF_Init+0x88>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800166c:	2000      	movs	r0, #0
 800166e:	f000 f8b9 	bl	80017e4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8001672:	f7ff ffcd 	bl	8001610 <RBI_IsTCXO>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d10e      	bne.n	800169a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800167c:	2140      	movs	r1, #64	@ 0x40
 800167e:	2001      	movs	r0, #1
 8001680:	f000 f9fe 	bl	8001a80 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001684:	2100      	movs	r1, #0
 8001686:	f640 1011 	movw	r0, #2321	@ 0x911
 800168a:	f000 fd03 	bl	8002094 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800168e:	237f      	movs	r3, #127	@ 0x7f
 8001690:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8001692:	7b38      	ldrb	r0, [r7, #12]
 8001694:	f000 f902 	bl	800189c <SUBGRF_Calibrate>
 8001698:	e009      	b.n	80016ae <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800169a:	2120      	movs	r1, #32
 800169c:	f640 1011 	movw	r0, #2321	@ 0x911
 80016a0:	f000 fcf8 	bl	8002094 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80016a4:	2120      	movs	r1, #32
 80016a6:	f640 1012 	movw	r0, #2322	@ 0x912
 80016aa:	f000 fcf3 	bl	8002094 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80016ae:	210e      	movs	r1, #14
 80016b0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80016b4:	f000 fcee 	bl	8002094 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80016b8:	f7ff ff8e 	bl	80015d8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SUBGRF_Init+0x8c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001e8 	.word	0x200001e8
 80016d0:	200001e7 	.word	0x200001e7
 80016d4:	200001e4 	.word	0x200001e4

080016d8 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	461a      	mov	r2, r3
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 fd36 	bl	800215c <SUBGRF_WriteBuffer>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	4613      	mov	r3, r2
 8001704:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800170a:	f107 0317 	add.w	r3, r7, #23
 800170e:	4619      	mov	r1, r3
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f000 fc93 	bl	800203c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d201      	bcs.n	8001724 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8001720:	2301      	movs	r3, #1
 8001722:	e007      	b.n	8001734 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001724:	7df8      	ldrb	r0, [r7, #23]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	f000 fd37 	bl	80021a0 <SUBGRF_ReadBuffer>

    return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	460b      	mov	r3, r1
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	4619      	mov	r1, r3
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff ffc2 	bl	80016d8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f861 	bl	800181c <SUBGRF_SetTx>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b29b      	uxth	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800177c:	f000 fa04 	bl	8001b88 <SUBGRF_GetPacketType>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d108      	bne.n	8001798 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2202      	movs	r2, #2
 800178c:	4619      	mov	r1, r3
 800178e:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8001792:	f000 fcc1 	bl	8002118 <SUBGRF_WriteRegisters>
            break;
 8001796:	e000      	b.n	800179a <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001798:	bf00      	nop
    }
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80017bc:	f000 f9e4 	bl	8001b88 <SUBGRF_GetPacketType>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d108      	bne.n	80017d8 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2202      	movs	r2, #2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f240 60be 	movw	r0, #1726	@ 0x6be
 80017d2:	f000 fca1 	bl	8002118 <SUBGRF_WriteRegisters>
            break;
 80017d6:	e000      	b.n	80017da <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80017d8:	bf00      	nop
    }
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	2201      	movs	r2, #1
 80017f2:	4619      	mov	r1, r3
 80017f4:	2080      	movs	r0, #128	@ 0x80
 80017f6:	f000 fcf5 	bl	80021e4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SUBGRF_SetStandby+0x34>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001806:	e002      	b.n	800180e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <SUBGRF_SetStandby+0x34>)
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001e4 	.word	0x200001e4

0800181c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <SUBGRF_SetTx+0x3c>)
 8001826:	2204      	movs	r2, #4
 8001828:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	b2db      	uxtb	r3, r3
 8001830:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b2db      	uxtb	r3, r3
 8001838:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2203      	movs	r2, #3
 8001846:	4619      	mov	r1, r3
 8001848:	2083      	movs	r0, #131	@ 0x83
 800184a:	f000 fccb 	bl	80021e4 <SUBGRF_WriteCommand>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001e4 	.word	0x200001e4

0800185c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <SUBGRF_SetRx+0x3c>)
 8001866:	2205      	movs	r2, #5
 8001868:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	b2db      	uxtb	r3, r3
 8001870:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	b2db      	uxtb	r3, r3
 8001878:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2203      	movs	r2, #3
 8001886:	4619      	mov	r1, r3
 8001888:	2082      	movs	r0, #130	@ 0x82
 800188a:	f000 fcab 	bl	80021e4 <SUBGRF_WriteCommand>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200001e4 	.word	0x200001e4

0800189c <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80018a4:	793b      	ldrb	r3, [r7, #4]
 80018a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	019b      	lsls	r3, r3, #6
 80018b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80018b8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80018c4:	793b      	ldrb	r3, [r7, #4]
 80018c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80018ca:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80018d6:	793b      	ldrb	r3, [r7, #4]
 80018d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018dc:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80018e8:	793b      	ldrb	r3, [r7, #4]
 80018ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80018ee:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001900:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001902:	b25b      	sxtb	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b25b      	sxtb	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001916:	4313      	orrs	r3, r2
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800191c:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800191e:	f107 030f 	add.w	r3, r7, #15
 8001922:	2201      	movs	r2, #1
 8001924:	4619      	mov	r1, r3
 8001926:	2089      	movs	r0, #137	@ 0x89
 8001928:	f000 fc5c 	bl	80021e4 <SUBGRF_WriteCommand>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a1d      	ldr	r2, [pc, #116]	@ (80019b4 <SUBGRF_CalibrateImage+0x80>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d904      	bls.n	800194e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001944:	23e1      	movs	r3, #225	@ 0xe1
 8001946:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001948:	23e9      	movs	r3, #233	@ 0xe9
 800194a:	737b      	strb	r3, [r7, #13]
 800194c:	e027      	b.n	800199e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <SUBGRF_CalibrateImage+0x84>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d904      	bls.n	8001960 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8001956:	23d7      	movs	r3, #215	@ 0xd7
 8001958:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800195a:	23db      	movs	r3, #219	@ 0xdb
 800195c:	737b      	strb	r3, [r7, #13]
 800195e:	e01e      	b.n	800199e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a16      	ldr	r2, [pc, #88]	@ (80019bc <SUBGRF_CalibrateImage+0x88>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d904      	bls.n	8001972 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001968:	23c1      	movs	r3, #193	@ 0xc1
 800196a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800196c:	23c5      	movs	r3, #197	@ 0xc5
 800196e:	737b      	strb	r3, [r7, #13]
 8001970:	e015      	b.n	800199e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <SUBGRF_CalibrateImage+0x8c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d904      	bls.n	8001984 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800197a:	2375      	movs	r3, #117	@ 0x75
 800197c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800197e:	2381      	movs	r3, #129	@ 0x81
 8001980:	737b      	strb	r3, [r7, #13]
 8001982:	e00c      	b.n	800199e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <SUBGRF_CalibrateImage+0x90>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d904      	bls.n	8001996 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800198c:	236b      	movs	r3, #107	@ 0x6b
 800198e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001990:	236f      	movs	r3, #111	@ 0x6f
 8001992:	737b      	strb	r3, [r7, #13]
 8001994:	e003      	b.n	800199e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8001996:	2329      	movs	r3, #41	@ 0x29
 8001998:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800199a:	232b      	movs	r3, #43	@ 0x2b
 800199c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2202      	movs	r2, #2
 80019a4:	4619      	mov	r1, r3
 80019a6:	2098      	movs	r0, #152	@ 0x98
 80019a8:	f000 fc1c 	bl	80021e4 <SUBGRF_WriteCommand>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	35a4e900 	.word	0x35a4e900
 80019b8:	32a9f880 	.word	0x32a9f880
 80019bc:	2de54480 	.word	0x2de54480
 80019c0:	1b6b0b00 	.word	0x1b6b0b00
 80019c4:	1954fc40 	.word	0x1954fc40

080019c8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4603      	mov	r3, r0
 80019dc:	71bb      	strb	r3, [r7, #6]
 80019de:	460b      	mov	r3, r1
 80019e0:	717b      	strb	r3, [r7, #5]
 80019e2:	4613      	mov	r3, r2
 80019e4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80019ee:	797b      	ldrb	r3, [r7, #5]
 80019f0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80019f2:	793b      	ldrb	r3, [r7, #4]
 80019f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2204      	movs	r2, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	2095      	movs	r0, #149	@ 0x95
 8001a00:	f000 fbf0 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]
 8001a26:	4613      	mov	r3, r2
 8001a28:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001a44:	88bb      	ldrh	r3, [r7, #4]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001a5a:	883b      	ldrh	r3, [r7, #0]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	2208      	movs	r2, #8
 8001a70:	4619      	mov	r1, r3
 8001a72:	2008      	movs	r0, #8
 8001a74:	f000 fbb6 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	2097      	movs	r0, #151	@ 0x97
 8001ab6:	f000 fb95 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001ac4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <SUBGRF_SetRfFrequency+0x84>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff27 	bl	8001934 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <SUBGRF_SetRfFrequency+0x84>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	461c      	mov	r4, r3
 8001af2:	4615      	mov	r5, r2
 8001af4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001af8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001afc:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <SUBGRF_SetRfFrequency+0x88>)
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	4640      	mov	r0, r8
 8001b04:	4649      	mov	r1, r9
 8001b06:	f7fe fb8b 	bl	8000220 <__aeabi_uldivmod>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4613      	mov	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0e1b      	lsrs	r3, r3, #24
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	2204      	movs	r2, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	2086      	movs	r0, #134	@ 0x86
 8001b3a:	f000 fb53 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b48:	200001e7 	.word	0x200001e7
 8001b4c:	01e84800 	.word	0x01e84800

08001b50 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <SUBGRF_SetPacketType+0x34>)
 8001b5e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d104      	bne.n	8001b70 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001b66:	2100      	movs	r1, #0
 8001b68:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8001b6c:	f000 fa92 	bl	8002094 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	2201      	movs	r2, #1
 8001b74:	4619      	mov	r1, r3
 8001b76:	208a      	movs	r0, #138	@ 0x8a
 8001b78:	f000 fb34 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200001e5 	.word	0x200001e5

08001b88 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
    return PacketType;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	@ (8001b98 <SUBGRF_GetPacketType+0x10>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	200001e5 	.word	0x200001e5

08001b9c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	71bb      	strb	r3, [r7, #6]
 8001baa:	4613      	mov	r3, r2
 8001bac:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d149      	bne.n	8001c48 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fd39 	bl	800162c <RBI_GetRFOMaxPowerConfig>
 8001bba:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001bbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	da01      	bge.n	8001bca <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b0e      	cmp	r3, #14
 8001bce:	d10e      	bne.n	8001bee <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f7ff fef6 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001bdc:	79ba      	ldrb	r2, [r7, #6]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	330e      	adds	r3, #14
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	71bb      	strb	r3, [r7, #6]
 8001bec:	e01f      	b.n	8001c2e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b0a      	cmp	r3, #10
 8001bf2:	d10e      	bne.n	8001c12 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff fee4 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8001c00:	79ba      	ldrb	r2, [r7, #6]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	330d      	adds	r3, #13
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	71bb      	strb	r3, [r7, #6]
 8001c10:	e00d      	b.n	8001c2e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8001c12:	2301      	movs	r3, #1
 8001c14:	2201      	movs	r2, #1
 8001c16:	2100      	movs	r1, #0
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f7ff fed5 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001c1e:	79ba      	ldrb	r2, [r7, #6]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	330e      	adds	r3, #14
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8001c2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c32:	f113 0f11 	cmn.w	r3, #17
 8001c36:	da01      	bge.n	8001c3c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001c38:	23ef      	movs	r3, #239	@ 0xef
 8001c3a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001c3c:	2118      	movs	r1, #24
 8001c3e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001c42:	f000 fa27 	bl	8002094 <SUBGRF_WriteRegister>
 8001c46:	e067      	b.n	8001d18 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001c48:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001c4c:	f000 fa44 	bl	80020d8 <SUBGRF_ReadRegister>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f043 031e 	orr.w	r3, r3, #30
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001c5e:	f000 fa19 	bl	8002094 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff fce2 	bl	800162c <RBI_GetRFOMaxPowerConfig>
 8001c68:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001c6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	da01      	bge.n	8001c78 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b14      	cmp	r3, #20
 8001c7c:	d10e      	bne.n	8001c9c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8001c7e:	2301      	movs	r3, #1
 8001c80:	2200      	movs	r2, #0
 8001c82:	2105      	movs	r1, #5
 8001c84:	2003      	movs	r0, #3
 8001c86:	f7ff fe9f 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001c8a:	79ba      	ldrb	r2, [r7, #6]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3316      	adds	r3, #22
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	e031      	b.n	8001d00 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b11      	cmp	r3, #17
 8001ca0:	d10e      	bne.n	8001cc0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7ff fe8d 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001cae:	79ba      	ldrb	r2, [r7, #6]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3316      	adds	r3, #22
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	71bb      	strb	r3, [r7, #6]
 8001cbe:	e01f      	b.n	8001d00 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b0e      	cmp	r3, #14
 8001cc4:	d10e      	bne.n	8001ce4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2102      	movs	r1, #2
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff fe7b 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001cd2:	79ba      	ldrb	r2, [r7, #6]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	330e      	adds	r3, #14
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	71bb      	strb	r3, [r7, #6]
 8001ce2:	e00d      	b.n	8001d00 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2107      	movs	r1, #7
 8001cea:	2004      	movs	r0, #4
 8001cec:	f7ff fe6c 	bl	80019c8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001cf0:	79ba      	ldrb	r2, [r7, #6]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3316      	adds	r3, #22
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001d00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d04:	f113 0f09 	cmn.w	r3, #9
 8001d08:	da01      	bge.n	8001d0e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001d0a:	23f7      	movs	r3, #247	@ 0xf7
 8001d0c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001d0e:	2138      	movs	r1, #56	@ 0x38
 8001d10:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001d14:	f000 f9be 	bl	8002094 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001d1c:	797b      	ldrb	r3, [r7, #5]
 8001d1e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	2202      	movs	r2, #2
 8001d26:	4619      	mov	r1, r3
 8001d28:	208e      	movs	r0, #142	@ 0x8e
 8001d2a:	f000 fa5b 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001d38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec8 <SUBGRF_SetModulationParams+0x190>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d004      	beq.n	8001d66 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fef5 	bl	8001b50 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	f200 80a5 	bhi.w	8001eba <SUBGRF_SetModulationParams+0x182>
 8001d70:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <SUBGRF_SetModulationParams+0x40>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001e49 	.word	0x08001e49
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e77 	.word	0x08001e77
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a4e      	ldr	r2, [pc, #312]	@ (8001ecc <SUBGRF_SetModulationParams+0x194>)
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7b1b      	ldrb	r3, [r3, #12]
 8001db2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7b5b      	ldrb	r3, [r3, #13]
 8001db8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	4615      	mov	r5, r2
 8001dc4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001dc8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001dcc:	4a40      	ldr	r2, [pc, #256]	@ (8001ed0 <SUBGRF_SetModulationParams+0x198>)
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	f7fe fa23 	bl	8000220 <__aeabi_uldivmod>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4613      	mov	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4619      	mov	r1, r3
 8001e02:	208b      	movs	r0, #139	@ 0x8b
 8001e04:	f000 f9ee 	bl	80021e4 <SUBGRF_WriteCommand>
        break;
 8001e08:	e058      	b.n	8001ebc <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	4a2e      	ldr	r2, [pc, #184]	@ (8001ecc <SUBGRF_SetModulationParams+0x194>)
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7d1b      	ldrb	r3, [r3, #20]
 8001e34:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	4619      	mov	r1, r3
 8001e40:	208b      	movs	r0, #139	@ 0x8b
 8001e42:	f000 f9cf 	bl	80021e4 <SUBGRF_WriteCommand>
        break;
 8001e46:	e039      	b.n	8001ebc <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
 8001e50:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e5b      	ldrb	r3, [r3, #25]
 8001e56:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e9b      	ldrb	r3, [r3, #26]
 8001e5c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7edb      	ldrb	r3, [r3, #27]
 8001e62:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	208b      	movs	r0, #139	@ 0x8b
 8001e70:	f000 f9b8 	bl	80021e4 <SUBGRF_WriteCommand>

        break;
 8001e74:	e022      	b.n	8001ebc <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001e76:	2305      	movs	r3, #5
 8001e78:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <SUBGRF_SetModulationParams+0x194>)
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ea0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b5b      	ldrb	r3, [r3, #13]
 8001ea6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	208b      	movs	r0, #139	@ 0x8b
 8001eb4:	f000 f996 	bl	80021e4 <SUBGRF_WriteCommand>
        break;
 8001eb8:	e000      	b.n	8001ebc <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001eba:	bf00      	nop
    }
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200001e5 	.word	0x200001e5
 8001ecc:	3d090000 	.word	0x3d090000
 8001ed0:	01e84800 	.word	0x01e84800

08001ed4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b44      	ldr	r3, [pc, #272]	@ (8002004 <SUBGRF_SetPacketParams+0x130>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d004      	beq.n	8001f02 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fe27 	bl	8001b50 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d878      	bhi.n	8001ffc <SUBGRF_SetPacketParams+0x128>
 8001f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f10 <SUBGRF_SetPacketParams+0x3c>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001fb1 	.word	0x08001fb1
 8001f18:	08001fa5 	.word	0x08001fa5
 8001f1c:	08001f21 	.word	0x08001f21
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7a5b      	ldrb	r3, [r3, #9]
 8001f24:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f26:	d10a      	bne.n	8001f3e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001f28:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f2c:	f7ff fc19 	bl	8001762 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001f30:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001f34:	f7ff fc35 	bl	80017a2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	75bb      	strb	r3, [r7, #22]
 8001f3c:	e011      	b.n	8001f62 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7a5b      	ldrb	r3, [r3, #9]
 8001f42:	2bf2      	cmp	r3, #242	@ 0xf2
 8001f44:	d10a      	bne.n	8001f5c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001f46:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001f4a:	f7ff fc0a 	bl	8001762 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001f4e:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001f52:	f7ff fc26 	bl	80017a2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001f56:	2306      	movs	r3, #6
 8001f58:	75bb      	strb	r3, [r7, #22]
 8001f5a:	e002      	b.n	8001f62 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7a5b      	ldrb	r3, [r3, #9]
 8001f60:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001f62:	2309      	movs	r3, #9
 8001f64:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	885b      	ldrh	r3, [r3, #2]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	885b      	ldrh	r3, [r3, #2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	799b      	ldrb	r3, [r3, #6]
 8001f8a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	79db      	ldrb	r3, [r3, #7]
 8001f90:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a1b      	ldrb	r3, [r3, #8]
 8001f96:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001f98:	7dbb      	ldrb	r3, [r7, #22]
 8001f9a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	753b      	strb	r3, [r7, #20]
        break;
 8001fa2:	e022      	b.n	8001fea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b1b      	ldrb	r3, [r3, #12]
 8001fac:	733b      	strb	r3, [r7, #12]
        break;
 8001fae:	e01c      	b.n	8001fea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	89db      	ldrh	r3, [r3, #14]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	89db      	ldrh	r3, [r3, #14]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7c1a      	ldrb	r2, [r3, #16]
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <SUBGRF_SetPacketParams+0x134>)
 8001fce:	4611      	mov	r1, r2
 8001fd0:	7019      	strb	r1, [r3, #0]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7c5b      	ldrb	r3, [r3, #17]
 8001fda:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7c9b      	ldrb	r3, [r3, #18]
 8001fe0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7cdb      	ldrb	r3, [r3, #19]
 8001fe6:	747b      	strb	r3, [r7, #17]
        break;
 8001fe8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	208c      	movs	r0, #140	@ 0x8c
 8001ff6:	f000 f8f5 	bl	80021e4 <SUBGRF_WriteCommand>
 8001ffa:	e000      	b.n	8001ffe <SUBGRF_SetPacketParams+0x12a>
        return;
 8001ffc:	bf00      	nop
}
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200001e5 	.word	0x200001e5
 8002008:	200001e6 	.word	0x200001e6

0800200c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	460a      	mov	r2, r1
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	4613      	mov	r3, r2
 800201a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2202      	movs	r2, #2
 800202a:	4619      	mov	r1, r3
 800202c:	208f      	movs	r0, #143	@ 0x8f
 800202e:	f000 f8d9 	bl	80021e4 <SUBGRF_WriteCommand>
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	2202      	movs	r2, #2
 800204c:	4619      	mov	r1, r3
 800204e:	2013      	movs	r0, #19
 8002050:	f000 f8ea 	bl	8002228 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8002054:	f7ff fd98 	bl	8001b88 <SUBGRF_GetPacketType>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10d      	bne.n	800207a <SUBGRF_GetRxBufferStatus+0x3e>
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <SUBGRF_GetRxBufferStatus+0x54>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d108      	bne.n	800207a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8002068:	f240 7002 	movw	r0, #1794	@ 0x702
 800206c:	f000 f834 	bl	80020d8 <SUBGRF_ReadRegister>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e002      	b.n	8002080 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800207a:	7b3a      	ldrb	r2, [r7, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8002080:	7b7a      	ldrb	r2, [r7, #13]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	701a      	strb	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200001e6 	.word	0x200001e6

08002094 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	460a      	mov	r2, r1
 800209e:	80fb      	strh	r3, [r7, #6]
 80020a0:	4613      	mov	r3, r2
 80020a2:	717b      	strb	r3, [r7, #5]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a4:	f3ef 8310 	mrs	r3, PRIMASK
 80020a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80020aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80020ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ae:	b672      	cpsid	i
}
 80020b0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80020b2:	1d7a      	adds	r2, r7, #5
 80020b4:	88f9      	ldrh	r1, [r7, #6]
 80020b6:	2301      	movs	r3, #1
 80020b8:	4806      	ldr	r0, [pc, #24]	@ (80020d4 <SUBGRF_WriteRegister+0x40>)
 80020ba:	f003 ff6b 	bl	8005f94 <HAL_SUBGHZ_WriteRegisters>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f383 8810 	msr	PRIMASK, r3
}
 80020c8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000128 	.word	0x20000128

080020d8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e2:	f3ef 8310 	mrs	r3, PRIMASK
 80020e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80020e8:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 80020ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80020f0:	f107 020b 	add.w	r2, r7, #11
 80020f4:	88f9      	ldrh	r1, [r7, #6]
 80020f6:	2301      	movs	r3, #1
 80020f8:	4806      	ldr	r0, [pc, #24]	@ (8002114 <SUBGRF_ReadRegister+0x3c>)
 80020fa:	f003 ffaa 	bl	8006052 <HAL_SUBGHZ_ReadRegisters>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f383 8810 	msr	PRIMASK, r3
}
 8002108:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800210a:	7afb      	ldrb	r3, [r7, #11]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000128 	.word	0x20000128

08002118 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	80fb      	strh	r3, [r7, #6]
 8002124:	4613      	mov	r3, r2
 8002126:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002128:	f3ef 8310 	mrs	r3, PRIMASK
 800212c:	60fb      	str	r3, [r7, #12]
  return(result);
 800212e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002130:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002132:	b672      	cpsid	i
}
 8002134:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	88f9      	ldrh	r1, [r7, #6]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <SUBGRF_WriteRegisters+0x40>)
 800213e:	f003 ff29 	bl	8005f94 <HAL_SUBGHZ_WriteRegisters>
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f383 8810 	msr	PRIMASK, r3
}
 800214c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000128 	.word	0x20000128

0800215c <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	4613      	mov	r3, r2
 800216a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216c:	f3ef 8310 	mrs	r3, PRIMASK
 8002170:	60fb      	str	r3, [r7, #12]
  return(result);
 8002172:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002176:	b672      	cpsid	i
}
 8002178:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	b29b      	uxth	r3, r3
 800217e:	79f9      	ldrb	r1, [r7, #7]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4806      	ldr	r0, [pc, #24]	@ (800219c <SUBGRF_WriteBuffer+0x40>)
 8002184:	f004 f879 	bl	800627a <HAL_SUBGHZ_WriteBuffer>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f383 8810 	msr	PRIMASK, r3
}
 8002192:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000128 	.word	0x20000128

080021a0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b0:	f3ef 8310 	mrs	r3, PRIMASK
 80021b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80021b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ba:	b672      	cpsid	i
}
 80021bc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80021be:	79bb      	ldrb	r3, [r7, #6]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	79f9      	ldrb	r1, [r7, #7]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <SUBGRF_ReadBuffer+0x40>)
 80021c8:	f004 f8aa 	bl	8006320 <HAL_SUBGHZ_ReadBuffer>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f383 8810 	msr	PRIMASK, r3
}
 80021d6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000128 	.word	0x20000128

080021e4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f4:	f3ef 8310 	mrs	r3, PRIMASK
 80021f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80021fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80021fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fe:	b672      	cpsid	i
}
 8002200:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002202:	88bb      	ldrh	r3, [r7, #4]
 8002204:	79f9      	ldrb	r1, [r7, #7]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4806      	ldr	r0, [pc, #24]	@ (8002224 <SUBGRF_WriteCommand+0x40>)
 800220a:	f003 ff83 	bl	8006114 <HAL_SUBGHZ_ExecSetCmd>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f383 8810 	msr	PRIMASK, r3
}
 8002218:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000128 	.word	0x20000128

08002228 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	4613      	mov	r3, r2
 8002236:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	60fb      	str	r3, [r7, #12]
  return(result);
 800223e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002240:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002242:	b672      	cpsid	i
}
 8002244:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	79f9      	ldrb	r1, [r7, #7]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4806      	ldr	r0, [pc, #24]	@ (8002268 <SUBGRF_ReadCommand+0x40>)
 800224e:	f003 ffc0 	bl	80061d2 <HAL_SUBGHZ_ExecGetCmd>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f383 8810 	msr	PRIMASK, r3
}
 800225c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000128 	.word	0x20000128

0800226c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	4613      	mov	r3, r2
 800227a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10d      	bne.n	80022a2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d104      	bne.n	8002296 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800228c:	2302      	movs	r3, #2
 800228e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8002290:	2004      	movs	r0, #4
 8002292:	f000 f8e7 	bl	8002464 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d107      	bne.n	80022ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800229c:	2303      	movs	r3, #3
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e004      	b.n	80022ac <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f999 	bl	80015e6 <RBI_ConfigRFSwitch>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80022ca:	f7ff f99a 	bl	8001602 <RBI_GetTxConfig>
 80022ce:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d016      	beq.n	8002304 <SUBGRF_SetRfTxPower+0x48>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	dc16      	bgt.n	800230a <SUBGRF_SetRfTxPower+0x4e>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <SUBGRF_SetRfTxPower+0x2e>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d00a      	beq.n	80022fe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80022e8:	e00f      	b.n	800230a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	dd02      	ble.n	80022f8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	73fb      	strb	r3, [r7, #15]
            break;
 80022f6:	e009      	b.n	800230c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
            break;
 80022fc:	e006      	b.n	800230c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
            break;
 8002302:	e003      	b.n	800230c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002304:	2302      	movs	r3, #2
 8002306:	73fb      	strb	r3, [r7, #15]
            break;
 8002308:	e000      	b.n	800230c <SUBGRF_SetRfTxPower+0x50>
            break;
 800230a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800230c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2202      	movs	r2, #2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fc41 	bl	8001b9c <SUBGRF_SetTxParams>

    return paSelect;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2001      	movs	r0, #1
 8002332:	4798      	blx	r3
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200001e8 	.word	0x200001e8

08002340 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2002      	movs	r0, #2
 800234e:	4798      	blx	r3
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200001e8 	.word	0x200001e8

0800235c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2040      	movs	r0, #64	@ 0x40
 800236a:	4798      	blx	r3
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200001e8 	.word	0x200001e8

08002378 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800238e:	e00a      	b.n	80023a6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2080      	movs	r0, #128	@ 0x80
 8002396:	4798      	blx	r3
            break;
 8002398:	e005      	b.n	80023a6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800239a:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80023a2:	4798      	blx	r3
            break;
 80023a4:	bf00      	nop
    }
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200001e8 	.word	0x200001e8

080023b4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80023c4:	4798      	blx	r3
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200001e8 	.word	0x200001e8

080023d4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2020      	movs	r0, #32
 80023e2:	4798      	blx	r3
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200001e8 	.word	0x200001e8

080023f0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2004      	movs	r0, #4
 80023fe:	4798      	blx	r3
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200001e8 	.word	0x200001e8

0800240c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2008      	movs	r0, #8
 800241a:	4798      	blx	r3
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200001e8 	.word	0x200001e8

08002428 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2010      	movs	r0, #16
 8002436:	4798      	blx	r3
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200001e8 	.word	0x200001e8

08002444 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002454:	4798      	blx	r3
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200001e8 	.word	0x200001e8

08002464 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800246e:	f7ff f8d6 	bl	800161e <RBI_IsDCDC>
 8002472:	4603      	mov	r3, r0
 8002474:	2b01      	cmp	r3, #1
 8002476:	d112      	bne.n	800249e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002478:	f640 1023 	movw	r0, #2339	@ 0x923
 800247c:	f7ff fe2c 	bl	80020d8 <SUBGRF_ReadRegister>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	f023 0306 	bic.w	r3, r3, #6
 800248a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4313      	orrs	r3, r2
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	f640 1023 	movw	r0, #2339	@ 0x923
 800249a:	f7ff fdfb 	bl	8002094 <SUBGRF_WriteRegister>
  }
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b2:	2003      	movs	r0, #3
 80024b4:	f000 f982 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024b8:	f003 f976 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_Init+0x3c>)
 80024c0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c2:	2000      	movs	r0, #0
 80024c4:	f000 f810 	bl	80024e8 <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	e001      	b.n	80024d8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d4:	f7fe fc56 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024d8:	79fb      	ldrb	r3, [r7, #7]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <HAL_InitTick+0x6c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d024      	beq.n	8002546 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024fc:	f003 f954 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_InitTick+0x6c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f992 	bl	800283e <HAL_SYSTICK_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d809      	bhi.n	800253a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002526:	2200      	movs	r2, #0
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800252e:	f000 f950 	bl	80027d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002532:	4a09      	ldr	r2, [pc, #36]	@ (8002558 <HAL_InitTick+0x70>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e007      	b.n	800254a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e004      	b.n	800254a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e001      	b.n	800254a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000038 	.word	0x20000038
 8002558:	20000034 	.word	0x20000034

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_IncTick+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_IncTick+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a03      	ldr	r2, [pc, #12]	@ (800257c <HAL_IncTick+0x20>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000038 	.word	0x20000038
 800257c:	200001ec 	.word	0x200001ec

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b02      	ldr	r3, [pc, #8]	@ (8002590 <HAL_GetTick+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	200001ec 	.word	0x200001ec

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fff0 	bl	8002580 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ac:	d005      	beq.n	80025ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_Delay+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ba:	bf00      	nop
 80025bc:	f7ff ffe0 	bl	8002580 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8f7      	bhi.n	80025bc <HAL_Delay+0x28>
  {
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000038 	.word	0x20000038

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4906      	ldr	r1, [pc, #24]	@ (8002674 <__NVIC_EnableIRQ+0x34>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db12      	blt.n	80026b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	490a      	ldr	r1, [pc, #40]	@ (80026bc <__NVIC_DisableIRQ+0x44>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	3320      	adds	r3, #32
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026a4:	f3bf 8f4f 	dsb	sy
}
 80026a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026aa:	f3bf 8f6f 	isb	sy
}
 80026ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	@ (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	@ (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
         );
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800279c:	f7ff ff90 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff09 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff20 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff92 	bl	8002714 <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff61 	bl	80026c0 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff13 	bl	8002640 <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff21 	bl	8002678 <__NVIC_DisableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff96 	bl	8002778 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d005      	beq.n	800287a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2204      	movs	r2, #4
 8002872:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e047      	b.n	800290a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 020e 	bic.w	r2, r2, #14
 8002888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
    }
  }
  return status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002922:	b2db      	uxtb	r3, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800292e:	b480      	push	{r7}
 8002930:	b087      	sub	sp, #28
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	460b      	mov	r3, r1
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]
      break;
 800294c:	e002      	b.n	8002954 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
      break;
 8002952:	bf00      	nop
  }

  return status;
 8002954:	7dfb      	ldrb	r3, [r7, #23]
}
 8002956:	4618      	mov	r0, r3
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e003      	b.n	800297c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	e140      	b.n	8002c1a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8132 	beq.w	8002c14 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d005      	beq.n	80029c8 <HAL_GPIO_Init+0x40>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d130      	bne.n	8002a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fe:	2201      	movs	r2, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0201 	and.w	r2, r3, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d017      	beq.n	8002a66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d123      	bne.n	8002aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 808c 	beq.w	8002c14 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002afc:	4a4e      	ldr	r2, [pc, #312]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b26:	d00d      	beq.n	8002b44 <HAL_GPIO_Init+0x1bc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a44      	ldr	r2, [pc, #272]	@ (8002c3c <HAL_GPIO_Init+0x2b4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <HAL_GPIO_Init+0x1b8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a43      	ldr	r2, [pc, #268]	@ (8002c40 <HAL_GPIO_Init+0x2b8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_GPIO_Init+0x1b4>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e004      	b.n	8002b46 <HAL_GPIO_Init+0x1be>
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	e002      	b.n	8002b46 <HAL_GPIO_Init+0x1be>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_GPIO_Init+0x1be>
 8002b44:	2300      	movs	r3, #0
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	f002 0203 	and.w	r2, r2, #3
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	4093      	lsls	r3, r2
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b56:	4938      	ldr	r1, [pc, #224]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b64:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b88:	4a2e      	ldr	r2, [pc, #184]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002bde:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002be6:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bec:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f aeb7 	bne.w	8002998 <HAL_GPIO_Init+0x10>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	48000400 	.word	0x48000400
 8002c40:	48000800 	.word	0x48000800
 8002c44:	58000800 	.word	0x58000800

08002c48 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c56:	e0af      	b.n	8002db8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a2 	beq.w	8002db2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c6e:	4a59      	ldr	r2, [pc, #356]	@ (8002dd4 <HAL_GPIO_DeInit+0x18c>)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	2207      	movs	r2, #7
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c96:	d00d      	beq.n	8002cb4 <HAL_GPIO_DeInit+0x6c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd8 <HAL_GPIO_DeInit+0x190>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <HAL_GPIO_DeInit+0x68>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8002ddc <HAL_GPIO_DeInit+0x194>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d101      	bne.n	8002cac <HAL_GPIO_DeInit+0x64>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_DeInit+0x6e>
 8002cac:	2307      	movs	r3, #7
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_DeInit+0x6e>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_DeInit+0x6e>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d136      	bne.n	8002d34 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002cc6:	4b46      	ldr	r3, [pc, #280]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002cc8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4943      	ldr	r1, [pc, #268]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002cd8:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002cda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	493f      	ldr	r1, [pc, #252]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002cea:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	493b      	ldr	r1, [pc, #236]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002cf8:	4b39      	ldr	r3, [pc, #228]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4937      	ldr	r1, [pc, #220]	@ (8002de0 <HAL_GPIO_DeInit+0x198>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d16:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd4 <HAL_GPIO_DeInit+0x18c>)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	482b      	ldr	r0, [pc, #172]	@ (8002dd4 <HAL_GPIO_DeInit+0x18c>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	3302      	adds	r3, #2
 8002d30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2103      	movs	r1, #3
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	08d2      	lsrs	r2, r2, #3
 8002d68:	4019      	ands	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2103      	movs	r1, #3
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2103      	movs	r1, #3
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f af49 	bne.w	8002c58 <HAL_GPIO_DeInit+0x10>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	48000800 	.word	0x48000800
 8002de0:	58000800 	.word	0x58000800

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e24:	887a      	ldrh	r2, [r7, #2]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	041a      	lsls	r2, r3, #16
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	400b      	ands	r3, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e08d      	b.n	8002f72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fc34 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	@ 0x24
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e006      	b.n	8002ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d108      	bne.n	8002ee6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	e007      	b.n	8002ef6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e021      	b.n	8002fd0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fd fbef 	bl	8000788 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d139      	bne.n	8003066 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_Slave_Receive_IT+0x28>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e033      	b.n	8003068 <HAL_I2C_Slave_Receive_IT+0x90>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2222      	movs	r2, #34	@ 0x22
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800302c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <HAL_I2C_Slave_Receive_IT+0x98>)
 8003048:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a09      	ldr	r2, [pc, #36]	@ (8003074 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800304e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003058:	f248 0102 	movw	r1, #32770	@ 0x8002
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f001 f9f3 	bl	8004448 <I2C_Enable_IRQ>

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	ffff0000 	.word	0xffff0000
 8003074:	08003207 	.word	0x08003207

08003078 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
  }
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	09db      	lsrs	r3, r3, #7
 80030d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0a9b      	lsrs	r3, r3, #10
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	09db      	lsrs	r3, r3, #7
 8003102:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800311e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	09db      	lsrs	r3, r3, #7
 8003130:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313c:	f043 0202 	orr.w	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800314c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 030b 	and.w	r3, r3, #11
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 ffe9 	bl	8004138 <I2C_ITError>
  }
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
 80031b0:	4613      	mov	r3, r2
 80031b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <I2C_Slave_ISR_IT+0x24>
 8003226:	2302      	movs	r3, #2
 8003228:	e0ed      	b.n	8003406 <I2C_Slave_ISR_IT+0x200>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800324a:	6939      	ldr	r1, [r7, #16]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fdbf 	bl	8003dd0 <I2C_ITSlaveCplt>
 8003252:	e0d3      	b.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d04d      	beq.n	80032fc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003268:	2b00      	cmp	r3, #0
 800326a:	d047      	beq.n	80032fc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d128      	bne.n	80032c8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b28      	cmp	r3, #40	@ 0x28
 8003280:	d108      	bne.n	8003294 <I2C_Slave_ISR_IT+0x8e>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003288:	d104      	bne.n	8003294 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800328a:	6939      	ldr	r1, [r7, #16]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fefd 	bl	800408c <I2C_ITListenCplt>
 8003292:	e032      	b.n	80032fa <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b29      	cmp	r3, #41	@ 0x29
 800329e:	d10e      	bne.n	80032be <I2C_Slave_ISR_IT+0xb8>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a6:	d00a      	beq.n	80032be <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2210      	movs	r2, #16
 80032ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f001 f858 	bl	8004366 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fc62 	bl	8003b80 <I2C_ITSlaveSeqCplt>
 80032bc:	e01d      	b.n	80032fa <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2210      	movs	r2, #16
 80032c4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80032c6:	e096      	b.n	80033f6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2210      	movs	r2, #16
 80032ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <I2C_Slave_ISR_IT+0xe6>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e8:	f040 8085 	bne.w	80033f6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	4619      	mov	r1, r3
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 ff20 	bl	8004138 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80032f8:	e07d      	b.n	80033f6 <I2C_Slave_ISR_IT+0x1f0>
 80032fa:	e07c      	b.n	80033f6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d030      	beq.n	800336a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02a      	beq.n	800336a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14f      	bne.n	80033fa <I2C_Slave_ISR_IT+0x1f4>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003360:	d04b      	beq.n	80033fa <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fc0c 	bl	8003b80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003368:	e047      	b.n	80033fa <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	08db      	lsrs	r3, r3, #3
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	08db      	lsrs	r3, r3, #3
 800337a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fb3a 	bl	80039fe <I2C_ITAddrCplt>
 800338a:	e037      	b.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d031      	beq.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02b      	beq.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d018      	beq.n	80033e0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033de:	e00d      	b.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e6:	d002      	beq.n	80033ee <I2C_Slave_ISR_IT+0x1e8>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fbc6 	bl	8003b80 <I2C_ITSlaveSeqCplt>
 80033f4:	e002      	b.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80033fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b088      	sub	sp, #32
 8003412:	af02      	add	r7, sp, #8
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <I2C_Master_ISR_DMA+0x1a>
 8003424:	2302      	movs	r3, #2
 8003426:	e0e1      	b.n	80035ec <I2C_Master_ISR_DMA+0x1de>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003444:	2b00      	cmp	r3, #0
 8003446:	d011      	beq.n	800346c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800345c:	2120      	movs	r1, #32
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fff2 	bl	8004448 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 ff7e 	bl	8004366 <I2C_Flush_TXDR>
 800346a:	e0ba      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	09db      	lsrs	r3, r3, #7
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d072      	beq.n	800355e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003480:	2b00      	cmp	r3, #0
 8003482:	d06c      	beq.n	800355e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003492:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04e      	beq.n	800353c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034aa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2bff      	cmp	r3, #255	@ 0xff
 80034b4:	d906      	bls.n	80034c4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	22ff      	movs	r2, #255	@ 0xff
 80034ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80034bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e010      	b.n	80034e6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034d6:	d003      	beq.n	80034e0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e002      	b.n	80034e6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80034e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034e4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	8a79      	ldrh	r1, [r7, #18]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 ff77 	bl	80043e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b22      	cmp	r3, #34	@ 0x22
 8003516:	d108      	bne.n	800352a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003526:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003528:	e05b      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003538:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800353a:	e052      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800354a:	d003      	beq.n	8003554 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fada 	bl	8003b06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003552:	e046      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003554:	2140      	movs	r1, #64	@ 0x40
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fdee 	bl	8004138 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800355c:	e041      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d029      	beq.n	80035be <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003572:	2b00      	cmp	r3, #0
 8003574:	d023      	beq.n	80035be <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d119      	bne.n	80035b4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800358e:	d027      	beq.n	80035e0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003598:	d108      	bne.n	80035ac <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80035aa:	e019      	b.n	80035e0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 faaa 	bl	8003b06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80035b2:	e015      	b.n	80035e0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80035b4:	2140      	movs	r1, #64	@ 0x40
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fdbe 	bl	8004138 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80035bc:	e010      	b.n	80035e0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fb2f 	bl	8003c3c <I2C_ITMasterCplt>
 80035de:	e000      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80035e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003600:	4b8c      	ldr	r3, [pc, #560]	@ (8003834 <I2C_Mem_ISR_DMA+0x240>)
 8003602:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <I2C_Mem_ISR_DMA+0x1e>
 800360e:	2302      	movs	r3, #2
 8003610:	e10c      	b.n	800382c <I2C_Mem_ISR_DMA+0x238>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f043 0204 	orr.w	r2, r3, #4
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003646:	2120      	movs	r1, #32
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fefd 	bl	8004448 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fe89 	bl	8004366 <I2C_Flush_TXDR>
 8003654:	e0e5      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800367e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003680:	e0cf      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	09db      	lsrs	r3, r3, #7
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d05c      	beq.n	8003748 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003696:	2b00      	cmp	r3, #0
 8003698:	d056      	beq.n	8003748 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800369a:	2110      	movs	r1, #16
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fed3 	bl	8004448 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d048      	beq.n	800373e <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d910      	bls.n	80036d8 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	22ff      	movs	r2, #255	@ 0xff
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c0:	b299      	uxth	r1, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	2300      	movs	r3, #0
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fe89 	bl	80043e8 <I2C_TransferConfig>
 80036d6:	e011      	b.n	80036fc <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	b299      	uxth	r1, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	2300      	movs	r3, #0
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fe76 	bl	80043e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b22      	cmp	r3, #34	@ 0x22
 8003718:	d108      	bne.n	800372c <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003728:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800372a:	e07a      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800373a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800373c:	e071      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800373e:	2140      	movs	r1, #64	@ 0x40
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fcf9 	bl	8004138 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003746:	e06c      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d056      	beq.n	8003802 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800375c:	2b00      	cmp	r3, #0
 800375e:	d050      	beq.n	8003802 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b22      	cmp	r3, #34	@ 0x22
 800376a:	d101      	bne.n	8003770 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 800376c:	4b32      	ldr	r3, [pc, #200]	@ (8003838 <I2C_Mem_ISR_DMA+0x244>)
 800376e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2bff      	cmp	r3, #255	@ 0xff
 8003778:	d910      	bls.n	800379c <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	22ff      	movs	r2, #255	@ 0xff
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003784:	b299      	uxth	r1, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	b2da      	uxtb	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fe27 	bl	80043e8 <I2C_TransferConfig>
 800379a:	e011      	b.n	80037c0 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	b299      	uxth	r1, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fe14 	bl	80043e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b22      	cmp	r3, #34	@ 0x22
 80037dc:	d108      	bne.n	80037f0 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ee:	e018      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003800:	e00f      	b.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa0d 	bl	8003c3c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	80002000 	.word	0x80002000
 8003838:	80002400 	.word	0x80002400

0800383c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <I2C_Slave_ISR_DMA+0x24>
 800385c:	2302      	movs	r3, #2
 800385e:	e0ca      	b.n	80039f6 <I2C_Slave_ISR_DMA+0x1ba>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 faa4 	bl	8003dd0 <I2C_ITSlaveCplt>
 8003888:	e0b0      	b.n	80039ec <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 809a 	beq.w	80039cc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8093 	beq.w	80039cc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0b9b      	lsrs	r3, r3, #14
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0bdb      	lsrs	r3, r3, #15
 80038b6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d07f      	beq.n	80039be <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00d      	beq.n	80038e2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0bdb      	lsrs	r3, r3, #15
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80038de:	2301      	movs	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0b9b      	lsrs	r3, r3, #14
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8003902:	2301      	movs	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d128      	bne.n	800395e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b28      	cmp	r3, #40	@ 0x28
 8003916:	d108      	bne.n	800392a <I2C_Slave_ISR_DMA+0xee>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800391e:	d104      	bne.n	800392a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fbb2 	bl	800408c <I2C_ITListenCplt>
 8003928:	e048      	b.n	80039bc <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b29      	cmp	r3, #41	@ 0x29
 8003934:	d10e      	bne.n	8003954 <I2C_Slave_ISR_DMA+0x118>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800393c:	d00a      	beq.n	8003954 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2210      	movs	r2, #16
 8003944:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fd0d 	bl	8004366 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f917 	bl	8003b80 <I2C_ITSlaveSeqCplt>
 8003952:	e033      	b.n	80039bc <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800395c:	e034      	b.n	80039c8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2210      	movs	r2, #16
 8003964:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003978:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <I2C_Slave_ISR_DMA+0x14c>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003986:	d11f      	bne.n	80039c8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	2b21      	cmp	r3, #33	@ 0x21
 800398c:	d002      	beq.n	8003994 <I2C_Slave_ISR_DMA+0x158>
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b29      	cmp	r3, #41	@ 0x29
 8003992:	d103      	bne.n	800399c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2221      	movs	r2, #33	@ 0x21
 8003998:	631a      	str	r2, [r3, #48]	@ 0x30
 800399a:	e008      	b.n	80039ae <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b22      	cmp	r3, #34	@ 0x22
 80039a0:	d002      	beq.n	80039a8 <I2C_Slave_ISR_DMA+0x16c>
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80039a6:	d102      	bne.n	80039ae <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2222      	movs	r2, #34	@ 0x22
 80039ac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	4619      	mov	r1, r3
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fbbf 	bl	8004138 <I2C_ITError>
      if (treatdmanack == 1U)
 80039ba:	e005      	b.n	80039c8 <I2C_Slave_ISR_DMA+0x18c>
 80039bc:	e004      	b.n	80039c8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039c6:	e011      	b.n	80039ec <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80039c8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039ca:	e00f      	b.n	80039ec <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d009      	beq.n	80039ec <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f809 	bl	80039fe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a14:	2b28      	cmp	r3, #40	@ 0x28
 8003a16:	d16a      	bne.n	8003aee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003a36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003a52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d138      	bne.n	8003ace <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003a5c:	897b      	ldrh	r3, [r7, #10]
 8003a5e:	09db      	lsrs	r3, r3, #7
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	89bb      	ldrh	r3, [r7, #12]
 8003a64:	4053      	eors	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f003 0306 	and.w	r3, r3, #6
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11c      	bne.n	8003aaa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003a70:	897b      	ldrh	r3, [r7, #10]
 8003a72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d13b      	bne.n	8003afe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2208      	movs	r2, #8
 8003a92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a9c:	89ba      	ldrh	r2, [r7, #12]
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fb7e 	bl	80031a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003aa8:	e029      	b.n	8003afe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003aaa:	893b      	ldrh	r3, [r7, #8]
 8003aac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fd50 	bl	8004558 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ac0:	89ba      	ldrh	r2, [r7, #12]
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff fb6c 	bl	80031a4 <HAL_I2C_AddrCallback>
}
 8003acc:	e017      	b.n	8003afe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ace:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fd40 	bl	8004558 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ae0:	89ba      	ldrh	r2, [r7, #12]
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fb5c 	bl	80031a4 <HAL_I2C_AddrCallback>
}
 8003aec:	e007      	b.n	8003afe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2208      	movs	r2, #8
 8003af4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b21      	cmp	r3, #33	@ 0x21
 8003b20:	d115      	bne.n	8003b4e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2211      	movs	r2, #17
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b36:	2101      	movs	r1, #1
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd0d 	bl	8004558 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fb11 	bl	800316e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b4c:	e014      	b.n	8003b78 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2212      	movs	r2, #18
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b62:	2102      	movs	r1, #2
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fcf7 	bl	8004558 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fb04 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	0b9b      	lsrs	r3, r3, #14
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e00d      	b.n	8003bd2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	0bdb      	lsrs	r3, r3, #15
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bd0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /*HAL_DMA_MODULE_ENABLED*/

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b29      	cmp	r3, #41	@ 0x29
 8003bdc:	d112      	bne.n	8003c04 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2228      	movs	r2, #40	@ 0x28
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2221      	movs	r2, #33	@ 0x21
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bec:	2101      	movs	r1, #1
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fcb2 	bl	8004558 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fac8 	bl	8003192 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c02:	e017      	b.n	8003c34 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c0e:	d111      	bne.n	8003c34 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2228      	movs	r2, #40	@ 0x28
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2222      	movs	r2, #34	@ 0x22
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fc99 	bl	8004558 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fc fdce 	bl	80007d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b21      	cmp	r3, #33	@ 0x21
 8003c5c:	d107      	bne.n	8003c6e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c5e:	2101      	movs	r1, #1
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fc79 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2211      	movs	r2, #17
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c6c:	e00c      	b.n	8003c88 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b22      	cmp	r3, #34	@ 0x22
 8003c78:	d106      	bne.n	8003c88 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fc6b 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2212      	movs	r2, #18
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc8 <I2C_ITMasterCplt+0x18c>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8003dcc <I2C_ITMasterCplt+0x190>)
 8003ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b60      	cmp	r3, #96	@ 0x60
 8003cce:	d10b      	bne.n	8003ce8 <I2C_ITMasterCplt+0xac>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb3c 	bl	8004366 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b60      	cmp	r3, #96	@ 0x60
 8003cfe:	d002      	beq.n	8003d06 <I2C_ITMasterCplt+0xca>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fa13 	bl	8004138 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d12:	e054      	b.n	8003dbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b21      	cmp	r3, #33	@ 0x21
 8003d1e:	d124      	bne.n	8003d6a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b40      	cmp	r3, #64	@ 0x40
 8003d38:	d10b      	bne.n	8003d52 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fa40 	bl	80031d0 <HAL_I2C_MemTxCpltCallback>
}
 8003d50:	e035      	b.n	8003dbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fa03 	bl	800316e <HAL_I2C_MasterTxCpltCallback>
}
 8003d68:	e029      	b.n	8003dbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b22      	cmp	r3, #34	@ 0x22
 8003d74:	d123      	bne.n	8003dbe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d10b      	bne.n	8003da8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fa1e 	bl	80031e2 <HAL_I2C_MemRxCpltCallback>
}
 8003da6:	e00a      	b.n	8003dbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff f9e1 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	fe00e800 	.word	0xfe00e800
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
 8003dfe:	2b21      	cmp	r3, #33	@ 0x21
 8003e00:	d002      	beq.n	8003e08 <I2C_ITSlaveCplt+0x38>
 8003e02:	7afb      	ldrb	r3, [r7, #11]
 8003e04:	2b29      	cmp	r3, #41	@ 0x29
 8003e06:	d108      	bne.n	8003e1a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003e08:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fba3 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2221      	movs	r2, #33	@ 0x21
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e18:	e00d      	b.n	8003e36 <I2C_ITSlaveCplt+0x66>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e1a:	7afb      	ldrb	r3, [r7, #11]
 8003e1c:	2b22      	cmp	r3, #34	@ 0x22
 8003e1e:	d002      	beq.n	8003e26 <I2C_ITSlaveCplt+0x56>
 8003e20:	7afb      	ldrb	r3, [r7, #11]
 8003e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e24:	d107      	bne.n	8003e36 <I2C_ITSlaveCplt+0x66>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003e26:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fb94 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2222      	movs	r2, #34	@ 0x22
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e44:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b8c      	ldr	r3, [pc, #560]	@ (8004084 <I2C_ITSlaveCplt+0x2b4>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa85 	bl	8004366 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	0b9b      	lsrs	r3, r3, #14
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <I2C_ITSlaveCplt+0xc0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <I2C_ITSlaveCplt+0xf2>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e8e:	e018      	b.n	8003ec2 <I2C_ITSlaveCplt+0xf2>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	0bdb      	lsrs	r3, r3, #15
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <I2C_ITSlaveCplt+0xf2>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /*HAL_DMA_MODULE_ENABLED*/

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d020      	beq.n	8003f10 <I2C_ITSlaveCplt+0x140>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <I2C_ITSlaveCplt+0x140>
    {
      hi2c->XferSize--;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <I2C_ITSlaveCplt+0x156>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f043 0204 	orr.w	r2, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d04a      	beq.n	8003fc8 <I2C_ITSlaveCplt+0x1f8>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <I2C_ITSlaveCplt+0x1f8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d128      	bne.n	8003f9a <I2C_ITSlaveCplt+0x1ca>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b28      	cmp	r3, #40	@ 0x28
 8003f52:	d108      	bne.n	8003f66 <I2C_ITSlaveCplt+0x196>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f5a:	d104      	bne.n	8003f66 <I2C_ITSlaveCplt+0x196>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f894 	bl	800408c <I2C_ITListenCplt>
 8003f64:	e030      	b.n	8003fc8 <I2C_ITSlaveCplt+0x1f8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b29      	cmp	r3, #41	@ 0x29
 8003f70:	d10e      	bne.n	8003f90 <I2C_ITSlaveCplt+0x1c0>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f78:	d00a      	beq.n	8003f90 <I2C_ITSlaveCplt+0x1c0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9ef 	bl	8004366 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fdf9 	bl	8003b80 <I2C_ITSlaveSeqCplt>
 8003f8e:	e01b      	b.n	8003fc8 <I2C_ITSlaveCplt+0x1f8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2210      	movs	r2, #16
 8003f96:	61da      	str	r2, [r3, #28]
 8003f98:	e016      	b.n	8003fc8 <I2C_ITSlaveCplt+0x1f8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f043 0204 	orr.w	r2, r3, #4
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <I2C_ITSlaveCplt+0x1ec>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fba:	d105      	bne.n	8003fc8 <I2C_ITSlaveCplt+0x1f8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8b8 	bl	8004138 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d010      	beq.n	8004000 <I2C_ITSlaveCplt+0x230>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8a7 	bl	8004138 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b28      	cmp	r3, #40	@ 0x28
 8003ff4:	d141      	bne.n	800407a <I2C_ITSlaveCplt+0x2aa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f847 	bl	800408c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ffe:	e03c      	b.n	800407a <I2C_ITSlaveCplt+0x2aa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004008:	d014      	beq.n	8004034 <I2C_ITSlaveCplt+0x264>
    I2C_ITSlaveSeqCplt(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fdb8 	bl	8003b80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1d      	ldr	r2, [pc, #116]	@ (8004088 <I2C_ITSlaveCplt+0x2b8>)
 8004014:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff f8c6 	bl	80031be <HAL_I2C_ListenCpltCallback>
}
 8004032:	e022      	b.n	800407a <I2C_ITSlaveCplt+0x2aa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b22      	cmp	r3, #34	@ 0x22
 800403e:	d10e      	bne.n	800405e <I2C_ITSlaveCplt+0x28e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fbba 	bl	80007d0 <HAL_I2C_SlaveRxCpltCallback>
}
 800405c:	e00d      	b.n	800407a <I2C_ITSlaveCplt+0x2aa>
    hi2c->State = HAL_I2C_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff f88c 	bl	8003192 <HAL_I2C_SlaveTxCpltCallback>
}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	fe00e800 	.word	0xfe00e800
 8004088:	ffff0000 	.word	0xffff0000

0800408c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <I2C_ITListenCplt+0xa8>)
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d022      	beq.n	800410a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f043 0204 	orr.w	r2, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800410a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa22 	bl	8004558 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2210      	movs	r2, #16
 800411a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff f84a 	bl	80031be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	ffff0000 	.word	0xffff0000

08004138 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004148:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /*HAL_DMA_MODULE_ENABLED*/

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a6d      	ldr	r2, [pc, #436]	@ (800430c <I2C_ITError+0x1d4>)
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b28      	cmp	r3, #40	@ 0x28
 800416e:	d005      	beq.n	800417c <I2C_ITError+0x44>
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b29      	cmp	r3, #41	@ 0x29
 8004174:	d002      	beq.n	800417c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b2a      	cmp	r3, #42	@ 0x2a
 800417a:	d10b      	bne.n	8004194 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800417c:	2103      	movs	r1, #3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9ea 	bl	8004558 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2228      	movs	r2, #40	@ 0x28
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a60      	ldr	r2, [pc, #384]	@ (8004310 <I2C_ITError+0x1d8>)
 8004190:	635a      	str	r2, [r3, #52]	@ 0x34
 8004192:	e030      	b.n	80041f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004194:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f9dd 	bl	8004558 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8e1 	bl	8004366 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b60      	cmp	r3, #96	@ 0x60
 80041ae:	d01f      	beq.n	80041f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d114      	bne.n	80041f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d109      	bne.n	80041e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2210      	movs	r2, #16
 80041da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e0:	f043 0204 	orr.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2220      	movs	r2, #32
 80041ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d039      	beq.n	8004278 <I2C_ITError+0x140>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b11      	cmp	r3, #17
 8004208:	d002      	beq.n	8004210 <I2C_ITError+0xd8>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b21      	cmp	r3, #33	@ 0x21
 800420e:	d133      	bne.n	8004278 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800421e:	d107      	bne.n	8004230 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800422e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fb6d 	bl	8002914 <HAL_DMA_GetState>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d017      	beq.n	8004270 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	4a33      	ldr	r2, [pc, #204]	@ (8004314 <I2C_ITError+0x1dc>)
 8004246:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fafe 	bl	8002856 <HAL_DMA_Abort_IT>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d04d      	beq.n	80042fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800426a:	4610      	mov	r0, r2
 800426c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800426e:	e045      	b.n	80042fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f851 	bl	8004318 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004276:	e041      	b.n	80042fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d039      	beq.n	80042f4 <I2C_ITError+0x1bc>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b12      	cmp	r3, #18
 8004284:	d002      	beq.n	800428c <I2C_ITError+0x154>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b22      	cmp	r3, #34	@ 0x22
 800428a:	d133      	bne.n	80042f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800429a:	d107      	bne.n	80042ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fb2f 	bl	8002914 <HAL_DMA_GetState>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d017      	beq.n	80042ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <I2C_ITError+0x1dc>)
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fac0 	bl	8002856 <HAL_DMA_Abort_IT>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042e6:	4610      	mov	r0, r2
 80042e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ea:	e009      	b.n	8004300 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f813 	bl	8004318 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f2:	e005      	b.n	8004300 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /*HAL_DMA_MODULE_ENABLED*/
  {
    I2C_TreatErrorCallback(hi2c);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f80f 	bl	8004318 <I2C_TreatErrorCallback>
  }
}
 80042fa:	e002      	b.n	8004302 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004300:	bf00      	nop
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	ffff0000 	.word	0xffff0000
 8004310:	08003207 	.word	0x08003207
 8004314:	080043ad 	.word	0x080043ad

08004318 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b60      	cmp	r3, #96	@ 0x60
 800432a:	d10e      	bne.n	800434a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fe ff56 	bl	80031f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004348:	e009      	b.n	800435e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fc fa53 	bl	8000804 <HAL_I2C_ErrorCallback>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	d103      	bne.n	8004384 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d007      	beq.n	80043a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	619a      	str	r2, [r3, #24]
  }
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	2200      	movs	r2, #0
 80043c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	2200      	movs	r2, #0
 80043d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff ff9c 	bl	8004318 <I2C_TreatErrorCallback>
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	4613      	mov	r3, r2
 80043f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004400:	7a7b      	ldrb	r3, [r7, #9]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004408:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	4313      	orrs	r3, r2
 8004412:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004416:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	0d5b      	lsrs	r3, r3, #21
 8004422:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004426:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <I2C_TransferConfig+0x5c>)
 8004428:	430b      	orrs	r3, r1
 800442a:	43db      	mvns	r3, r3
 800442c:	ea02 0103 	and.w	r1, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	03ff63ff 	.word	0x03ff63ff

08004448 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445c:	4a3b      	ldr	r2, [pc, #236]	@ (800454c <I2C_Enable_IRQ+0x104>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d032      	beq.n	80044c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004466:	4a3a      	ldr	r2, [pc, #232]	@ (8004550 <I2C_Enable_IRQ+0x108>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02d      	beq.n	80044c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004470:	4a38      	ldr	r2, [pc, #224]	@ (8004554 <I2C_Enable_IRQ+0x10c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d028      	beq.n	80044c8 <I2C_Enable_IRQ+0x80>
#endif /*HAL_DMA_MODULE_ENABLED*/
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da03      	bge.n	8004486 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004484:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004496:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004498:	887b      	ldrh	r3, [r7, #2]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80044a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d103      	bne.n	80044b8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80044b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d138      	bne.n	8004530 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f043 0320 	orr.w	r3, r3, #32
 80044c4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044c6:	e033      	b.n	8004530 <I2C_Enable_IRQ+0xe8>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da03      	bge.n	80044d8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80044d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80044e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80044fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044fc:	887b      	ldrh	r3, [r7, #2]
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d103      	bne.n	800450a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004508:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	2b20      	cmp	r3, #32
 800450e:	d103      	bne.n	8004518 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004516:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451c:	4a0d      	ldr	r2, [pc, #52]	@ (8004554 <I2C_Enable_IRQ+0x10c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d006      	beq.n	8004530 <I2C_Enable_IRQ+0xe8>
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d103      	bne.n	8004530 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452e:	60fb      	str	r3, [r7, #12]
#endif /*HAL_DMA_MODULE_ENABLED*/

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	0800340f 	.word	0x0800340f
 8004550:	0800383d 	.word	0x0800383d
 8004554:	080035f5 	.word	0x080035f5

08004558 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004568:	887b      	ldrh	r3, [r7, #2]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004578:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004586:	2b28      	cmp	r3, #40	@ 0x28
 8004588:	d003      	beq.n	8004592 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004590:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00f      	beq.n	80045bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80045a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045b0:	2b28      	cmp	r3, #40	@ 0x28
 80045b2:	d003      	beq.n	80045bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80045ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da03      	bge.n	80045cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d103      	bne.n	80045da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045da:	887b      	ldrh	r3, [r7, #2]
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d103      	bne.n	80045e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f043 0320 	orr.w	r3, r3, #32
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	2b40      	cmp	r3, #64	@ 0x40
 80045ec:	d103      	bne.n	80045f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	43da      	mvns	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	400a      	ands	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b20      	cmp	r3, #32
 8004626:	d138      	bne.n	800469a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004632:	2302      	movs	r3, #2
 8004634:	e032      	b.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2224      	movs	r2, #36	@ 0x24
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004664:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d139      	bne.n	8004730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e033      	b.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2224      	movs	r2, #36	@ 0x24
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004740:	4b04      	ldr	r3, [pc, #16]	@ (8004754 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a03      	ldr	r2, [pc, #12]	@ (8004754 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	58000400 	.word	0x58000400

08004758 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800475c:	4b03      	ldr	r3, [pc, #12]	@ (800476c <HAL_PWREx_GetVoltageRange+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	58000400 	.word	0x58000400

08004770 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004780:	d101      	bne.n	8004786 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	58000400 	.word	0x58000400

08004794 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047a6:	6013      	str	r3, [r2, #0]
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047c2:	6013      	str	r3, [r2, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047de:	d101      	bne.n	80047e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80047f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004800:	6013      	str	r3, [r2, #0]
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004826:	b480      	push	{r7}
 8004828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004838:	d101      	bne.n	800483e <LL_RCC_HSE_IsReady+0x18>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <LL_RCC_HSE_IsReady+0x1a>
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004892:	d101      	bne.n	8004898 <LL_RCC_HSI_IsReady+0x18>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <LL_RCC_HSI_IsReady+0x1a>
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d101      	bne.n	80048e2 <LL_RCC_LSE_IsReady+0x18>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <LL_RCC_LSE_IsReady+0x1a>
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80048f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d101      	bne.n	8004944 <LL_RCC_LSI_IsReady+0x18>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <LL_RCC_LSI_IsReady+0x1a>
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6013      	str	r3, [r2, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	6013      	str	r3, [r2, #0]
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d101      	bne.n	800499c <LL_RCC_MSI_IsReady+0x16>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <LL_RCC_MSI_IsReady+0x18>
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d101      	bne.n	80049bc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 0203 	bic.w	r2, r3, #3
 8004a2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004ab8:	f023 020f 	bic.w	r2, r3, #15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8e:	6013      	str	r3, [r2, #0]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bc6:	d101      	bne.n	8004bcc <LL_RCC_PLL_IsReady+0x18>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <LL_RCC_PLL_IsReady+0x1a>
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0303 	and.w	r3, r3, #3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c42:	d101      	bne.n	8004c48 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c66:	d101      	bne.n	8004c6c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8a:	d101      	bne.n	8004c90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cac:	d101      	bne.n	8004cb2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cce:	d101      	bne.n	8004cd4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e36f      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	f7ff fea6 	bl	8004a42 <LL_RCC_GetSysClkSource>
 8004cf6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf8:	f7ff ff8f 	bl	8004c1a <LL_RCC_PLL_GetMainSource>
 8004cfc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80c4 	beq.w	8004e94 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_RCC_OscConfig+0x3e>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b0c      	cmp	r3, #12
 8004d16:	d176      	bne.n	8004e06 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d173      	bne.n	8004e06 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e353      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_OscConfig+0x68>
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d46:	e006      	b.n	8004d56 <HAL_RCC_OscConfig+0x76>
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d222      	bcs.n	8004da0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fd5a 	bl	8005818 <RCC_SetFlashLatencyFromMSIRange>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e331      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d78:	f043 0308 	orr.w	r3, r3, #8
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fe2b 	bl	80049f4 <LL_RCC_MSI_SetCalibTrimming>
 8004d9e:	e021      	b.n	8004de4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004daa:	f043 0308 	orr.w	r3, r3, #8
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fe12 	bl	80049f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fd1f 	bl	8005818 <RCC_SetFlashLatencyFromMSIRange>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e2f6      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004de4:	f000 fce0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4aa7      	ldr	r2, [pc, #668]	@ (8005088 <HAL_RCC_OscConfig+0x3a8>)
 8004dec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004dee:	4ba7      	ldr	r3, [pc, #668]	@ (800508c <HAL_RCC_OscConfig+0x3ac>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fd fb78 	bl	80024e8 <HAL_InitTick>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d047      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	e2e5      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d02c      	beq.n	8004e68 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e0e:	f7ff fd9e 	bl	800494e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e12:	f7fd fbb5 	bl	8002580 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e1a:	f7fd fbb1 	bl	8002580 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e2d2      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e2c:	f7ff fdab 	bl	8004986 <LL_RCC_MSI_IsReady>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f1      	beq.n	8004e1a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e40:	f043 0308 	orr.w	r3, r3, #8
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fdc7 	bl	80049f4 <LL_RCC_MSI_SetCalibTrimming>
 8004e66:	e015      	b.n	8004e94 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e68:	f7ff fd7f 	bl	800496a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e6c:	f7fd fb88 	bl	8002580 <HAL_GetTick>
 8004e70:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e74:	f7fd fb84 	bl	8002580 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e2a5      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e86:	f7ff fd7e 	bl	8004986 <LL_RCC_MSI_IsReady>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f1      	bne.n	8004e74 <HAL_RCC_OscConfig+0x194>
 8004e90:	e000      	b.n	8004e94 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e92:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d058      	beq.n	8004f52 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d108      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d105      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d14b      	bne.n	8004f52 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e289      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x204>
 8004ede:	f7ff fc86 	bl	80047ee <LL_RCC_HSE_Enable>
 8004ee2:	e00d      	b.n	8004f00 <HAL_RCC_OscConfig+0x220>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004eec:	d104      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x218>
 8004eee:	f7ff fc51 	bl	8004794 <LL_RCC_HSE_EnableTcxo>
 8004ef2:	f7ff fc7c 	bl	80047ee <LL_RCC_HSE_Enable>
 8004ef6:	e003      	b.n	8004f00 <HAL_RCC_OscConfig+0x220>
 8004ef8:	f7ff fc87 	bl	800480a <LL_RCC_HSE_Disable>
 8004efc:	f7ff fc58 	bl	80047b0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd fb3a 	bl	8002580 <HAL_GetTick>
 8004f0c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fd fb36 	bl	8002580 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	@ 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e257      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004f22:	f7ff fc80 	bl	8004826 <LL_RCC_HSE_IsReady>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f1      	beq.n	8004f10 <HAL_RCC_OscConfig+0x230>
 8004f2c:	e011      	b.n	8004f52 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2e:	f7fd fb27 	bl	8002580 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f36:	f7fd fb23 	bl	8002580 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b64      	cmp	r3, #100	@ 0x64
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e244      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f48:	f7ff fc6d 	bl	8004826 <LL_RCC_HSE_IsReady>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f1      	bne.n	8004f36 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d046      	beq.n	8004fec <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_OscConfig+0x290>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d10e      	bne.n	8004f88 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e22a      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fc8e 	bl	80048a2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f86:	e031      	b.n	8004fec <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d019      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f90:	f7ff fc5a 	bl	8004848 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fd faf4 	bl	8002580 <HAL_GetTick>
 8004f98:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9c:	f7fd faf0 	bl	8002580 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e211      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004fae:	f7ff fc67 	bl	8004880 <LL_RCC_HSI_IsReady>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f1      	beq.n	8004f9c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fc70 	bl	80048a2 <LL_RCC_HSI_SetCalibTrimming>
 8004fc2:	e013      	b.n	8004fec <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc4:	f7ff fc4e 	bl	8004864 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fada 	bl	8002580 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fd fad6 	bl	8002580 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1f7      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004fe2:	f7ff fc4d 	bl	8004880 <LL_RCC_HSI_IsReady>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f1      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d06e      	beq.n	80050d6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d056      	beq.n	80050ae <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005008:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	429a      	cmp	r2, r3
 8005016:	d031      	beq.n	800507c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d006      	beq.n	8005030 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e1d0      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d013      	beq.n	8005062 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800503a:	f7ff fc67 	bl	800490c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800503e:	f7fd fa9f 	bl	8002580 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005046:	f7fd fa9b 	bl	8002580 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b11      	cmp	r3, #17
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e1bc      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005058:	f7ff fc68 	bl	800492c <LL_RCC_LSI_IsReady>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f1      	bne.n	8005046 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800506a:	f023 0210 	bic.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507c:	f7ff fc36 	bl	80048ec <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005080:	f7fd fa7e 	bl	8002580 <HAL_GetTick>
 8005084:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005086:	e00c      	b.n	80050a2 <HAL_RCC_OscConfig+0x3c2>
 8005088:	20000000 	.word	0x20000000
 800508c:	20000034 	.word	0x20000034
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd fa76 	bl	8002580 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b11      	cmp	r3, #17
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e197      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80050a2:	f7ff fc43 	bl	800492c <LL_RCC_LSI_IsReady>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f1      	beq.n	8005090 <HAL_RCC_OscConfig+0x3b0>
 80050ac:	e013      	b.n	80050d6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ae:	f7ff fc2d 	bl	800490c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fd fa65 	bl	8002580 <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fd fa61 	bl	8002580 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b11      	cmp	r3, #17
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e182      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80050cc:	f7ff fc2e 	bl	800492c <LL_RCC_LSI_IsReady>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f1      	bne.n	80050ba <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80d8 	beq.w	8005294 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80050e4:	f7ff fb44 	bl	8004770 <LL_PWR_IsEnabledBkUpAccess>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d113      	bne.n	8005116 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050ee:	f7ff fb25 	bl	800473c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f2:	f7fd fa45 	bl	8002580 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fa:	f7fd fa41 	bl	8002580 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e162      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800510c:	f7ff fb30 	bl	8004770 <LL_PWR_IsEnabledBkUpAccess>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f1      	beq.n	80050fa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d07b      	beq.n	8005216 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b85      	cmp	r3, #133	@ 0x85
 8005124:	d003      	beq.n	800512e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b05      	cmp	r3, #5
 800512c:	d109      	bne.n	8005142 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fd fa1d 	bl	8002580 <HAL_GetTick>
 8005146:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800515c:	e00a      	b.n	8005174 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fd fa0f 	bl	8002580 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e12e      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005174:	f7ff fba9 	bl	80048ca <LL_RCC_LSE_IsReady>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0ef      	beq.n	800515e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b81      	cmp	r3, #129	@ 0x81
 8005184:	d003      	beq.n	800518e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b85      	cmp	r3, #133	@ 0x85
 800518c:	d121      	bne.n	80051d2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518e:	f7fd f9f7 	bl	8002580 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fd f9e9 	bl	8002580 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e108      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ec      	beq.n	80051aa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80051d0:	e060      	b.n	8005294 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fd f9d5 	bl	8002580 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051ec:	e00a      	b.n	8005204 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fd f9c7 	bl	8002580 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0e6      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ec      	bne.n	80051ee <HAL_RCC_OscConfig+0x50e>
 8005214:	e03e      	b.n	8005294 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005216:	f7fd f9b3 	bl	8002580 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800521c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800522c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fd f9a5 	bl	8002580 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e0c4      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ec      	bne.n	8005232 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005258:	f7fd f992 	bl	8002580 <HAL_GetTick>
 800525c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005266:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fd f984 	bl	8002580 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0a3      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800528a:	f7ff fb1e 	bl	80048ca <LL_RCC_LSE_IsReady>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ef      	bne.n	8005274 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8099 	beq.w	80053d0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d06c      	beq.n	800537e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d14b      	bne.n	8005344 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	f7ff fc74 	bl	8004b98 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b0:	f7fd f966 	bl	8002580 <HAL_GetTick>
 80052b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fd f962 	bl	8002580 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b0a      	cmp	r3, #10
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e083      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80052ca:	f7ff fc73 	bl	8004bb4 <LL_RCC_PLL_IsReady>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f1      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	4b40      	ldr	r3, [pc, #256]	@ (80053dc <HAL_RCC_OscConfig+0x6fc>)
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052e6:	4311      	orrs	r1, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052ec:	0212      	lsls	r2, r2, #8
 80052ee:	4311      	orrs	r1, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052f4:	4311      	orrs	r1, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80052fa:	4311      	orrs	r1, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005300:	430a      	orrs	r2, r1
 8005302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005306:	4313      	orrs	r3, r2
 8005308:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800530a:	f7ff fc37 	bl	8004b7c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fd f92f 	bl	8002580 <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005326:	f7fd f92b 	bl	8002580 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b0a      	cmp	r3, #10
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e04c      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005338:	f7ff fc3c 	bl	8004bb4 <LL_RCC_PLL_IsReady>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f1      	beq.n	8005326 <HAL_RCC_OscConfig+0x646>
 8005342:	e045      	b.n	80053d0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005344:	f7ff fc28 	bl	8004b98 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fd f91a 	bl	8002580 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005350:	f7fd f916 	bl	8002580 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b0a      	cmp	r3, #10
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e037      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005362:	f7ff fc27 	bl	8004bb4 <LL_RCC_PLL_IsReady>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f1      	bne.n	8005350 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005376:	4b1a      	ldr	r3, [pc, #104]	@ (80053e0 <HAL_RCC_OscConfig+0x700>)
 8005378:	4013      	ands	r3, r2
 800537a:	60cb      	str	r3, [r1, #12]
 800537c:	e028      	b.n	80053d0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e023      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f003 0203 	and.w	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	429a      	cmp	r2, r3
 800539e:	d115      	bne.n	80053cc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d10e      	bne.n	80053cc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	11c1808c 	.word	0x11c1808c
 80053e0:	eefefffc 	.word	0xeefefffc

080053e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e12c      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b98      	ldr	r3, [pc, #608]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d91b      	bls.n	800543e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b95      	ldr	r3, [pc, #596]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 0207 	bic.w	r2, r3, #7
 800540e:	4993      	ldr	r1, [pc, #588]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005416:	f7fd f8b3 	bl	8002580 <HAL_GetTick>
 800541a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541c:	e008      	b.n	8005430 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800541e:	f7fd f8af 	bl	8002580 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e110      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005430:	4b8a      	ldr	r3, [pc, #552]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d1ef      	bne.n	800541e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d016      	beq.n	8005478 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fb02 	bl	8004a58 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005454:	f7fd f894 	bl	8002580 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800545c:	f7fd f890 	bl	8002580 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0f1      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800546e:	f7ff fbdf 	bl	8004c30 <LL_RCC_IsActiveFlag_HPRE>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f1      	beq.n	800545c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d016      	beq.n	80054b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff faf8 	bl	8004a7e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800548e:	f7fd f877 	bl	8002580 <HAL_GetTick>
 8005492:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005496:	f7fd f873 	bl	8002580 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0d4      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054a8:	f7ff fbd3 	bl	8004c52 <LL_RCC_IsActiveFlag_C2HPRE>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f1      	beq.n	8005496 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff faf0 	bl	8004aa8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054c8:	f7fd f85a 	bl	8002580 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054d0:	f7fd f856 	bl	8002580 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e0b7      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054e2:	f7ff fbc8 	bl	8004c76 <LL_RCC_IsActiveFlag_SHDHPRE>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f1      	beq.n	80054d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d016      	beq.n	8005526 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fae9 	bl	8004ad4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005502:	f7fd f83d 	bl	8002580 <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800550a:	f7fd f839 	bl	8002580 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e09a      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800551c:	f7ff fbbd 	bl	8004c9a <LL_RCC_IsActiveFlag_PPRE1>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f1      	beq.n	800550a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d017      	beq.n	8005562 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fade 	bl	8004afa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800553e:	f7fd f81f 	bl	8002580 <HAL_GetTick>
 8005542:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005546:	f7fd f81b 	bl	8002580 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e07c      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005558:	f7ff fbb0 	bl	8004cbc <LL_RCC_IsActiveFlag_PPRE2>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f1      	beq.n	8005546 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d043      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d106      	bne.n	8005584 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005576:	f7ff f956 	bl	8004826 <LL_RCC_HSE_IsReady>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11e      	bne.n	80055be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e066      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d106      	bne.n	800559a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800558c:	f7ff fb12 	bl	8004bb4 <LL_RCC_PLL_IsReady>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e05b      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80055a2:	f7ff f9f0 	bl	8004986 <LL_RCC_MSI_IsReady>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d108      	bne.n	80055be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e050      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80055b0:	f7ff f966 	bl	8004880 <LL_RCC_HSI_IsReady>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e049      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fa2a 	bl	8004a1c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c8:	f7fc ffda 	bl	8002580 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d0:	f7fc ffd6 	bl	8002580 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e035      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	f7ff fa2c 	bl	8004a42 <LL_RCC_GetSysClkSource>
 80055ea:	4602      	mov	r2, r0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d1ec      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f6:	4b19      	ldr	r3, [pc, #100]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d21b      	bcs.n	800563c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005604:	4b15      	ldr	r3, [pc, #84]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	4913      	ldr	r1, [pc, #76]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005614:	f7fc ffb4 	bl	8002580 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	e008      	b.n	800562e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800561c:	f7fc ffb0 	bl	8002580 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e011      	b.n	8005652 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d1ef      	bne.n	800561c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800563c:	f000 f8b4 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 8005640:	4603      	mov	r3, r0
 8005642:	4a07      	ldr	r2, [pc, #28]	@ (8005660 <HAL_RCC_ClockConfig+0x27c>)
 8005644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005646:	4b07      	ldr	r3, [pc, #28]	@ (8005664 <HAL_RCC_ClockConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc ff4c 	bl	80024e8 <HAL_InitTick>
 8005650:	4603      	mov	r3, r0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	58004000 	.word	0x58004000
 8005660:	20000000 	.word	0x20000000
 8005664:	20000034 	.word	0x20000034

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005676:	f7ff f9e4 	bl	8004a42 <LL_RCC_GetSysClkSource>
 800567a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800567c:	f7ff facd 	bl	8004c1a <LL_RCC_PLL_GetMainSource>
 8005680:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x2c>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b0c      	cmp	r3, #12
 800568c:	d139      	bne.n	8005702 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d136      	bne.n	8005702 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005694:	f7ff f987 	bl	80049a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d115      	bne.n	80056ca <HAL_RCC_GetSysClockFreq+0x62>
 800569e:	f7ff f982 	bl	80049a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_GetSysClockFreq+0x4e>
 80056a8:	f7ff f98d 	bl	80049c6 <LL_RCC_MSI_GetRange>
 80056ac:	4603      	mov	r3, r0
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	e005      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x5a>
 80056b6:	f7ff f991 	bl	80049dc <LL_RCC_MSI_GetRangeAfterStandby>
 80056ba:	4603      	mov	r3, r0
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	4a36      	ldr	r2, [pc, #216]	@ (800579c <HAL_RCC_GetSysClockFreq+0x134>)
 80056c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c8:	e014      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x8c>
 80056ca:	f7ff f96c 	bl	80049a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d106      	bne.n	80056e2 <HAL_RCC_GetSysClockFreq+0x7a>
 80056d4:	f7ff f977 	bl	80049c6 <LL_RCC_MSI_GetRange>
 80056d8:	4603      	mov	r3, r0
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	e005      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x86>
 80056e2:	f7ff f97b 	bl	80049dc <LL_RCC_MSI_GetRangeAfterStandby>
 80056e6:	4603      	mov	r3, r0
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	4a2b      	ldr	r2, [pc, #172]	@ (800579c <HAL_RCC_GetSysClockFreq+0x134>)
 80056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d115      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005700:	e012      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d102      	bne.n	800570e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005708:	4b25      	ldr	r3, [pc, #148]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e00c      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d109      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005714:	f7ff f85a 	bl	80047cc <LL_RCC_HSE_IsEnabledDiv2>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d102      	bne.n	8005724 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800571e:	4b20      	ldr	r3, [pc, #128]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e001      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005724:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005726:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005728:	f7ff f98b 	bl	8004a42 <LL_RCC_GetSysClkSource>
 800572c:	4603      	mov	r3, r0
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d12f      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005732:	f7ff fa72 	bl	8004c1a <LL_RCC_PLL_GetMainSource>
 8005736:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0xde>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d003      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0xe4>
 8005744:	e00d      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005746:	4b16      	ldr	r3, [pc, #88]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005748:	60fb      	str	r3, [r7, #12]
        break;
 800574a:	e00d      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800574c:	f7ff f83e 	bl	80047cc <LL_RCC_HSE_IsEnabledDiv2>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d102      	bne.n	800575c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005756:	4b12      	ldr	r3, [pc, #72]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005758:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800575a:	e005      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800575c:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800575e:	60fb      	str	r3, [r7, #12]
        break;
 8005760:	e002      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	60fb      	str	r3, [r7, #12]
        break;
 8005766:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005768:	f7ff fa35 	bl	8004bd6 <LL_RCC_PLL_GetN>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	fb03 f402 	mul.w	r4, r3, r2
 8005774:	f7ff fa46 	bl	8004c04 <LL_RCC_PLL_GetDivider>
 8005778:	4603      	mov	r3, r0
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	3301      	adds	r3, #1
 800577e:	fbb4 f4f3 	udiv	r4, r4, r3
 8005782:	f7ff fa34 	bl	8004bee <LL_RCC_PLL_GetR>
 8005786:	4603      	mov	r3, r0
 8005788:	0f5b      	lsrs	r3, r3, #29
 800578a:	3301      	adds	r3, #1
 800578c:	fbb4 f3f3 	udiv	r3, r4, r3
 8005790:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005792:	697b      	ldr	r3, [r7, #20]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd90      	pop	{r4, r7, pc}
 800579c:	08008424 	.word	0x08008424
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	01e84800 	.word	0x01e84800

080057a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b598      	push	{r3, r4, r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80057ac:	f7ff ff5c 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 80057b0:	4604      	mov	r4, r0
 80057b2:	f7ff f9b5 	bl	8004b20 <LL_RCC_GetAHBPrescaler>
 80057b6:	4603      	mov	r3, r0
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	4a03      	ldr	r2, [pc, #12]	@ (80057cc <HAL_RCC_GetHCLKFreq+0x24>)
 80057c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd98      	pop	{r3, r4, r7, pc}
 80057cc:	080083c4 	.word	0x080083c4

080057d0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d0:	b598      	push	{r3, r4, r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80057d4:	f7ff ffe8 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057d8:	4604      	mov	r4, r0
 80057da:	f7ff f9b9 	bl	8004b50 <LL_RCC_GetAPB1Prescaler>
 80057de:	4603      	mov	r3, r0
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	4a03      	ldr	r2, [pc, #12]	@ (80057f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd98      	pop	{r3, r4, r7, pc}
 80057f0:	08008404 	.word	0x08008404

080057f4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f4:	b598      	push	{r3, r4, r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80057f8:	f7ff ffd6 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057fc:	4604      	mov	r4, r0
 80057fe:	f7ff f9b2 	bl	8004b66 <LL_RCC_GetAPB2Prescaler>
 8005802:	4603      	mov	r3, r0
 8005804:	0adb      	lsrs	r3, r3, #11
 8005806:	4a03      	ldr	r2, [pc, #12]	@ (8005814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd98      	pop	{r3, r4, r7, pc}
 8005814:	08008404 	.word	0x08008404

08005818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	4a10      	ldr	r2, [pc, #64]	@ (800586c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800582a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005830:	f7ff f981 	bl	8004b36 <LL_RCC_GetAHB3Prescaler>
 8005834:	4603      	mov	r3, r0
 8005836:	091b      	lsrs	r3, r3, #4
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	4a0c      	ldr	r2, [pc, #48]	@ (8005870 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800583e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4a09      	ldr	r2, [pc, #36]	@ (8005874 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	0c9c      	lsrs	r4, r3, #18
 8005854:	f7fe ff80 	bl	8004758 <HAL_PWREx_GetVoltageRange>
 8005858:	4603      	mov	r3, r0
 800585a:	4619      	mov	r1, r3
 800585c:	4620      	mov	r0, r4
 800585e:	f000 f80b 	bl	8005878 <RCC_SetFlashLatency>
 8005862:	4603      	mov	r3, r0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	bd90      	pop	{r4, r7, pc}
 800586c:	08008424 	.word	0x08008424
 8005870:	080083c4 	.word	0x080083c4
 8005874:	431bde83 	.word	0x431bde83

08005878 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	@ 0x38
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005882:	4a3a      	ldr	r2, [pc, #232]	@ (800596c <RCC_SetFlashLatency+0xf4>)
 8005884:	f107 0320 	add.w	r3, r7, #32
 8005888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800588c:	6018      	str	r0, [r3, #0]
 800588e:	3304      	adds	r3, #4
 8005890:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005892:	4a37      	ldr	r2, [pc, #220]	@ (8005970 <RCC_SetFlashLatency+0xf8>)
 8005894:	f107 0318 	add.w	r3, r7, #24
 8005898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800589c:	6018      	str	r0, [r3, #0]
 800589e:	3304      	adds	r3, #4
 80058a0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80058a2:	4a34      	ldr	r2, [pc, #208]	@ (8005974 <RCC_SetFlashLatency+0xfc>)
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80058aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80058ae:	2300      	movs	r3, #0
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b8:	d11b      	bne.n	80058f2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80058be:	e014      	b.n	80058ea <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	3338      	adds	r3, #56	@ 0x38
 80058c6:	443b      	add	r3, r7
 80058c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d807      	bhi.n	80058e4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	3338      	adds	r3, #56	@ 0x38
 80058da:	443b      	add	r3, r7
 80058dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058e2:	e021      	b.n	8005928 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	3301      	adds	r3, #1
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d9e7      	bls.n	80058c0 <RCC_SetFlashLatency+0x48>
 80058f0:	e01a      	b.n	8005928 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058f2:	2300      	movs	r3, #0
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f6:	e014      	b.n	8005922 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	3338      	adds	r3, #56	@ 0x38
 80058fe:	443b      	add	r3, r7
 8005900:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005904:	461a      	mov	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4293      	cmp	r3, r2
 800590a:	d807      	bhi.n	800591c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800590c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	3338      	adds	r3, #56	@ 0x38
 8005912:	443b      	add	r3, r7
 8005914:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800591a:	e005      	b.n	8005928 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	3301      	adds	r3, #1
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	2b02      	cmp	r3, #2
 8005926:	d9e7      	bls.n	80058f8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005928:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <RCC_SetFlashLatency+0x100>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f023 0207 	bic.w	r2, r3, #7
 8005930:	4911      	ldr	r1, [pc, #68]	@ (8005978 <RCC_SetFlashLatency+0x100>)
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005938:	f7fc fe22 	bl	8002580 <HAL_GetTick>
 800593c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800593e:	e008      	b.n	8005952 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005940:	f7fc fe1e 	bl	8002580 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e007      	b.n	8005962 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005952:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <RCC_SetFlashLatency+0x100>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800595c:	429a      	cmp	r2, r3
 800595e:	d1ef      	bne.n	8005940 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3738      	adds	r7, #56	@ 0x38
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	080083a8 	.word	0x080083a8
 8005970:	080083b0 	.word	0x080083b0
 8005974:	080083b8 	.word	0x080083b8
 8005978:	58004000 	.word	0x58004000

0800597c <LL_RCC_LSE_IsReady>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d101      	bne.n	8005994 <LL_RCC_LSE_IsReady+0x18>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <LL_RCC_LSE_IsReady+0x1a>
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <LL_RCC_SetUSARTClockSource>:
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80059a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	43db      	mvns	r3, r3
 80059b4:	401a      	ands	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_SetI2SClockSource>:
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <LL_RCC_SetLPUARTClockSource>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <LL_RCC_SetI2CClockSource>:
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	401a      	ands	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_SetLPTIMClockSource>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_SetRNGClockSource>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005aa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_SetADCClockSource>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <LL_RCC_SetRTCClockSource>:
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005af4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_GetRTCClockSource>:
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <LL_RCC_ForceBackupDomainReset>:
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005b5a:	bf00      	nop
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005b70:	2300      	movs	r3, #0
 8005b72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b74:	2300      	movs	r3, #0
 8005b76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d058      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005b84:	f7fe fdda 	bl	800473c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b88:	f7fc fcfa 	bl	8002580 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005b8e:	e009      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b90:	f7fc fcf6 	bl	8002580 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d902      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	74fb      	strb	r3, [r7, #19]
        break;
 8005ba2:	e006      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb0:	d1ee      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d13c      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005bb8:	f7ff ffa7 	bl	8005b0a <LL_RCC_GetRTCClockSource>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d00f      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bd4:	f7ff ffa5 	bl	8005b22 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bd8:	f7ff ffb3 	bl	8005b42 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d014      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fc fcc6 	bl	8002580 <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005bf6:	e00b      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f7fc fcc2 	bl	8002580 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d902      	bls.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	74fb      	strb	r3, [r7, #19]
            break;
 8005c0e:	e004      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005c10:	f7ff feb4 	bl	800597c <LL_RCC_LSE_IsReady>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d1ee      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005c1a:	7cfb      	ldrb	r3, [r7, #19]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff5b 	bl	8005ae0 <LL_RCC_SetRTCClockSource>
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	74bb      	strb	r3, [r7, #18]
 8005c30:	e001      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	7cfb      	ldrb	r3, [r7, #19]
 8005c34:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fea9 	bl	800599e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fe9e 	bl	800599e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fec0 	bl	80059f8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fee6 	bl	8005a5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fedb 	bl	8005a5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fed0 	bl	8005a5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fea9 	bl	8005a22 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fe9e 	bl	8005a22 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fe93 	bl	8005a22 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d011      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fe5e 	bl	80059ce <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fea5 	bl	8005a8c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d011      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fea3 	bl	8005ab6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d78:	d107      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d88:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005d8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	58000400 	.word	0x58000400

08005d98 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005da0:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005da8:	4904      	ldr	r1, [pc, #16]	@ (8005dbc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	58000400 	.word	0x58000400

08005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dca:	4a04      	ldr	r2, [pc, #16]	@ (8005ddc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr
 8005ddc:	58000400 	.word	0x58000400

08005de0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005de4:	4b05      	ldr	r3, [pc, #20]	@ (8005dfc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dea:	4a04      	ldr	r2, [pc, #16]	@ (8005dfc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005dec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	58000400 	.word	0x58000400

08005e00 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005e04:	4b03      	ldr	r3, [pc, #12]	@ (8005e14 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e0a:	619a      	str	r2, [r3, #24]
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	58000400 	.word	0x58000400

08005e18 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d101      	bne.n	8005e2c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	58000400 	.word	0x58000400

08005e3c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005e40:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d101      	bne.n	8005e50 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	58000400 	.word	0x58000400

08005e60 <LL_RCC_RF_DisableReset>:
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_IsRFUnderReset>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e94:	d101      	bne.n	8005e9a <LL_RCC_IsRFUnderReset+0x1a>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <LL_RCC_IsRFUnderReset+0x1c>
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <LL_EXTI_EnableIT_32_63+0x24>)
 8005eae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005eb2:	4905      	ldr	r1, [pc, #20]	@ (8005ec8 <LL_EXTI_EnableIT_32_63+0x24>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	58000800 	.word	0x58000800

08005ecc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
    return status;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	e052      	b.n	8005f88 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	799b      	ldrb	r3, [r3, #6]
 8005eea:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_SUBGHZ_Init+0x2c>
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d109      	bne.n	8005f0c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fa ffba 	bl	8000e78 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005f04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005f08:	f7ff ffcc 	bl	8005ea4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d126      	bne.n	8005f60 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005f18:	f7ff ffa2 	bl	8005e60 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f90 <HAL_SUBGHZ_Init+0xc4>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	0cdb      	lsrs	r3, r3, #19
 8005f2a:	2264      	movs	r2, #100	@ 0x64
 8005f2c:	fb02 f303 	mul.w	r3, r2, r3
 8005f30:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	609a      	str	r2, [r3, #8]
        break;
 8005f42:	e007      	b.n	8005f54 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005f4a:	f7ff ff99 	bl	8005e80 <LL_RCC_IsRFUnderReset>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ee      	bne.n	8005f32 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f54:	f7ff ff34 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005f58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005f5c:	f7ff ff1c 	bl	8005d98 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005f60:	f7ff ff4e 	bl	8005e00 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fabc 	bl	80064ec <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	719a      	strb	r2, [r3, #6]

  return status;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000000 	.word	0x20000000

08005f94 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	817b      	strh	r3, [r7, #10]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	799b      	ldrb	r3, [r3, #6]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d14a      	bne.n	8006048 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	795b      	ldrb	r3, [r3, #5]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e045      	b.n	800604a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fb5c 	bl	8006688 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005fd0:	f7ff ff06 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005fd4:	210d      	movs	r1, #13
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 faa8 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005fdc:	897b      	ldrh	r3, [r7, #10]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 faa0 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005fec:	897b      	ldrh	r3, [r7, #10]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fa9a 	bl	800652c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	82bb      	strh	r3, [r7, #20]
 8005ffc:	e00a      	b.n	8006014 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ffe:	8abb      	ldrh	r3, [r7, #20]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	4619      	mov	r1, r3
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fa8f 	bl	800652c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800600e:	8abb      	ldrh	r3, [r7, #20]
 8006010:	3301      	adds	r3, #1
 8006012:	82bb      	strh	r3, [r7, #20]
 8006014:	8aba      	ldrh	r2, [r7, #20]
 8006016:	893b      	ldrh	r3, [r7, #8]
 8006018:	429a      	cmp	r2, r3
 800601a:	d3f0      	bcc.n	8005ffe <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800601c:	f7ff fed0 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fb55 	bl	80066d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	75fb      	strb	r3, [r7, #23]
 8006032:	e001      	b.n	8006038 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	715a      	strb	r2, [r3, #5]

    return status;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	e000      	b.n	800604a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b088      	sub	sp, #32
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	461a      	mov	r2, r3
 800605e:	460b      	mov	r3, r1
 8006060:	817b      	strh	r3, [r7, #10]
 8006062:	4613      	mov	r3, r2
 8006064:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	799b      	ldrb	r3, [r3, #6]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d14a      	bne.n	800610a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	795b      	ldrb	r3, [r3, #5]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800607c:	2302      	movs	r3, #2
 800607e:	e045      	b.n	800610c <HAL_SUBGHZ_ReadRegisters+0xba>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fafe 	bl	8006688 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800608c:	f7ff fea8 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006090:	211d      	movs	r1, #29
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fa4a 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006098:	897b      	ldrh	r3, [r7, #10]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	4619      	mov	r1, r3
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fa42 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80060a8:	897b      	ldrh	r3, [r7, #10]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fa3c 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80060b4:	2100      	movs	r1, #0
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa38 	bl	800652c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80060bc:	2300      	movs	r3, #0
 80060be:	82fb      	strh	r3, [r7, #22]
 80060c0:	e009      	b.n	80060d6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80060c2:	69b9      	ldr	r1, [r7, #24]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fa87 	bl	80065d8 <SUBGHZSPI_Receive>
      pData++;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	3301      	adds	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80060d0:	8afb      	ldrh	r3, [r7, #22]
 80060d2:	3301      	adds	r3, #1
 80060d4:	82fb      	strh	r3, [r7, #22]
 80060d6:	8afa      	ldrh	r2, [r7, #22]
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d3f1      	bcc.n	80060c2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060de:	f7ff fe6f 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 faf4 	bl	80066d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e001      	b.n	80060fa <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	715a      	strb	r2, [r3, #5]

    return status;
 8006106:	7ffb      	ldrb	r3, [r7, #31]
 8006108:	e000      	b.n	800610c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	461a      	mov	r2, r3
 8006120:	460b      	mov	r3, r1
 8006122:	72fb      	strb	r3, [r7, #11]
 8006124:	4613      	mov	r3, r2
 8006126:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	799b      	ldrb	r3, [r3, #6]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d14a      	bne.n	80061c8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	795b      	ldrb	r3, [r3, #5]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800613a:	2302      	movs	r3, #2
 800613c:	e045      	b.n	80061ca <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fa9f 	bl	8006688 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800614a:	7afb      	ldrb	r3, [r7, #11]
 800614c:	2b84      	cmp	r3, #132	@ 0x84
 800614e:	d002      	beq.n	8006156 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	2b94      	cmp	r3, #148	@ 0x94
 8006154:	d103      	bne.n	800615e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	711a      	strb	r2, [r3, #4]
 800615c:	e002      	b.n	8006164 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006164:	f7ff fe3c 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006168:	7afb      	ldrb	r3, [r7, #11]
 800616a:	4619      	mov	r1, r3
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f9dd 	bl	800652c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006172:	2300      	movs	r3, #0
 8006174:	82bb      	strh	r3, [r7, #20]
 8006176:	e00a      	b.n	800618e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006178:	8abb      	ldrh	r3, [r7, #20]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	4619      	mov	r1, r3
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f9d2 	bl	800652c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006188:	8abb      	ldrh	r3, [r7, #20]
 800618a:	3301      	adds	r3, #1
 800618c:	82bb      	strh	r3, [r7, #20]
 800618e:	8aba      	ldrh	r2, [r7, #20]
 8006190:	893b      	ldrh	r3, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	d3f0      	bcc.n	8006178 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006196:	f7ff fe13 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	2b84      	cmp	r3, #132	@ 0x84
 800619e:	d002      	beq.n	80061a6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fa95 	bl	80066d0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]
 80061b2:	e001      	b.n	80061b8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	715a      	strb	r2, [r3, #5]

    return status;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	e000      	b.n	80061ca <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
  }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	461a      	mov	r2, r3
 80061de:	460b      	mov	r3, r1
 80061e0:	72fb      	strb	r3, [r7, #11]
 80061e2:	4613      	mov	r3, r2
 80061e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	799b      	ldrb	r3, [r3, #6]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d13d      	bne.n	8006270 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	795b      	ldrb	r3, [r3, #5]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e038      	b.n	8006272 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fa3e 	bl	8006688 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800620c:	f7ff fde8 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	4619      	mov	r1, r3
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f989 	bl	800652c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800621a:	2100      	movs	r1, #0
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f985 	bl	800652c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006222:	2300      	movs	r3, #0
 8006224:	82fb      	strh	r3, [r7, #22]
 8006226:	e009      	b.n	800623c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006228:	69b9      	ldr	r1, [r7, #24]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f9d4 	bl	80065d8 <SUBGHZSPI_Receive>
      pData++;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	3301      	adds	r3, #1
 8006234:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006236:	8afb      	ldrh	r3, [r7, #22]
 8006238:	3301      	adds	r3, #1
 800623a:	82fb      	strh	r3, [r7, #22]
 800623c:	8afa      	ldrh	r2, [r7, #22]
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d3f1      	bcc.n	8006228 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006244:	f7ff fdbc 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fa41 	bl	80066d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e001      	b.n	8006260 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	715a      	strb	r2, [r3, #5]

    return status;
 800626c:	7ffb      	ldrb	r3, [r7, #31]
 800626e:	e000      	b.n	8006272 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	461a      	mov	r2, r3
 8006286:	460b      	mov	r3, r1
 8006288:	72fb      	strb	r3, [r7, #11]
 800628a:	4613      	mov	r3, r2
 800628c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	799b      	ldrb	r3, [r3, #6]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d13e      	bne.n	8006316 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	795b      	ldrb	r3, [r3, #5]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e039      	b.n	8006318 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f9ec 	bl	8006688 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80062b0:	f7ff fd96 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80062b4:	210e      	movs	r1, #14
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f938 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	4619      	mov	r1, r3
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f933 	bl	800652c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	82bb      	strh	r3, [r7, #20]
 80062ca:	e00a      	b.n	80062e2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80062cc:	8abb      	ldrh	r3, [r7, #20]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f928 	bl	800652c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80062dc:	8abb      	ldrh	r3, [r7, #20]
 80062de:	3301      	adds	r3, #1
 80062e0:	82bb      	strh	r3, [r7, #20]
 80062e2:	8aba      	ldrh	r2, [r7, #20]
 80062e4:	893b      	ldrh	r3, [r7, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3f0      	bcc.n	80062cc <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80062ea:	f7ff fd69 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f9ee 	bl	80066d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
 8006300:	e001      	b.n	8006306 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	715a      	strb	r2, [r3, #5]

    return status;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	e000      	b.n	8006318 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006316:	2302      	movs	r3, #2
  }
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	460b      	mov	r3, r1
 800632e:	72fb      	strb	r3, [r7, #11]
 8006330:	4613      	mov	r3, r2
 8006332:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	799b      	ldrb	r3, [r3, #6]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d141      	bne.n	80063c6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	795b      	ldrb	r3, [r3, #5]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800634a:	2302      	movs	r3, #2
 800634c:	e03c      	b.n	80063c8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f997 	bl	8006688 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800635a:	f7ff fd41 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800635e:	211e      	movs	r1, #30
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f8e3 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	4619      	mov	r1, r3
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f8de 	bl	800652c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006370:	2100      	movs	r1, #0
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f8da 	bl	800652c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006378:	2300      	movs	r3, #0
 800637a:	82fb      	strh	r3, [r7, #22]
 800637c:	e009      	b.n	8006392 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800637e:	69b9      	ldr	r1, [r7, #24]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f929 	bl	80065d8 <SUBGHZSPI_Receive>
      pData++;
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	3301      	adds	r3, #1
 800638a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800638c:	8afb      	ldrh	r3, [r7, #22]
 800638e:	3301      	adds	r3, #1
 8006390:	82fb      	strh	r3, [r7, #22]
 8006392:	8afa      	ldrh	r2, [r7, #22]
 8006394:	893b      	ldrh	r3, [r7, #8]
 8006396:	429a      	cmp	r2, r3
 8006398:	d3f1      	bcc.n	800637e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800639a:	f7ff fd11 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f996 	bl	80066d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e001      	b.n	80063b6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	715a      	strb	r2, [r3, #5]

    return status;
 80063c2:	7ffb      	ldrb	r3, [r7, #31]
 80063c4:	e000      	b.n	80063c8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80063d8:	2300      	movs	r3, #0
 80063da:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80063dc:	f107 020c 	add.w	r2, r7, #12
 80063e0:	2302      	movs	r3, #2
 80063e2:	2112      	movs	r1, #18
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff fef4 	bl	80061d2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80063ea:	7b3b      	ldrb	r3, [r7, #12]
 80063ec:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80063ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	b21a      	sxth	r2, r3
 80063f6:	7b7b      	ldrb	r3, [r7, #13]
 80063f8:	b21b      	sxth	r3, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006400:	f107 020c 	add.w	r2, r7, #12
 8006404:	2302      	movs	r3, #2
 8006406:	2102      	movs	r1, #2
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fe83 	bl	8006114 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800640e:	89fb      	ldrh	r3, [r7, #14]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fb ff83 	bl	8002324 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800641e:	89fb      	ldrh	r3, [r7, #14]
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fb ff82 	bl	8002340 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800643c:	89fb      	ldrh	r3, [r7, #14]
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fb ffd1 	bl	80023f0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800644e:	89fb      	ldrh	r3, [r7, #14]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fb ffd6 	bl	800240c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	091b      	lsrs	r3, r3, #4
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fb ffdb 	bl	8002428 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006472:	89fb      	ldrh	r3, [r7, #14]
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fb ffa8 	bl	80023d4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fb ff63 	bl	800235c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006496:	89fb      	ldrh	r3, [r7, #14]
 8006498:	09db      	lsrs	r3, r3, #7
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00e      	beq.n	80064c0 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80064a2:	89fb      	ldrh	r3, [r7, #14]
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80064ae:	2101      	movs	r1, #1
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fb ff61 	bl	8002378 <HAL_SUBGHZ_CADStatusCallback>
 80064b6:	e003      	b.n	80064c0 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fb ff5c 	bl	8002378 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80064c0:	89fb      	ldrh	r3, [r7, #14]
 80064c2:	0a5b      	lsrs	r3, r3, #9
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fb ff71 	bl	80023b4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80064d2:	89fb      	ldrh	r3, [r7, #14]
 80064d4:	0b9b      	lsrs	r3, r3, #14
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fb ffb0 	bl	8002444 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80064f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <SUBGHZSPI_Init+0x3c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006528 <SUBGHZSPI_Init+0x3c>)
 80064fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006500:	4a09      	ldr	r2, [pc, #36]	@ (8006528 <SUBGHZSPI_Init+0x3c>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8006508:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800650a:	4b07      	ldr	r3, [pc, #28]	@ (8006528 <SUBGHZSPI_Init+0x3c>)
 800650c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8006510:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006512:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <SUBGHZSPI_Init+0x3c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a04      	ldr	r2, [pc, #16]	@ (8006528 <SUBGHZSPI_Init+0x3c>)
 8006518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800651c:	6013      	str	r3, [r2, #0]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	58010000 	.word	0x58010000

0800652c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800653c:	4b23      	ldr	r3, [pc, #140]	@ (80065cc <SUBGHZSPI_Transmit+0xa0>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	0cdb      	lsrs	r3, r3, #19
 800654a:	2264      	movs	r2, #100	@ 0x64
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	609a      	str	r2, [r3, #8]
      break;
 8006562:	e008      	b.n	8006576 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800656a:	4b19      	ldr	r3, [pc, #100]	@ (80065d0 <SUBGHZSPI_Transmit+0xa4>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d1ed      	bne.n	8006552 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006576:	4b17      	ldr	r3, [pc, #92]	@ (80065d4 <SUBGHZSPI_Transmit+0xa8>)
 8006578:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	78fa      	ldrb	r2, [r7, #3]
 800657e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006580:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <SUBGHZSPI_Transmit+0xa0>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	0cdb      	lsrs	r3, r3, #19
 800658e:	2264      	movs	r2, #100	@ 0x64
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	609a      	str	r2, [r3, #8]
      break;
 80065a6:	e008      	b.n	80065ba <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80065ae:	4b08      	ldr	r3, [pc, #32]	@ (80065d0 <SUBGHZSPI_Transmit+0xa4>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d1ed      	bne.n	8006596 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80065ba:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <SUBGHZSPI_Transmit+0xa4>)
 80065bc:	68db      	ldr	r3, [r3, #12]

  return status;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000000 	.word	0x20000000
 80065d0:	58010000 	.word	0x58010000
 80065d4:	5801000c 	.word	0x5801000c

080065d8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80065e6:	4b25      	ldr	r3, [pc, #148]	@ (800667c <SUBGHZSPI_Receive+0xa4>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	0cdb      	lsrs	r3, r3, #19
 80065f4:	2264      	movs	r2, #100	@ 0x64
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	609a      	str	r2, [r3, #8]
      break;
 800660c:	e008      	b.n	8006620 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b01      	subs	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006614:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <SUBGHZSPI_Receive+0xa8>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d1ed      	bne.n	80065fc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006620:	4b18      	ldr	r3, [pc, #96]	@ (8006684 <SUBGHZSPI_Receive+0xac>)
 8006622:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	22ff      	movs	r2, #255	@ 0xff
 8006628:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800662a:	4b14      	ldr	r3, [pc, #80]	@ (800667c <SUBGHZSPI_Receive+0xa4>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	0cdb      	lsrs	r3, r3, #19
 8006638:	2264      	movs	r2, #100	@ 0x64
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d105      	bne.n	8006652 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	609a      	str	r2, [r3, #8]
      break;
 8006650:	e008      	b.n	8006664 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3b01      	subs	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <SUBGHZSPI_Receive+0xa8>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d1ed      	bne.n	8006640 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006664:	4b06      	ldr	r3, [pc, #24]	@ (8006680 <SUBGHZSPI_Receive+0xa8>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	b2da      	uxtb	r2, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	701a      	strb	r2, [r3, #0]

  return status;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000000 	.word	0x20000000
 8006680:	58010000 	.word	0x58010000
 8006684:	5801000c 	.word	0x5801000c

08006688 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	791b      	ldrb	r3, [r3, #4]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d111      	bne.n	80066bc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006698:	4b0c      	ldr	r3, [pc, #48]	@ (80066cc <SUBGHZ_CheckDeviceReady+0x44>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80066a8:	f7ff fb9a 	bl	8005de0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f9      	bne.n	80066ac <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80066b8:	f7ff fb82 	bl	8005dc0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f807 	bl	80066d0 <SUBGHZ_WaitOnBusy>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000000 	.word	0x20000000

080066d0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80066dc:	4b12      	ldr	r3, [pc, #72]	@ (8006728 <SUBGHZ_WaitOnBusy+0x58>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	0d1b      	lsrs	r3, r3, #20
 80066ea:	2264      	movs	r2, #100	@ 0x64
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80066f2:	f7ff fba3 	bl	8005e3c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80066f6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d105      	bne.n	800670a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	609a      	str	r2, [r3, #8]
      break;
 8006708:	e009      	b.n	800671e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3b01      	subs	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006710:	f7ff fb82 	bl	8005e18 <LL_PWR_IsActiveFlag_RFBUSYS>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4013      	ands	r3, r2
 800671a:	2b01      	cmp	r3, #1
 800671c:	d0e9      	beq.n	80066f2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800671e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000000 	.word	0x20000000

0800672c <LL_RCC_GetUSARTClockSource>:
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006738:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	401a      	ands	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	4313      	orrs	r3, r2
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <LL_RCC_GetLPUARTClockSource>:
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800675c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4013      	ands	r3, r2
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e042      	b.n	8006806 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa fcaa 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	@ 0x24
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb23 	bl	8006e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8ac 	bl	800691c <UART_SetConfig>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e01b      	b.n	8006806 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fba1 	bl	8006f46 <UART_CheckIdleState>
 8006804:	4603      	mov	r3, r0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b08a      	sub	sp, #40	@ 0x28
 8006812:	af02      	add	r7, sp, #8
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006824:	2b20      	cmp	r3, #32
 8006826:	d173      	bne.n	8006910 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_UART_Transmit+0x26>
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e06c      	b.n	8006912 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2221      	movs	r2, #33	@ 0x21
 8006844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006848:	f7fb fe9a 	bl	8002580 <HAL_GetTick>
 800684c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006866:	d108      	bne.n	800687a <HAL_UART_Transmit+0x6c>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e003      	b.n	8006882 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006882:	e02c      	b.n	80068de <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2200      	movs	r2, #0
 800688c:	2180      	movs	r1, #128	@ 0x80
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fba7 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e039      	b.n	8006912 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	3302      	adds	r3, #2
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	e007      	b.n	80068cc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3301      	adds	r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1cc      	bne.n	8006884 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2200      	movs	r2, #0
 80068f2:	2140      	movs	r1, #64	@ 0x40
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fb74 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e006      	b.n	8006912 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006910:	2302      	movs	r3, #2
  }
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800691c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006920:	b08c      	sub	sp, #48	@ 0x30
 8006922:	af00      	add	r7, sp, #0
 8006924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	431a      	orrs	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	431a      	orrs	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4313      	orrs	r3, r2
 8006942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b94      	ldr	r3, [pc, #592]	@ (8006b9c <UART_SetConfig+0x280>)
 800694c:	4013      	ands	r3, r2
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006954:	430b      	orrs	r3, r1
 8006956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a89      	ldr	r2, [pc, #548]	@ (8006ba0 <UART_SetConfig+0x284>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006984:	4313      	orrs	r3, r2
 8006986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006992:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800699c:	430b      	orrs	r3, r1
 800699e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a6:	f023 010f 	bic.w	r1, r3, #15
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a7a      	ldr	r2, [pc, #488]	@ (8006ba4 <UART_SetConfig+0x288>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d127      	bne.n	8006a10 <UART_SetConfig+0xf4>
 80069c0:	2003      	movs	r0, #3
 80069c2:	f7ff feb3 	bl	800672c <LL_RCC_GetUSARTClockSource>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d81b      	bhi.n	8006a08 <UART_SetConfig+0xec>
 80069d0:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0xbc>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e080      	b.n	8006af2 <UART_SetConfig+0x1d6>
 80069f0:	2302      	movs	r3, #2
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e07c      	b.n	8006af2 <UART_SetConfig+0x1d6>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e078      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e074      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0e:	e070      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a64      	ldr	r2, [pc, #400]	@ (8006ba8 <UART_SetConfig+0x28c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d138      	bne.n	8006a8c <UART_SetConfig+0x170>
 8006a1a:	200c      	movs	r0, #12
 8006a1c:	f7ff fe86 	bl	800672c <LL_RCC_GetUSARTClockSource>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d82c      	bhi.n	8006a84 <UART_SetConfig+0x168>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0x114>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a65 	.word	0x08006a65
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a85 	.word	0x08006a85
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a75 	.word	0x08006a75
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a85 	.word	0x08006a85
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a7d 	.word	0x08006a7d
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e042      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e03e      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	e03a      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e036      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8a:	e032      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a43      	ldr	r2, [pc, #268]	@ (8006ba0 <UART_SetConfig+0x284>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d12a      	bne.n	8006aec <UART_SetConfig+0x1d0>
 8006a96:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006a9a:	f7ff fe59 	bl	8006750 <LL_RCC_GetLPUARTClockSource>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006aa4:	d01a      	beq.n	8006adc <UART_SetConfig+0x1c0>
 8006aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006aaa:	d81b      	bhi.n	8006ae4 <UART_SetConfig+0x1c8>
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab0:	d00c      	beq.n	8006acc <UART_SetConfig+0x1b0>
 8006ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab6:	d815      	bhi.n	8006ae4 <UART_SetConfig+0x1c8>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <UART_SetConfig+0x1a8>
 8006abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac0:	d008      	beq.n	8006ad4 <UART_SetConfig+0x1b8>
 8006ac2:	e00f      	b.n	8006ae4 <UART_SetConfig+0x1c8>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e012      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006acc:	2302      	movs	r3, #2
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e00e      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e00a      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006adc:	2308      	movs	r3, #8
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e006      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e002      	b.n	8006af2 <UART_SetConfig+0x1d6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2a      	ldr	r2, [pc, #168]	@ (8006ba0 <UART_SetConfig+0x284>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	f040 80a4 	bne.w	8006c46 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d823      	bhi.n	8006b4e <UART_SetConfig+0x232>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <UART_SetConfig+0x1f0>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b4f 	.word	0x08006b4f
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b4f 	.word	0x08006b4f
 8006b1c:	08006b3f 	.word	0x08006b3f
 8006b20:	08006b4f 	.word	0x08006b4f
 8006b24:	08006b4f 	.word	0x08006b4f
 8006b28:	08006b4f 	.word	0x08006b4f
 8006b2c:	08006b47 	.word	0x08006b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b30:	f7fe fe4e 	bl	80057d0 <HAL_RCC_GetPCLK1Freq>
 8006b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b36:	e010      	b.n	8006b5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b38:	4b1c      	ldr	r3, [pc, #112]	@ (8006bac <UART_SetConfig+0x290>)
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b3c:	e00d      	b.n	8006b5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3e:	f7fe fd93 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8006b42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b44:	e009      	b.n	8006b5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b4c:	e005      	b.n	8006b5a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8137 	beq.w	8006dd0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b66:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <UART_SetConfig+0x294>)
 8006b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d305      	bcc.n	8006b92 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d910      	bls.n	8006bb4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b98:	e11a      	b.n	8006dd0 <UART_SetConfig+0x4b4>
 8006b9a:	bf00      	nop
 8006b9c:	cfff69f3 	.word	0xcfff69f3
 8006ba0:	40008000 	.word	0x40008000
 8006ba4:	40013800 	.word	0x40013800
 8006ba8:	40004400 	.word	0x40004400
 8006bac:	00f42400 	.word	0x00f42400
 8006bb0:	08008484 	.word	0x08008484
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	60fa      	str	r2, [r7, #12]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8006dfc <UART_SetConfig+0x4e0>)
 8006bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2200      	movs	r2, #0
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bd6:	f7f9 fb23 	bl	8000220 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	020b      	lsls	r3, r1, #8
 8006bec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bf0:	0202      	lsls	r2, r0, #8
 8006bf2:	6979      	ldr	r1, [r7, #20]
 8006bf4:	6849      	ldr	r1, [r1, #4]
 8006bf6:	0849      	lsrs	r1, r1, #1
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	eb12 0804 	adds.w	r8, r2, r4
 8006c02:	eb43 0905 	adc.w	r9, r3, r5
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	469a      	mov	sl, r3
 8006c0e:	4693      	mov	fp, r2
 8006c10:	4652      	mov	r2, sl
 8006c12:	465b      	mov	r3, fp
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 fb02 	bl	8000220 <__aeabi_uldivmod>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4613      	mov	r3, r2
 8006c22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c2a:	d308      	bcc.n	8006c3e <UART_SetConfig+0x322>
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c32:	d204      	bcs.n	8006c3e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a3a      	ldr	r2, [r7, #32]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e0c8      	b.n	8006dd0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c44:	e0c4      	b.n	8006dd0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4e:	d167      	bne.n	8006d20 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d828      	bhi.n	8006caa <UART_SetConfig+0x38e>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <UART_SetConfig+0x344>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006c95 	.word	0x08006c95
 8006c6c:	08006cab 	.word	0x08006cab
 8006c70:	08006c9b 	.word	0x08006c9b
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006cab 	.word	0x08006cab
 8006c7c:	08006cab 	.word	0x08006cab
 8006c80:	08006ca3 	.word	0x08006ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c84:	f7fe fda4 	bl	80057d0 <HAL_RCC_GetPCLK1Freq>
 8006c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c8a:	e014      	b.n	8006cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c8c:	f7fe fdb2 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8006c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c92:	e010      	b.n	8006cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c94:	4b5a      	ldr	r3, [pc, #360]	@ (8006e00 <UART_SetConfig+0x4e4>)
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c98:	e00d      	b.n	8006cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9a:	f7fe fce5 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8006c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ca0:	e009      	b.n	8006cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ca8:	e005      	b.n	8006cb6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8089 	beq.w	8006dd0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8006dfc <UART_SetConfig+0x4e0>)
 8006cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd0:	005a      	lsls	r2, r3, #1
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	441a      	add	r2, r3
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	d916      	bls.n	8006d18 <UART_SetConfig+0x3fc>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cf0:	d212      	bcs.n	8006d18 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f023 030f 	bic.w	r3, r3, #15
 8006cfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	8bfb      	ldrh	r3, [r7, #30]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	8bfa      	ldrh	r2, [r7, #30]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	e05b      	b.n	8006dd0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d1e:	e057      	b.n	8006dd0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d828      	bhi.n	8006d7a <UART_SetConfig+0x45e>
 8006d28:	a201      	add	r2, pc, #4	@ (adr r2, 8006d30 <UART_SetConfig+0x414>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d55 	.word	0x08006d55
 8006d34:	08006d5d 	.word	0x08006d5d
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	08006d7b 	.word	0x08006d7b
 8006d40:	08006d6b 	.word	0x08006d6b
 8006d44:	08006d7b 	.word	0x08006d7b
 8006d48:	08006d7b 	.word	0x08006d7b
 8006d4c:	08006d7b 	.word	0x08006d7b
 8006d50:	08006d73 	.word	0x08006d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d54:	f7fe fd3c 	bl	80057d0 <HAL_RCC_GetPCLK1Freq>
 8006d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d5a:	e014      	b.n	8006d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d5c:	f7fe fd4a 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8006d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d62:	e010      	b.n	8006d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d64:	4b26      	ldr	r3, [pc, #152]	@ (8006e00 <UART_SetConfig+0x4e4>)
 8006d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d68:	e00d      	b.n	8006d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d6a:	f7fe fc7d 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8006d6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d70:	e009      	b.n	8006d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d78:	e005      	b.n	8006d86 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d84:	bf00      	nop
    }

    if (pclk != 0U)
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d021      	beq.n	8006dd0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	4a1a      	ldr	r2, [pc, #104]	@ (8006dfc <UART_SetConfig+0x4e0>)
 8006d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	441a      	add	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	2b0f      	cmp	r3, #15
 8006db4:	d909      	bls.n	8006dca <UART_SetConfig+0x4ae>
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dbc:	d205      	bcs.n	8006dca <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60da      	str	r2, [r3, #12]
 8006dc8:	e002      	b.n	8006dd0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2200      	movs	r2, #0
 8006de4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2200      	movs	r2, #0
 8006dea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006dec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3730      	adds	r7, #48	@ 0x30
 8006df4:	46bd      	mov	sp, r7
 8006df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08008484 	.word	0x08008484
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01a      	beq.n	8006f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f02:	d10a      	bne.n	8006f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b086      	sub	sp, #24
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f56:	f7fb fb13 	bl	8002580 <HAL_GetTick>
 8006f5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d10e      	bne.n	8006f88 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f832 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e028      	b.n	8006fda <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d10e      	bne.n	8006fb4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f81c 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e012      	b.n	8006fda <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b09c      	sub	sp, #112	@ 0x70
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	e0af      	b.n	8007154 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ffa:	f000 80ab 	beq.w	8007154 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ffe:	f7fb fabf 	bl	8002580 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800700a:	429a      	cmp	r2, r3
 800700c:	d302      	bcc.n	8007014 <UART_WaitOnFlagUntilTimeout+0x32>
 800700e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007010:	2b00      	cmp	r3, #0
 8007012:	d140      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007024:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007028:	667b      	str	r3, [r7, #100]	@ 0x64
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007034:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007038:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e6      	bne.n	8007014 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	663b      	str	r3, [r7, #96]	@ 0x60
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007066:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007068:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800706c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e06f      	b.n	8007176 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d057      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x172>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b80      	cmp	r3, #128	@ 0x80
 80070a8:	d054      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x172>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	d051      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070be:	d149      	bne.n	8007154 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80070de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	613b      	str	r3, [r7, #16]
   return(result);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800711c:	623a      	str	r2, [r7, #32]
 800711e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	69f9      	ldr	r1, [r7, #28]
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	61bb      	str	r3, [r7, #24]
   return(result);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e5      	bne.n	80070fc <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e010      	b.n	8007176 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	429a      	cmp	r2, r3
 8007170:	f43f af40 	beq.w	8006ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3770      	adds	r7, #112	@ 0x70
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_UARTEx_DisableFifoMode+0x16>
 8007190:	2302      	movs	r3, #2
 8007192:	e027      	b.n	80071e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2224      	movs	r2, #36	@ 0x24
 80071a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007202:	2302      	movs	r3, #2
 8007204:	e02d      	b.n	8007262 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2224      	movs	r2, #36	@ 0x24
 8007212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0201 	bic.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f850 	bl	80072e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800727e:	2302      	movs	r3, #2
 8007280:	e02d      	b.n	80072de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2224      	movs	r2, #36	@ 0x24
 800728e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f812 	bl	80072e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007308:	e031      	b.n	800736e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800730a:	2308      	movs	r3, #8
 800730c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800730e:	2308      	movs	r3, #8
 8007310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	0e5b      	lsrs	r3, r3, #25
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	0f5b      	lsrs	r3, r3, #29
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	7b3a      	ldrb	r2, [r7, #12]
 8007336:	4910      	ldr	r1, [pc, #64]	@ (8007378 <UARTEx_SetNbDataToProcess+0x90>)
 8007338:	5c8a      	ldrb	r2, [r1, r2]
 800733a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800733e:	7b3a      	ldrb	r2, [r7, #12]
 8007340:	490e      	ldr	r1, [pc, #56]	@ (800737c <UARTEx_SetNbDataToProcess+0x94>)
 8007342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007344:	fb93 f3f2 	sdiv	r3, r3, r2
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	7b7a      	ldrb	r2, [r7, #13]
 8007354:	4908      	ldr	r1, [pc, #32]	@ (8007378 <UARTEx_SetNbDataToProcess+0x90>)
 8007356:	5c8a      	ldrb	r2, [r1, r2]
 8007358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800735c:	7b7a      	ldrb	r2, [r7, #13]
 800735e:	4907      	ldr	r1, [pc, #28]	@ (800737c <UARTEx_SetNbDataToProcess+0x94>)
 8007360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007362:	fb93 f3f2 	sdiv	r3, r3, r2
 8007366:	b29a      	uxth	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	0800849c 	.word	0x0800849c
 800737c:	080084a4 	.word	0x080084a4

08007380 <random>:
 8007380:	4b16      	ldr	r3, [pc, #88]	@ (80073dc <random+0x5c>)
 8007382:	b510      	push	{r4, lr}
 8007384:	681c      	ldr	r4, [r3, #0]
 8007386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007388:	b9b3      	cbnz	r3, 80073b8 <random+0x38>
 800738a:	2018      	movs	r0, #24
 800738c:	f000 fa32 	bl	80077f4 <malloc>
 8007390:	4602      	mov	r2, r0
 8007392:	6320      	str	r0, [r4, #48]	@ 0x30
 8007394:	b920      	cbnz	r0, 80073a0 <random+0x20>
 8007396:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <random+0x60>)
 8007398:	4812      	ldr	r0, [pc, #72]	@ (80073e4 <random+0x64>)
 800739a:	214c      	movs	r1, #76	@ 0x4c
 800739c:	f000 f9c2 	bl	8007724 <__assert_func>
 80073a0:	4911      	ldr	r1, [pc, #68]	@ (80073e8 <random+0x68>)
 80073a2:	4b12      	ldr	r3, [pc, #72]	@ (80073ec <random+0x6c>)
 80073a4:	e9c0 1300 	strd	r1, r3, [r0]
 80073a8:	4b11      	ldr	r3, [pc, #68]	@ (80073f0 <random+0x70>)
 80073aa:	6083      	str	r3, [r0, #8]
 80073ac:	230b      	movs	r3, #11
 80073ae:	8183      	strh	r3, [r0, #12]
 80073b0:	2100      	movs	r1, #0
 80073b2:	2001      	movs	r0, #1
 80073b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80073b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80073ba:	480e      	ldr	r0, [pc, #56]	@ (80073f4 <random+0x74>)
 80073bc:	690b      	ldr	r3, [r1, #16]
 80073be:	694c      	ldr	r4, [r1, #20]
 80073c0:	4a0d      	ldr	r2, [pc, #52]	@ (80073f8 <random+0x78>)
 80073c2:	4358      	muls	r0, r3
 80073c4:	fb02 0004 	mla	r0, r2, r4, r0
 80073c8:	fba3 3202 	umull	r3, r2, r3, r2
 80073cc:	3301      	adds	r3, #1
 80073ce:	eb40 0002 	adc.w	r0, r0, r2
 80073d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80073d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	20000048 	.word	0x20000048
 80073e0:	080084ac 	.word	0x080084ac
 80073e4:	080084c3 	.word	0x080084c3
 80073e8:	abcd330e 	.word	0xabcd330e
 80073ec:	e66d1234 	.word	0xe66d1234
 80073f0:	0005deec 	.word	0x0005deec
 80073f4:	5851f42d 	.word	0x5851f42d
 80073f8:	4c957f2d 	.word	0x4c957f2d

080073fc <std>:
 80073fc:	2300      	movs	r3, #0
 80073fe:	b510      	push	{r4, lr}
 8007400:	4604      	mov	r4, r0
 8007402:	e9c0 3300 	strd	r3, r3, [r0]
 8007406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800740a:	6083      	str	r3, [r0, #8]
 800740c:	8181      	strh	r1, [r0, #12]
 800740e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007410:	81c2      	strh	r2, [r0, #14]
 8007412:	6183      	str	r3, [r0, #24]
 8007414:	4619      	mov	r1, r3
 8007416:	2208      	movs	r2, #8
 8007418:	305c      	adds	r0, #92	@ 0x5c
 800741a:	f000 f906 	bl	800762a <memset>
 800741e:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <std+0x58>)
 8007420:	6263      	str	r3, [r4, #36]	@ 0x24
 8007422:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <std+0x5c>)
 8007424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <std+0x60>)
 8007428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <std+0x64>)
 800742c:	6323      	str	r3, [r4, #48]	@ 0x30
 800742e:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <std+0x68>)
 8007430:	6224      	str	r4, [r4, #32]
 8007432:	429c      	cmp	r4, r3
 8007434:	d006      	beq.n	8007444 <std+0x48>
 8007436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800743a:	4294      	cmp	r4, r2
 800743c:	d002      	beq.n	8007444 <std+0x48>
 800743e:	33d0      	adds	r3, #208	@ 0xd0
 8007440:	429c      	cmp	r4, r3
 8007442:	d105      	bne.n	8007450 <std+0x54>
 8007444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744c:	f000 b966 	b.w	800771c <__retarget_lock_init_recursive>
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	080075a5 	.word	0x080075a5
 8007458:	080075c7 	.word	0x080075c7
 800745c:	080075ff 	.word	0x080075ff
 8007460:	08007623 	.word	0x08007623
 8007464:	200001f0 	.word	0x200001f0

08007468 <stdio_exit_handler>:
 8007468:	4a02      	ldr	r2, [pc, #8]	@ (8007474 <stdio_exit_handler+0xc>)
 800746a:	4903      	ldr	r1, [pc, #12]	@ (8007478 <stdio_exit_handler+0x10>)
 800746c:	4803      	ldr	r0, [pc, #12]	@ (800747c <stdio_exit_handler+0x14>)
 800746e:	f000 b869 	b.w	8007544 <_fwalk_sglue>
 8007472:	bf00      	nop
 8007474:	2000003c 	.word	0x2000003c
 8007478:	08007ff9 	.word	0x08007ff9
 800747c:	2000004c 	.word	0x2000004c

08007480 <cleanup_stdio>:
 8007480:	6841      	ldr	r1, [r0, #4]
 8007482:	4b0c      	ldr	r3, [pc, #48]	@ (80074b4 <cleanup_stdio+0x34>)
 8007484:	4299      	cmp	r1, r3
 8007486:	b510      	push	{r4, lr}
 8007488:	4604      	mov	r4, r0
 800748a:	d001      	beq.n	8007490 <cleanup_stdio+0x10>
 800748c:	f000 fdb4 	bl	8007ff8 <_fflush_r>
 8007490:	68a1      	ldr	r1, [r4, #8]
 8007492:	4b09      	ldr	r3, [pc, #36]	@ (80074b8 <cleanup_stdio+0x38>)
 8007494:	4299      	cmp	r1, r3
 8007496:	d002      	beq.n	800749e <cleanup_stdio+0x1e>
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fdad 	bl	8007ff8 <_fflush_r>
 800749e:	68e1      	ldr	r1, [r4, #12]
 80074a0:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <cleanup_stdio+0x3c>)
 80074a2:	4299      	cmp	r1, r3
 80074a4:	d004      	beq.n	80074b0 <cleanup_stdio+0x30>
 80074a6:	4620      	mov	r0, r4
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	f000 bda4 	b.w	8007ff8 <_fflush_r>
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	bf00      	nop
 80074b4:	200001f0 	.word	0x200001f0
 80074b8:	20000258 	.word	0x20000258
 80074bc:	200002c0 	.word	0x200002c0

080074c0 <global_stdio_init.part.0>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <global_stdio_init.part.0+0x30>)
 80074c4:	4c0b      	ldr	r4, [pc, #44]	@ (80074f4 <global_stdio_init.part.0+0x34>)
 80074c6:	4a0c      	ldr	r2, [pc, #48]	@ (80074f8 <global_stdio_init.part.0+0x38>)
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	4620      	mov	r0, r4
 80074cc:	2200      	movs	r2, #0
 80074ce:	2104      	movs	r1, #4
 80074d0:	f7ff ff94 	bl	80073fc <std>
 80074d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074d8:	2201      	movs	r2, #1
 80074da:	2109      	movs	r1, #9
 80074dc:	f7ff ff8e 	bl	80073fc <std>
 80074e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074e4:	2202      	movs	r2, #2
 80074e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ea:	2112      	movs	r1, #18
 80074ec:	f7ff bf86 	b.w	80073fc <std>
 80074f0:	20000328 	.word	0x20000328
 80074f4:	200001f0 	.word	0x200001f0
 80074f8:	08007469 	.word	0x08007469

080074fc <__sfp_lock_acquire>:
 80074fc:	4801      	ldr	r0, [pc, #4]	@ (8007504 <__sfp_lock_acquire+0x8>)
 80074fe:	f000 b90e 	b.w	800771e <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	20000331 	.word	0x20000331

08007508 <__sfp_lock_release>:
 8007508:	4801      	ldr	r0, [pc, #4]	@ (8007510 <__sfp_lock_release+0x8>)
 800750a:	f000 b909 	b.w	8007720 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	20000331 	.word	0x20000331

08007514 <__sinit>:
 8007514:	b510      	push	{r4, lr}
 8007516:	4604      	mov	r4, r0
 8007518:	f7ff fff0 	bl	80074fc <__sfp_lock_acquire>
 800751c:	6a23      	ldr	r3, [r4, #32]
 800751e:	b11b      	cbz	r3, 8007528 <__sinit+0x14>
 8007520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007524:	f7ff bff0 	b.w	8007508 <__sfp_lock_release>
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <__sinit+0x28>)
 800752a:	6223      	str	r3, [r4, #32]
 800752c:	4b04      	ldr	r3, [pc, #16]	@ (8007540 <__sinit+0x2c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f5      	bne.n	8007520 <__sinit+0xc>
 8007534:	f7ff ffc4 	bl	80074c0 <global_stdio_init.part.0>
 8007538:	e7f2      	b.n	8007520 <__sinit+0xc>
 800753a:	bf00      	nop
 800753c:	08007481 	.word	0x08007481
 8007540:	20000328 	.word	0x20000328

08007544 <_fwalk_sglue>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	4607      	mov	r7, r0
 800754a:	4688      	mov	r8, r1
 800754c:	4614      	mov	r4, r2
 800754e:	2600      	movs	r6, #0
 8007550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007554:	f1b9 0901 	subs.w	r9, r9, #1
 8007558:	d505      	bpl.n	8007566 <_fwalk_sglue+0x22>
 800755a:	6824      	ldr	r4, [r4, #0]
 800755c:	2c00      	cmp	r4, #0
 800755e:	d1f7      	bne.n	8007550 <_fwalk_sglue+0xc>
 8007560:	4630      	mov	r0, r6
 8007562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007566:	89ab      	ldrh	r3, [r5, #12]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d907      	bls.n	800757c <_fwalk_sglue+0x38>
 800756c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007570:	3301      	adds	r3, #1
 8007572:	d003      	beq.n	800757c <_fwalk_sglue+0x38>
 8007574:	4629      	mov	r1, r5
 8007576:	4638      	mov	r0, r7
 8007578:	47c0      	blx	r8
 800757a:	4306      	orrs	r6, r0
 800757c:	3568      	adds	r5, #104	@ 0x68
 800757e:	e7e9      	b.n	8007554 <_fwalk_sglue+0x10>

08007580 <iprintf>:
 8007580:	b40f      	push	{r0, r1, r2, r3}
 8007582:	b507      	push	{r0, r1, r2, lr}
 8007584:	4906      	ldr	r1, [pc, #24]	@ (80075a0 <iprintf+0x20>)
 8007586:	ab04      	add	r3, sp, #16
 8007588:	6808      	ldr	r0, [r1, #0]
 800758a:	f853 2b04 	ldr.w	r2, [r3], #4
 800758e:	6881      	ldr	r1, [r0, #8]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	f000 fa0d 	bl	80079b0 <_vfiprintf_r>
 8007596:	b003      	add	sp, #12
 8007598:	f85d eb04 	ldr.w	lr, [sp], #4
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr
 80075a0:	20000048 	.word	0x20000048

080075a4 <__sread>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	460c      	mov	r4, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	f000 f868 	bl	8007680 <_read_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	bfab      	itete	ge
 80075b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075b6:	89a3      	ldrhlt	r3, [r4, #12]
 80075b8:	181b      	addge	r3, r3, r0
 80075ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075be:	bfac      	ite	ge
 80075c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075c2:	81a3      	strhlt	r3, [r4, #12]
 80075c4:	bd10      	pop	{r4, pc}

080075c6 <__swrite>:
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	461f      	mov	r7, r3
 80075cc:	898b      	ldrh	r3, [r1, #12]
 80075ce:	05db      	lsls	r3, r3, #23
 80075d0:	4605      	mov	r5, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	4616      	mov	r6, r2
 80075d6:	d505      	bpl.n	80075e4 <__swrite+0x1e>
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2302      	movs	r3, #2
 80075de:	2200      	movs	r2, #0
 80075e0:	f000 f83c 	bl	800765c <_lseek_r>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	f000 b853 	b.w	80076a4 <_write_r>

080075fe <__sseek>:
 80075fe:	b510      	push	{r4, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007606:	f000 f829 	bl	800765c <_lseek_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	bf15      	itete	ne
 8007610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800761a:	81a3      	strheq	r3, [r4, #12]
 800761c:	bf18      	it	ne
 800761e:	81a3      	strhne	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__sclose>:
 8007622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007626:	f000 b809 	b.w	800763c <_close_r>

0800762a <memset>:
 800762a:	4402      	add	r2, r0
 800762c:	4603      	mov	r3, r0
 800762e:	4293      	cmp	r3, r2
 8007630:	d100      	bne.n	8007634 <memset+0xa>
 8007632:	4770      	bx	lr
 8007634:	f803 1b01 	strb.w	r1, [r3], #1
 8007638:	e7f9      	b.n	800762e <memset+0x4>
	...

0800763c <_close_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d06      	ldr	r5, [pc, #24]	@ (8007658 <_close_r+0x1c>)
 8007640:	2300      	movs	r3, #0
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	f7f9 fc68 	bl	8000f1c <_close>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_close_r+0x1a>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_close_r+0x1a>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	2000032c 	.word	0x2000032c

0800765c <_lseek_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d07      	ldr	r5, [pc, #28]	@ (800767c <_lseek_r+0x20>)
 8007660:	4604      	mov	r4, r0
 8007662:	4608      	mov	r0, r1
 8007664:	4611      	mov	r1, r2
 8007666:	2200      	movs	r2, #0
 8007668:	602a      	str	r2, [r5, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	f7f9 fc7a 	bl	8000f64 <_lseek>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_lseek_r+0x1e>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_lseek_r+0x1e>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	2000032c 	.word	0x2000032c

08007680 <_read_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4d07      	ldr	r5, [pc, #28]	@ (80076a0 <_read_r+0x20>)
 8007684:	4604      	mov	r4, r0
 8007686:	4608      	mov	r0, r1
 8007688:	4611      	mov	r1, r2
 800768a:	2200      	movs	r2, #0
 800768c:	602a      	str	r2, [r5, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f7f9 fc27 	bl	8000ee2 <_read>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_read_r+0x1e>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_read_r+0x1e>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	2000032c 	.word	0x2000032c

080076a4 <_write_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d07      	ldr	r5, [pc, #28]	@ (80076c4 <_write_r+0x20>)
 80076a8:	4604      	mov	r4, r0
 80076aa:	4608      	mov	r0, r1
 80076ac:	4611      	mov	r1, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	602a      	str	r2, [r5, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f7f9 face 	bl	8000c54 <_write>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_write_r+0x1e>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_write_r+0x1e>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	2000032c 	.word	0x2000032c

080076c8 <__errno>:
 80076c8:	4b01      	ldr	r3, [pc, #4]	@ (80076d0 <__errno+0x8>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000048 	.word	0x20000048

080076d4 <__libc_init_array>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4d0d      	ldr	r5, [pc, #52]	@ (800770c <__libc_init_array+0x38>)
 80076d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007710 <__libc_init_array+0x3c>)
 80076da:	1b64      	subs	r4, r4, r5
 80076dc:	10a4      	asrs	r4, r4, #2
 80076de:	2600      	movs	r6, #0
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	d109      	bne.n	80076f8 <__libc_init_array+0x24>
 80076e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007714 <__libc_init_array+0x40>)
 80076e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007718 <__libc_init_array+0x44>)
 80076e8:	f000 fe34 	bl	8008354 <_init>
 80076ec:	1b64      	subs	r4, r4, r5
 80076ee:	10a4      	asrs	r4, r4, #2
 80076f0:	2600      	movs	r6, #0
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d105      	bne.n	8007702 <__libc_init_array+0x2e>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fc:	4798      	blx	r3
 80076fe:	3601      	adds	r6, #1
 8007700:	e7ee      	b.n	80076e0 <__libc_init_array+0xc>
 8007702:	f855 3b04 	ldr.w	r3, [r5], #4
 8007706:	4798      	blx	r3
 8007708:	3601      	adds	r6, #1
 800770a:	e7f2      	b.n	80076f2 <__libc_init_array+0x1e>
 800770c:	08008594 	.word	0x08008594
 8007710:	08008594 	.word	0x08008594
 8007714:	08008594 	.word	0x08008594
 8007718:	08008598 	.word	0x08008598

0800771c <__retarget_lock_init_recursive>:
 800771c:	4770      	bx	lr

0800771e <__retarget_lock_acquire_recursive>:
 800771e:	4770      	bx	lr

08007720 <__retarget_lock_release_recursive>:
 8007720:	4770      	bx	lr
	...

08007724 <__assert_func>:
 8007724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007726:	4614      	mov	r4, r2
 8007728:	461a      	mov	r2, r3
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <__assert_func+0x2c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4605      	mov	r5, r0
 8007730:	68d8      	ldr	r0, [r3, #12]
 8007732:	b14c      	cbz	r4, 8007748 <__assert_func+0x24>
 8007734:	4b07      	ldr	r3, [pc, #28]	@ (8007754 <__assert_func+0x30>)
 8007736:	9100      	str	r1, [sp, #0]
 8007738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800773c:	4906      	ldr	r1, [pc, #24]	@ (8007758 <__assert_func+0x34>)
 800773e:	462b      	mov	r3, r5
 8007740:	f000 fc82 	bl	8008048 <fiprintf>
 8007744:	f000 fd36 	bl	80081b4 <abort>
 8007748:	4b04      	ldr	r3, [pc, #16]	@ (800775c <__assert_func+0x38>)
 800774a:	461c      	mov	r4, r3
 800774c:	e7f3      	b.n	8007736 <__assert_func+0x12>
 800774e:	bf00      	nop
 8007750:	20000048 	.word	0x20000048
 8007754:	0800851d 	.word	0x0800851d
 8007758:	0800852a 	.word	0x0800852a
 800775c:	08008558 	.word	0x08008558

08007760 <_free_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4605      	mov	r5, r0
 8007764:	2900      	cmp	r1, #0
 8007766:	d041      	beq.n	80077ec <_free_r+0x8c>
 8007768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776c:	1f0c      	subs	r4, r1, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	bfb8      	it	lt
 8007772:	18e4      	addlt	r4, r4, r3
 8007774:	f000 f8e8 	bl	8007948 <__malloc_lock>
 8007778:	4a1d      	ldr	r2, [pc, #116]	@ (80077f0 <_free_r+0x90>)
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	b933      	cbnz	r3, 800778c <_free_r+0x2c>
 800777e:	6063      	str	r3, [r4, #4]
 8007780:	6014      	str	r4, [r2, #0]
 8007782:	4628      	mov	r0, r5
 8007784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007788:	f000 b8e4 	b.w	8007954 <__malloc_unlock>
 800778c:	42a3      	cmp	r3, r4
 800778e:	d908      	bls.n	80077a2 <_free_r+0x42>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	1821      	adds	r1, r4, r0
 8007794:	428b      	cmp	r3, r1
 8007796:	bf01      	itttt	eq
 8007798:	6819      	ldreq	r1, [r3, #0]
 800779a:	685b      	ldreq	r3, [r3, #4]
 800779c:	1809      	addeq	r1, r1, r0
 800779e:	6021      	streq	r1, [r4, #0]
 80077a0:	e7ed      	b.n	800777e <_free_r+0x1e>
 80077a2:	461a      	mov	r2, r3
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b10b      	cbz	r3, 80077ac <_free_r+0x4c>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d9fa      	bls.n	80077a2 <_free_r+0x42>
 80077ac:	6811      	ldr	r1, [r2, #0]
 80077ae:	1850      	adds	r0, r2, r1
 80077b0:	42a0      	cmp	r0, r4
 80077b2:	d10b      	bne.n	80077cc <_free_r+0x6c>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	4401      	add	r1, r0
 80077b8:	1850      	adds	r0, r2, r1
 80077ba:	4283      	cmp	r3, r0
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	d1e0      	bne.n	8007782 <_free_r+0x22>
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	6053      	str	r3, [r2, #4]
 80077c6:	4408      	add	r0, r1
 80077c8:	6010      	str	r0, [r2, #0]
 80077ca:	e7da      	b.n	8007782 <_free_r+0x22>
 80077cc:	d902      	bls.n	80077d4 <_free_r+0x74>
 80077ce:	230c      	movs	r3, #12
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	e7d6      	b.n	8007782 <_free_r+0x22>
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	1821      	adds	r1, r4, r0
 80077d8:	428b      	cmp	r3, r1
 80077da:	bf04      	itt	eq
 80077dc:	6819      	ldreq	r1, [r3, #0]
 80077de:	685b      	ldreq	r3, [r3, #4]
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	bf04      	itt	eq
 80077e4:	1809      	addeq	r1, r1, r0
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	6054      	str	r4, [r2, #4]
 80077ea:	e7ca      	b.n	8007782 <_free_r+0x22>
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	20000338 	.word	0x20000338

080077f4 <malloc>:
 80077f4:	4b02      	ldr	r3, [pc, #8]	@ (8007800 <malloc+0xc>)
 80077f6:	4601      	mov	r1, r0
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f000 b825 	b.w	8007848 <_malloc_r>
 80077fe:	bf00      	nop
 8007800:	20000048 	.word	0x20000048

08007804 <sbrk_aligned>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4e0f      	ldr	r6, [pc, #60]	@ (8007844 <sbrk_aligned+0x40>)
 8007808:	460c      	mov	r4, r1
 800780a:	6831      	ldr	r1, [r6, #0]
 800780c:	4605      	mov	r5, r0
 800780e:	b911      	cbnz	r1, 8007816 <sbrk_aligned+0x12>
 8007810:	f000 fcc0 	bl	8008194 <_sbrk_r>
 8007814:	6030      	str	r0, [r6, #0]
 8007816:	4621      	mov	r1, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f000 fcbb 	bl	8008194 <_sbrk_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d103      	bne.n	800782a <sbrk_aligned+0x26>
 8007822:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007826:	4620      	mov	r0, r4
 8007828:	bd70      	pop	{r4, r5, r6, pc}
 800782a:	1cc4      	adds	r4, r0, #3
 800782c:	f024 0403 	bic.w	r4, r4, #3
 8007830:	42a0      	cmp	r0, r4
 8007832:	d0f8      	beq.n	8007826 <sbrk_aligned+0x22>
 8007834:	1a21      	subs	r1, r4, r0
 8007836:	4628      	mov	r0, r5
 8007838:	f000 fcac 	bl	8008194 <_sbrk_r>
 800783c:	3001      	adds	r0, #1
 800783e:	d1f2      	bne.n	8007826 <sbrk_aligned+0x22>
 8007840:	e7ef      	b.n	8007822 <sbrk_aligned+0x1e>
 8007842:	bf00      	nop
 8007844:	20000334 	.word	0x20000334

08007848 <_malloc_r>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	1ccd      	adds	r5, r1, #3
 800784e:	f025 0503 	bic.w	r5, r5, #3
 8007852:	3508      	adds	r5, #8
 8007854:	2d0c      	cmp	r5, #12
 8007856:	bf38      	it	cc
 8007858:	250c      	movcc	r5, #12
 800785a:	2d00      	cmp	r5, #0
 800785c:	4606      	mov	r6, r0
 800785e:	db01      	blt.n	8007864 <_malloc_r+0x1c>
 8007860:	42a9      	cmp	r1, r5
 8007862:	d904      	bls.n	800786e <_malloc_r+0x26>
 8007864:	230c      	movs	r3, #12
 8007866:	6033      	str	r3, [r6, #0]
 8007868:	2000      	movs	r0, #0
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007944 <_malloc_r+0xfc>
 8007872:	f000 f869 	bl	8007948 <__malloc_lock>
 8007876:	f8d8 3000 	ldr.w	r3, [r8]
 800787a:	461c      	mov	r4, r3
 800787c:	bb44      	cbnz	r4, 80078d0 <_malloc_r+0x88>
 800787e:	4629      	mov	r1, r5
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffbf 	bl	8007804 <sbrk_aligned>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	4604      	mov	r4, r0
 800788a:	d158      	bne.n	800793e <_malloc_r+0xf6>
 800788c:	f8d8 4000 	ldr.w	r4, [r8]
 8007890:	4627      	mov	r7, r4
 8007892:	2f00      	cmp	r7, #0
 8007894:	d143      	bne.n	800791e <_malloc_r+0xd6>
 8007896:	2c00      	cmp	r4, #0
 8007898:	d04b      	beq.n	8007932 <_malloc_r+0xea>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	4639      	mov	r1, r7
 800789e:	4630      	mov	r0, r6
 80078a0:	eb04 0903 	add.w	r9, r4, r3
 80078a4:	f000 fc76 	bl	8008194 <_sbrk_r>
 80078a8:	4581      	cmp	r9, r0
 80078aa:	d142      	bne.n	8007932 <_malloc_r+0xea>
 80078ac:	6821      	ldr	r1, [r4, #0]
 80078ae:	1a6d      	subs	r5, r5, r1
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff ffa6 	bl	8007804 <sbrk_aligned>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d03a      	beq.n	8007932 <_malloc_r+0xea>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	442b      	add	r3, r5
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	f8d8 3000 	ldr.w	r3, [r8]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	bb62      	cbnz	r2, 8007924 <_malloc_r+0xdc>
 80078ca:	f8c8 7000 	str.w	r7, [r8]
 80078ce:	e00f      	b.n	80078f0 <_malloc_r+0xa8>
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	1b52      	subs	r2, r2, r5
 80078d4:	d420      	bmi.n	8007918 <_malloc_r+0xd0>
 80078d6:	2a0b      	cmp	r2, #11
 80078d8:	d917      	bls.n	800790a <_malloc_r+0xc2>
 80078da:	1961      	adds	r1, r4, r5
 80078dc:	42a3      	cmp	r3, r4
 80078de:	6025      	str	r5, [r4, #0]
 80078e0:	bf18      	it	ne
 80078e2:	6059      	strne	r1, [r3, #4]
 80078e4:	6863      	ldr	r3, [r4, #4]
 80078e6:	bf08      	it	eq
 80078e8:	f8c8 1000 	streq.w	r1, [r8]
 80078ec:	5162      	str	r2, [r4, r5]
 80078ee:	604b      	str	r3, [r1, #4]
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 f82f 	bl	8007954 <__malloc_unlock>
 80078f6:	f104 000b 	add.w	r0, r4, #11
 80078fa:	1d23      	adds	r3, r4, #4
 80078fc:	f020 0007 	bic.w	r0, r0, #7
 8007900:	1ac2      	subs	r2, r0, r3
 8007902:	bf1c      	itt	ne
 8007904:	1a1b      	subne	r3, r3, r0
 8007906:	50a3      	strne	r3, [r4, r2]
 8007908:	e7af      	b.n	800786a <_malloc_r+0x22>
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	42a3      	cmp	r3, r4
 800790e:	bf0c      	ite	eq
 8007910:	f8c8 2000 	streq.w	r2, [r8]
 8007914:	605a      	strne	r2, [r3, #4]
 8007916:	e7eb      	b.n	80078f0 <_malloc_r+0xa8>
 8007918:	4623      	mov	r3, r4
 800791a:	6864      	ldr	r4, [r4, #4]
 800791c:	e7ae      	b.n	800787c <_malloc_r+0x34>
 800791e:	463c      	mov	r4, r7
 8007920:	687f      	ldr	r7, [r7, #4]
 8007922:	e7b6      	b.n	8007892 <_malloc_r+0x4a>
 8007924:	461a      	mov	r2, r3
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	42a3      	cmp	r3, r4
 800792a:	d1fb      	bne.n	8007924 <_malloc_r+0xdc>
 800792c:	2300      	movs	r3, #0
 800792e:	6053      	str	r3, [r2, #4]
 8007930:	e7de      	b.n	80078f0 <_malloc_r+0xa8>
 8007932:	230c      	movs	r3, #12
 8007934:	6033      	str	r3, [r6, #0]
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f80c 	bl	8007954 <__malloc_unlock>
 800793c:	e794      	b.n	8007868 <_malloc_r+0x20>
 800793e:	6005      	str	r5, [r0, #0]
 8007940:	e7d6      	b.n	80078f0 <_malloc_r+0xa8>
 8007942:	bf00      	nop
 8007944:	20000338 	.word	0x20000338

08007948 <__malloc_lock>:
 8007948:	4801      	ldr	r0, [pc, #4]	@ (8007950 <__malloc_lock+0x8>)
 800794a:	f7ff bee8 	b.w	800771e <__retarget_lock_acquire_recursive>
 800794e:	bf00      	nop
 8007950:	20000330 	.word	0x20000330

08007954 <__malloc_unlock>:
 8007954:	4801      	ldr	r0, [pc, #4]	@ (800795c <__malloc_unlock+0x8>)
 8007956:	f7ff bee3 	b.w	8007720 <__retarget_lock_release_recursive>
 800795a:	bf00      	nop
 800795c:	20000330 	.word	0x20000330

08007960 <__sfputc_r>:
 8007960:	6893      	ldr	r3, [r2, #8]
 8007962:	3b01      	subs	r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	b410      	push	{r4}
 8007968:	6093      	str	r3, [r2, #8]
 800796a:	da07      	bge.n	800797c <__sfputc_r+0x1c>
 800796c:	6994      	ldr	r4, [r2, #24]
 800796e:	42a3      	cmp	r3, r4
 8007970:	db01      	blt.n	8007976 <__sfputc_r+0x16>
 8007972:	290a      	cmp	r1, #10
 8007974:	d102      	bne.n	800797c <__sfputc_r+0x1c>
 8007976:	bc10      	pop	{r4}
 8007978:	f000 bb78 	b.w	800806c <__swbuf_r>
 800797c:	6813      	ldr	r3, [r2, #0]
 800797e:	1c58      	adds	r0, r3, #1
 8007980:	6010      	str	r0, [r2, #0]
 8007982:	7019      	strb	r1, [r3, #0]
 8007984:	4608      	mov	r0, r1
 8007986:	bc10      	pop	{r4}
 8007988:	4770      	bx	lr

0800798a <__sfputs_r>:
 800798a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	4614      	mov	r4, r2
 8007992:	18d5      	adds	r5, r2, r3
 8007994:	42ac      	cmp	r4, r5
 8007996:	d101      	bne.n	800799c <__sfputs_r+0x12>
 8007998:	2000      	movs	r0, #0
 800799a:	e007      	b.n	80079ac <__sfputs_r+0x22>
 800799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a0:	463a      	mov	r2, r7
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff ffdc 	bl	8007960 <__sfputc_r>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d1f3      	bne.n	8007994 <__sfputs_r+0xa>
 80079ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079b0 <_vfiprintf_r>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	460d      	mov	r5, r1
 80079b6:	b09d      	sub	sp, #116	@ 0x74
 80079b8:	4614      	mov	r4, r2
 80079ba:	4698      	mov	r8, r3
 80079bc:	4606      	mov	r6, r0
 80079be:	b118      	cbz	r0, 80079c8 <_vfiprintf_r+0x18>
 80079c0:	6a03      	ldr	r3, [r0, #32]
 80079c2:	b90b      	cbnz	r3, 80079c8 <_vfiprintf_r+0x18>
 80079c4:	f7ff fda6 	bl	8007514 <__sinit>
 80079c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	d405      	bmi.n	80079da <_vfiprintf_r+0x2a>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	059a      	lsls	r2, r3, #22
 80079d2:	d402      	bmi.n	80079da <_vfiprintf_r+0x2a>
 80079d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079d6:	f7ff fea2 	bl	800771e <__retarget_lock_acquire_recursive>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	071b      	lsls	r3, r3, #28
 80079de:	d501      	bpl.n	80079e4 <_vfiprintf_r+0x34>
 80079e0:	692b      	ldr	r3, [r5, #16]
 80079e2:	b99b      	cbnz	r3, 8007a0c <_vfiprintf_r+0x5c>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 fb7e 	bl	80080e8 <__swsetup_r>
 80079ec:	b170      	cbz	r0, 8007a0c <_vfiprintf_r+0x5c>
 80079ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079f0:	07dc      	lsls	r4, r3, #31
 80079f2:	d504      	bpl.n	80079fe <_vfiprintf_r+0x4e>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079f8:	b01d      	add	sp, #116	@ 0x74
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	89ab      	ldrh	r3, [r5, #12]
 8007a00:	0598      	lsls	r0, r3, #22
 8007a02:	d4f7      	bmi.n	80079f4 <_vfiprintf_r+0x44>
 8007a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a06:	f7ff fe8b 	bl	8007720 <__retarget_lock_release_recursive>
 8007a0a:	e7f3      	b.n	80079f4 <_vfiprintf_r+0x44>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a10:	2320      	movs	r3, #32
 8007a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a1a:	2330      	movs	r3, #48	@ 0x30
 8007a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bcc <_vfiprintf_r+0x21c>
 8007a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a24:	f04f 0901 	mov.w	r9, #1
 8007a28:	4623      	mov	r3, r4
 8007a2a:	469a      	mov	sl, r3
 8007a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a30:	b10a      	cbz	r2, 8007a36 <_vfiprintf_r+0x86>
 8007a32:	2a25      	cmp	r2, #37	@ 0x25
 8007a34:	d1f9      	bne.n	8007a2a <_vfiprintf_r+0x7a>
 8007a36:	ebba 0b04 	subs.w	fp, sl, r4
 8007a3a:	d00b      	beq.n	8007a54 <_vfiprintf_r+0xa4>
 8007a3c:	465b      	mov	r3, fp
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	4630      	mov	r0, r6
 8007a44:	f7ff ffa1 	bl	800798a <__sfputs_r>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	f000 80a7 	beq.w	8007b9c <_vfiprintf_r+0x1ec>
 8007a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a50:	445a      	add	r2, fp
 8007a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a54:	f89a 3000 	ldrb.w	r3, [sl]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 809f 	beq.w	8007b9c <_vfiprintf_r+0x1ec>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a68:	f10a 0a01 	add.w	sl, sl, #1
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	9307      	str	r3, [sp, #28]
 8007a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a76:	4654      	mov	r4, sl
 8007a78:	2205      	movs	r2, #5
 8007a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7e:	4853      	ldr	r0, [pc, #332]	@ (8007bcc <_vfiprintf_r+0x21c>)
 8007a80:	f7f8 fb7e 	bl	8000180 <memchr>
 8007a84:	9a04      	ldr	r2, [sp, #16]
 8007a86:	b9d8      	cbnz	r0, 8007ac0 <_vfiprintf_r+0x110>
 8007a88:	06d1      	lsls	r1, r2, #27
 8007a8a:	bf44      	itt	mi
 8007a8c:	2320      	movmi	r3, #32
 8007a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a92:	0713      	lsls	r3, r2, #28
 8007a94:	bf44      	itt	mi
 8007a96:	232b      	movmi	r3, #43	@ 0x2b
 8007a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa2:	d015      	beq.n	8007ad0 <_vfiprintf_r+0x120>
 8007aa4:	9a07      	ldr	r2, [sp, #28]
 8007aa6:	4654      	mov	r4, sl
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f04f 0c0a 	mov.w	ip, #10
 8007aae:	4621      	mov	r1, r4
 8007ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab4:	3b30      	subs	r3, #48	@ 0x30
 8007ab6:	2b09      	cmp	r3, #9
 8007ab8:	d94b      	bls.n	8007b52 <_vfiprintf_r+0x1a2>
 8007aba:	b1b0      	cbz	r0, 8007aea <_vfiprintf_r+0x13a>
 8007abc:	9207      	str	r2, [sp, #28]
 8007abe:	e014      	b.n	8007aea <_vfiprintf_r+0x13a>
 8007ac0:	eba0 0308 	sub.w	r3, r0, r8
 8007ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	46a2      	mov	sl, r4
 8007ace:	e7d2      	b.n	8007a76 <_vfiprintf_r+0xc6>
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	1d19      	adds	r1, r3, #4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	9103      	str	r1, [sp, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bfbb      	ittet	lt
 8007adc:	425b      	neglt	r3, r3
 8007ade:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae2:	9307      	strge	r3, [sp, #28]
 8007ae4:	9307      	strlt	r3, [sp, #28]
 8007ae6:	bfb8      	it	lt
 8007ae8:	9204      	strlt	r2, [sp, #16]
 8007aea:	7823      	ldrb	r3, [r4, #0]
 8007aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007aee:	d10a      	bne.n	8007b06 <_vfiprintf_r+0x156>
 8007af0:	7863      	ldrb	r3, [r4, #1]
 8007af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007af4:	d132      	bne.n	8007b5c <_vfiprintf_r+0x1ac>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	9203      	str	r2, [sp, #12]
 8007afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b02:	3402      	adds	r4, #2
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007bd0 <_vfiprintf_r+0x220>
 8007b0a:	7821      	ldrb	r1, [r4, #0]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f7f8 fb36 	bl	8000180 <memchr>
 8007b14:	b138      	cbz	r0, 8007b26 <_vfiprintf_r+0x176>
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	eba0 000a 	sub.w	r0, r0, sl
 8007b1c:	2240      	movs	r2, #64	@ 0x40
 8007b1e:	4082      	lsls	r2, r0
 8007b20:	4313      	orrs	r3, r2
 8007b22:	3401      	adds	r4, #1
 8007b24:	9304      	str	r3, [sp, #16]
 8007b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2a:	482a      	ldr	r0, [pc, #168]	@ (8007bd4 <_vfiprintf_r+0x224>)
 8007b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b30:	2206      	movs	r2, #6
 8007b32:	f7f8 fb25 	bl	8000180 <memchr>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d03f      	beq.n	8007bba <_vfiprintf_r+0x20a>
 8007b3a:	4b27      	ldr	r3, [pc, #156]	@ (8007bd8 <_vfiprintf_r+0x228>)
 8007b3c:	bb1b      	cbnz	r3, 8007b86 <_vfiprintf_r+0x1d6>
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	3307      	adds	r3, #7
 8007b42:	f023 0307 	bic.w	r3, r3, #7
 8007b46:	3308      	adds	r3, #8
 8007b48:	9303      	str	r3, [sp, #12]
 8007b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4c:	443b      	add	r3, r7
 8007b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b50:	e76a      	b.n	8007a28 <_vfiprintf_r+0x78>
 8007b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b56:	460c      	mov	r4, r1
 8007b58:	2001      	movs	r0, #1
 8007b5a:	e7a8      	b.n	8007aae <_vfiprintf_r+0xfe>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	3401      	adds	r4, #1
 8007b60:	9305      	str	r3, [sp, #20]
 8007b62:	4619      	mov	r1, r3
 8007b64:	f04f 0c0a 	mov.w	ip, #10
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b6e:	3a30      	subs	r2, #48	@ 0x30
 8007b70:	2a09      	cmp	r2, #9
 8007b72:	d903      	bls.n	8007b7c <_vfiprintf_r+0x1cc>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0c6      	beq.n	8007b06 <_vfiprintf_r+0x156>
 8007b78:	9105      	str	r1, [sp, #20]
 8007b7a:	e7c4      	b.n	8007b06 <_vfiprintf_r+0x156>
 8007b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b80:	4604      	mov	r4, r0
 8007b82:	2301      	movs	r3, #1
 8007b84:	e7f0      	b.n	8007b68 <_vfiprintf_r+0x1b8>
 8007b86:	ab03      	add	r3, sp, #12
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	4b13      	ldr	r3, [pc, #76]	@ (8007bdc <_vfiprintf_r+0x22c>)
 8007b8e:	a904      	add	r1, sp, #16
 8007b90:	4630      	mov	r0, r6
 8007b92:	f3af 8000 	nop.w
 8007b96:	4607      	mov	r7, r0
 8007b98:	1c78      	adds	r0, r7, #1
 8007b9a:	d1d6      	bne.n	8007b4a <_vfiprintf_r+0x19a>
 8007b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b9e:	07d9      	lsls	r1, r3, #31
 8007ba0:	d405      	bmi.n	8007bae <_vfiprintf_r+0x1fe>
 8007ba2:	89ab      	ldrh	r3, [r5, #12]
 8007ba4:	059a      	lsls	r2, r3, #22
 8007ba6:	d402      	bmi.n	8007bae <_vfiprintf_r+0x1fe>
 8007ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007baa:	f7ff fdb9 	bl	8007720 <__retarget_lock_release_recursive>
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	065b      	lsls	r3, r3, #25
 8007bb2:	f53f af1f 	bmi.w	80079f4 <_vfiprintf_r+0x44>
 8007bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bb8:	e71e      	b.n	80079f8 <_vfiprintf_r+0x48>
 8007bba:	ab03      	add	r3, sp, #12
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4b06      	ldr	r3, [pc, #24]	@ (8007bdc <_vfiprintf_r+0x22c>)
 8007bc2:	a904      	add	r1, sp, #16
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f879 	bl	8007cbc <_printf_i>
 8007bca:	e7e4      	b.n	8007b96 <_vfiprintf_r+0x1e6>
 8007bcc:	08008559 	.word	0x08008559
 8007bd0:	0800855f 	.word	0x0800855f
 8007bd4:	08008563 	.word	0x08008563
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	0800798b 	.word	0x0800798b

08007be0 <_printf_common>:
 8007be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	4616      	mov	r6, r2
 8007be6:	4698      	mov	r8, r3
 8007be8:	688a      	ldr	r2, [r1, #8]
 8007bea:	690b      	ldr	r3, [r1, #16]
 8007bec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	bfb8      	it	lt
 8007bf4:	4613      	movlt	r3, r2
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	b10a      	cbz	r2, 8007c06 <_printf_common+0x26>
 8007c02:	3301      	adds	r3, #1
 8007c04:	6033      	str	r3, [r6, #0]
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	0699      	lsls	r1, r3, #26
 8007c0a:	bf42      	ittt	mi
 8007c0c:	6833      	ldrmi	r3, [r6, #0]
 8007c0e:	3302      	addmi	r3, #2
 8007c10:	6033      	strmi	r3, [r6, #0]
 8007c12:	6825      	ldr	r5, [r4, #0]
 8007c14:	f015 0506 	ands.w	r5, r5, #6
 8007c18:	d106      	bne.n	8007c28 <_printf_common+0x48>
 8007c1a:	f104 0a19 	add.w	sl, r4, #25
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	6832      	ldr	r2, [r6, #0]
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dc26      	bgt.n	8007c76 <_printf_common+0x96>
 8007c28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c2c:	6822      	ldr	r2, [r4, #0]
 8007c2e:	3b00      	subs	r3, #0
 8007c30:	bf18      	it	ne
 8007c32:	2301      	movne	r3, #1
 8007c34:	0692      	lsls	r2, r2, #26
 8007c36:	d42b      	bmi.n	8007c90 <_printf_common+0xb0>
 8007c38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	4638      	mov	r0, r7
 8007c40:	47c8      	blx	r9
 8007c42:	3001      	adds	r0, #1
 8007c44:	d01e      	beq.n	8007c84 <_printf_common+0xa4>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	6922      	ldr	r2, [r4, #16]
 8007c4a:	f003 0306 	and.w	r3, r3, #6
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	bf02      	ittt	eq
 8007c52:	68e5      	ldreq	r5, [r4, #12]
 8007c54:	6833      	ldreq	r3, [r6, #0]
 8007c56:	1aed      	subeq	r5, r5, r3
 8007c58:	68a3      	ldr	r3, [r4, #8]
 8007c5a:	bf0c      	ite	eq
 8007c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c60:	2500      	movne	r5, #0
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bfc4      	itt	gt
 8007c66:	1a9b      	subgt	r3, r3, r2
 8007c68:	18ed      	addgt	r5, r5, r3
 8007c6a:	2600      	movs	r6, #0
 8007c6c:	341a      	adds	r4, #26
 8007c6e:	42b5      	cmp	r5, r6
 8007c70:	d11a      	bne.n	8007ca8 <_printf_common+0xc8>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e008      	b.n	8007c88 <_printf_common+0xa8>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	47c8      	blx	r9
 8007c80:	3001      	adds	r0, #1
 8007c82:	d103      	bne.n	8007c8c <_printf_common+0xac>
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8c:	3501      	adds	r5, #1
 8007c8e:	e7c6      	b.n	8007c1e <_printf_common+0x3e>
 8007c90:	18e1      	adds	r1, r4, r3
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	2030      	movs	r0, #48	@ 0x30
 8007c96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c9a:	4422      	add	r2, r4
 8007c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ca0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	e7c7      	b.n	8007c38 <_printf_common+0x58>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4622      	mov	r2, r4
 8007cac:	4641      	mov	r1, r8
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c8      	blx	r9
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d0e6      	beq.n	8007c84 <_printf_common+0xa4>
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7d9      	b.n	8007c6e <_printf_common+0x8e>
	...

08007cbc <_printf_i>:
 8007cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	7e0f      	ldrb	r7, [r1, #24]
 8007cc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cc4:	2f78      	cmp	r7, #120	@ 0x78
 8007cc6:	4691      	mov	r9, r2
 8007cc8:	4680      	mov	r8, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	469a      	mov	sl, r3
 8007cce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cd2:	d807      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cd4:	2f62      	cmp	r7, #98	@ 0x62
 8007cd6:	d80a      	bhi.n	8007cee <_printf_i+0x32>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	f000 80d1 	beq.w	8007e80 <_printf_i+0x1c4>
 8007cde:	2f58      	cmp	r7, #88	@ 0x58
 8007ce0:	f000 80b8 	beq.w	8007e54 <_printf_i+0x198>
 8007ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ce8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cec:	e03a      	b.n	8007d64 <_printf_i+0xa8>
 8007cee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cf2:	2b15      	cmp	r3, #21
 8007cf4:	d8f6      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cf6:	a101      	add	r1, pc, #4	@ (adr r1, 8007cfc <_printf_i+0x40>)
 8007cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cfc:	08007d55 	.word	0x08007d55
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007ce5 	.word	0x08007ce5
 8007d08:	08007ce5 	.word	0x08007ce5
 8007d0c:	08007ce5 	.word	0x08007ce5
 8007d10:	08007ce5 	.word	0x08007ce5
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007ce5 	.word	0x08007ce5
 8007d1c:	08007ce5 	.word	0x08007ce5
 8007d20:	08007ce5 	.word	0x08007ce5
 8007d24:	08007ce5 	.word	0x08007ce5
 8007d28:	08007e67 	.word	0x08007e67
 8007d2c:	08007d93 	.word	0x08007d93
 8007d30:	08007e21 	.word	0x08007e21
 8007d34:	08007ce5 	.word	0x08007ce5
 8007d38:	08007ce5 	.word	0x08007ce5
 8007d3c:	08007e89 	.word	0x08007e89
 8007d40:	08007ce5 	.word	0x08007ce5
 8007d44:	08007d93 	.word	0x08007d93
 8007d48:	08007ce5 	.word	0x08007ce5
 8007d4c:	08007ce5 	.word	0x08007ce5
 8007d50:	08007e29 	.word	0x08007e29
 8007d54:	6833      	ldr	r3, [r6, #0]
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6032      	str	r2, [r6, #0]
 8007d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d64:	2301      	movs	r3, #1
 8007d66:	e09c      	b.n	8007ea2 <_printf_i+0x1e6>
 8007d68:	6833      	ldr	r3, [r6, #0]
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	1d19      	adds	r1, r3, #4
 8007d6e:	6031      	str	r1, [r6, #0]
 8007d70:	0606      	lsls	r6, r0, #24
 8007d72:	d501      	bpl.n	8007d78 <_printf_i+0xbc>
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	e003      	b.n	8007d80 <_printf_i+0xc4>
 8007d78:	0645      	lsls	r5, r0, #25
 8007d7a:	d5fb      	bpl.n	8007d74 <_printf_i+0xb8>
 8007d7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	da03      	bge.n	8007d8c <_printf_i+0xd0>
 8007d84:	232d      	movs	r3, #45	@ 0x2d
 8007d86:	426d      	negs	r5, r5
 8007d88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d8c:	4858      	ldr	r0, [pc, #352]	@ (8007ef0 <_printf_i+0x234>)
 8007d8e:	230a      	movs	r3, #10
 8007d90:	e011      	b.n	8007db6 <_printf_i+0xfa>
 8007d92:	6821      	ldr	r1, [r4, #0]
 8007d94:	6833      	ldr	r3, [r6, #0]
 8007d96:	0608      	lsls	r0, r1, #24
 8007d98:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d9c:	d402      	bmi.n	8007da4 <_printf_i+0xe8>
 8007d9e:	0649      	lsls	r1, r1, #25
 8007da0:	bf48      	it	mi
 8007da2:	b2ad      	uxthmi	r5, r5
 8007da4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007da6:	4852      	ldr	r0, [pc, #328]	@ (8007ef0 <_printf_i+0x234>)
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	bf14      	ite	ne
 8007dac:	230a      	movne	r3, #10
 8007dae:	2308      	moveq	r3, #8
 8007db0:	2100      	movs	r1, #0
 8007db2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007db6:	6866      	ldr	r6, [r4, #4]
 8007db8:	60a6      	str	r6, [r4, #8]
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	db05      	blt.n	8007dca <_printf_i+0x10e>
 8007dbe:	6821      	ldr	r1, [r4, #0]
 8007dc0:	432e      	orrs	r6, r5
 8007dc2:	f021 0104 	bic.w	r1, r1, #4
 8007dc6:	6021      	str	r1, [r4, #0]
 8007dc8:	d04b      	beq.n	8007e62 <_printf_i+0x1a6>
 8007dca:	4616      	mov	r6, r2
 8007dcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dd0:	fb03 5711 	mls	r7, r3, r1, r5
 8007dd4:	5dc7      	ldrb	r7, [r0, r7]
 8007dd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dda:	462f      	mov	r7, r5
 8007ddc:	42bb      	cmp	r3, r7
 8007dde:	460d      	mov	r5, r1
 8007de0:	d9f4      	bls.n	8007dcc <_printf_i+0x110>
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d10b      	bne.n	8007dfe <_printf_i+0x142>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	07df      	lsls	r7, r3, #31
 8007dea:	d508      	bpl.n	8007dfe <_printf_i+0x142>
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	6861      	ldr	r1, [r4, #4]
 8007df0:	4299      	cmp	r1, r3
 8007df2:	bfde      	ittt	le
 8007df4:	2330      	movle	r3, #48	@ 0x30
 8007df6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dfa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007dfe:	1b92      	subs	r2, r2, r6
 8007e00:	6122      	str	r2, [r4, #16]
 8007e02:	f8cd a000 	str.w	sl, [sp]
 8007e06:	464b      	mov	r3, r9
 8007e08:	aa03      	add	r2, sp, #12
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	f7ff fee7 	bl	8007be0 <_printf_common>
 8007e12:	3001      	adds	r0, #1
 8007e14:	d14a      	bne.n	8007eac <_printf_i+0x1f0>
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e1a:	b004      	add	sp, #16
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	f043 0320 	orr.w	r3, r3, #32
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	4832      	ldr	r0, [pc, #200]	@ (8007ef4 <_printf_i+0x238>)
 8007e2a:	2778      	movs	r7, #120	@ 0x78
 8007e2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	6831      	ldr	r1, [r6, #0]
 8007e34:	061f      	lsls	r7, r3, #24
 8007e36:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e3a:	d402      	bmi.n	8007e42 <_printf_i+0x186>
 8007e3c:	065f      	lsls	r7, r3, #25
 8007e3e:	bf48      	it	mi
 8007e40:	b2ad      	uxthmi	r5, r5
 8007e42:	6031      	str	r1, [r6, #0]
 8007e44:	07d9      	lsls	r1, r3, #31
 8007e46:	bf44      	itt	mi
 8007e48:	f043 0320 	orrmi.w	r3, r3, #32
 8007e4c:	6023      	strmi	r3, [r4, #0]
 8007e4e:	b11d      	cbz	r5, 8007e58 <_printf_i+0x19c>
 8007e50:	2310      	movs	r3, #16
 8007e52:	e7ad      	b.n	8007db0 <_printf_i+0xf4>
 8007e54:	4826      	ldr	r0, [pc, #152]	@ (8007ef0 <_printf_i+0x234>)
 8007e56:	e7e9      	b.n	8007e2c <_printf_i+0x170>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	f023 0320 	bic.w	r3, r3, #32
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	e7f6      	b.n	8007e50 <_printf_i+0x194>
 8007e62:	4616      	mov	r6, r2
 8007e64:	e7bd      	b.n	8007de2 <_printf_i+0x126>
 8007e66:	6833      	ldr	r3, [r6, #0]
 8007e68:	6825      	ldr	r5, [r4, #0]
 8007e6a:	6961      	ldr	r1, [r4, #20]
 8007e6c:	1d18      	adds	r0, r3, #4
 8007e6e:	6030      	str	r0, [r6, #0]
 8007e70:	062e      	lsls	r6, r5, #24
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	d501      	bpl.n	8007e7a <_printf_i+0x1be>
 8007e76:	6019      	str	r1, [r3, #0]
 8007e78:	e002      	b.n	8007e80 <_printf_i+0x1c4>
 8007e7a:	0668      	lsls	r0, r5, #25
 8007e7c:	d5fb      	bpl.n	8007e76 <_printf_i+0x1ba>
 8007e7e:	8019      	strh	r1, [r3, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	6123      	str	r3, [r4, #16]
 8007e84:	4616      	mov	r6, r2
 8007e86:	e7bc      	b.n	8007e02 <_printf_i+0x146>
 8007e88:	6833      	ldr	r3, [r6, #0]
 8007e8a:	1d1a      	adds	r2, r3, #4
 8007e8c:	6032      	str	r2, [r6, #0]
 8007e8e:	681e      	ldr	r6, [r3, #0]
 8007e90:	6862      	ldr	r2, [r4, #4]
 8007e92:	2100      	movs	r1, #0
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7f8 f973 	bl	8000180 <memchr>
 8007e9a:	b108      	cbz	r0, 8007ea0 <_printf_i+0x1e4>
 8007e9c:	1b80      	subs	r0, r0, r6
 8007e9e:	6060      	str	r0, [r4, #4]
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eaa:	e7aa      	b.n	8007e02 <_printf_i+0x146>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	47d0      	blx	sl
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d0ad      	beq.n	8007e16 <_printf_i+0x15a>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	079b      	lsls	r3, r3, #30
 8007ebe:	d413      	bmi.n	8007ee8 <_printf_i+0x22c>
 8007ec0:	68e0      	ldr	r0, [r4, #12]
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	4298      	cmp	r0, r3
 8007ec6:	bfb8      	it	lt
 8007ec8:	4618      	movlt	r0, r3
 8007eca:	e7a6      	b.n	8007e1a <_printf_i+0x15e>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4632      	mov	r2, r6
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	47d0      	blx	sl
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d09d      	beq.n	8007e16 <_printf_i+0x15a>
 8007eda:	3501      	adds	r5, #1
 8007edc:	68e3      	ldr	r3, [r4, #12]
 8007ede:	9903      	ldr	r1, [sp, #12]
 8007ee0:	1a5b      	subs	r3, r3, r1
 8007ee2:	42ab      	cmp	r3, r5
 8007ee4:	dcf2      	bgt.n	8007ecc <_printf_i+0x210>
 8007ee6:	e7eb      	b.n	8007ec0 <_printf_i+0x204>
 8007ee8:	2500      	movs	r5, #0
 8007eea:	f104 0619 	add.w	r6, r4, #25
 8007eee:	e7f5      	b.n	8007edc <_printf_i+0x220>
 8007ef0:	0800856a 	.word	0x0800856a
 8007ef4:	0800857b 	.word	0x0800857b

08007ef8 <__sflush_r>:
 8007ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	0716      	lsls	r6, r2, #28
 8007f00:	4605      	mov	r5, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	d454      	bmi.n	8007fb0 <__sflush_r+0xb8>
 8007f06:	684b      	ldr	r3, [r1, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc02      	bgt.n	8007f12 <__sflush_r+0x1a>
 8007f0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dd48      	ble.n	8007fa4 <__sflush_r+0xac>
 8007f12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	d045      	beq.n	8007fa4 <__sflush_r+0xac>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f1e:	682f      	ldr	r7, [r5, #0]
 8007f20:	6a21      	ldr	r1, [r4, #32]
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	d030      	beq.n	8007f88 <__sflush_r+0x90>
 8007f26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	0759      	lsls	r1, r3, #29
 8007f2c:	d505      	bpl.n	8007f3a <__sflush_r+0x42>
 8007f2e:	6863      	ldr	r3, [r4, #4]
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f34:	b10b      	cbz	r3, 8007f3a <__sflush_r+0x42>
 8007f36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f3e:	6a21      	ldr	r1, [r4, #32]
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b0      	blx	r6
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	d106      	bne.n	8007f58 <__sflush_r+0x60>
 8007f4a:	6829      	ldr	r1, [r5, #0]
 8007f4c:	291d      	cmp	r1, #29
 8007f4e:	d82b      	bhi.n	8007fa8 <__sflush_r+0xb0>
 8007f50:	4a28      	ldr	r2, [pc, #160]	@ (8007ff4 <__sflush_r+0xfc>)
 8007f52:	40ca      	lsrs	r2, r1
 8007f54:	07d6      	lsls	r6, r2, #31
 8007f56:	d527      	bpl.n	8007fa8 <__sflush_r+0xb0>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	6062      	str	r2, [r4, #4]
 8007f5c:	04d9      	lsls	r1, r3, #19
 8007f5e:	6922      	ldr	r2, [r4, #16]
 8007f60:	6022      	str	r2, [r4, #0]
 8007f62:	d504      	bpl.n	8007f6e <__sflush_r+0x76>
 8007f64:	1c42      	adds	r2, r0, #1
 8007f66:	d101      	bne.n	8007f6c <__sflush_r+0x74>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b903      	cbnz	r3, 8007f6e <__sflush_r+0x76>
 8007f6c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f70:	602f      	str	r7, [r5, #0]
 8007f72:	b1b9      	cbz	r1, 8007fa4 <__sflush_r+0xac>
 8007f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	d002      	beq.n	8007f82 <__sflush_r+0x8a>
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f7ff fbef 	bl	8007760 <_free_r>
 8007f82:	2300      	movs	r3, #0
 8007f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f86:	e00d      	b.n	8007fa4 <__sflush_r+0xac>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b0      	blx	r6
 8007f8e:	4602      	mov	r2, r0
 8007f90:	1c50      	adds	r0, r2, #1
 8007f92:	d1c9      	bne.n	8007f28 <__sflush_r+0x30>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0c6      	beq.n	8007f28 <__sflush_r+0x30>
 8007f9a:	2b1d      	cmp	r3, #29
 8007f9c:	d001      	beq.n	8007fa2 <__sflush_r+0xaa>
 8007f9e:	2b16      	cmp	r3, #22
 8007fa0:	d11d      	bne.n	8007fde <__sflush_r+0xe6>
 8007fa2:	602f      	str	r7, [r5, #0]
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e021      	b.n	8007fec <__sflush_r+0xf4>
 8007fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fac:	b21b      	sxth	r3, r3
 8007fae:	e01a      	b.n	8007fe6 <__sflush_r+0xee>
 8007fb0:	690f      	ldr	r7, [r1, #16]
 8007fb2:	2f00      	cmp	r7, #0
 8007fb4:	d0f6      	beq.n	8007fa4 <__sflush_r+0xac>
 8007fb6:	0793      	lsls	r3, r2, #30
 8007fb8:	680e      	ldr	r6, [r1, #0]
 8007fba:	bf08      	it	eq
 8007fbc:	694b      	ldreq	r3, [r1, #20]
 8007fbe:	600f      	str	r7, [r1, #0]
 8007fc0:	bf18      	it	ne
 8007fc2:	2300      	movne	r3, #0
 8007fc4:	1bf6      	subs	r6, r6, r7
 8007fc6:	608b      	str	r3, [r1, #8]
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	ddeb      	ble.n	8007fa4 <__sflush_r+0xac>
 8007fcc:	6a21      	ldr	r1, [r4, #32]
 8007fce:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47e0      	blx	ip
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	dc07      	bgt.n	8007fee <__sflush_r+0xf6>
 8007fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fee:	4407      	add	r7, r0
 8007ff0:	1a36      	subs	r6, r6, r0
 8007ff2:	e7e9      	b.n	8007fc8 <__sflush_r+0xd0>
 8007ff4:	20400001 	.word	0x20400001

08007ff8 <_fflush_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	690b      	ldr	r3, [r1, #16]
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	b913      	cbnz	r3, 8008008 <_fflush_r+0x10>
 8008002:	2500      	movs	r5, #0
 8008004:	4628      	mov	r0, r5
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	b118      	cbz	r0, 8008012 <_fflush_r+0x1a>
 800800a:	6a03      	ldr	r3, [r0, #32]
 800800c:	b90b      	cbnz	r3, 8008012 <_fflush_r+0x1a>
 800800e:	f7ff fa81 	bl	8007514 <__sinit>
 8008012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f3      	beq.n	8008002 <_fflush_r+0xa>
 800801a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800801c:	07d0      	lsls	r0, r2, #31
 800801e:	d404      	bmi.n	800802a <_fflush_r+0x32>
 8008020:	0599      	lsls	r1, r3, #22
 8008022:	d402      	bmi.n	800802a <_fflush_r+0x32>
 8008024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008026:	f7ff fb7a 	bl	800771e <__retarget_lock_acquire_recursive>
 800802a:	4628      	mov	r0, r5
 800802c:	4621      	mov	r1, r4
 800802e:	f7ff ff63 	bl	8007ef8 <__sflush_r>
 8008032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008034:	07da      	lsls	r2, r3, #31
 8008036:	4605      	mov	r5, r0
 8008038:	d4e4      	bmi.n	8008004 <_fflush_r+0xc>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	059b      	lsls	r3, r3, #22
 800803e:	d4e1      	bmi.n	8008004 <_fflush_r+0xc>
 8008040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008042:	f7ff fb6d 	bl	8007720 <__retarget_lock_release_recursive>
 8008046:	e7dd      	b.n	8008004 <_fflush_r+0xc>

08008048 <fiprintf>:
 8008048:	b40e      	push	{r1, r2, r3}
 800804a:	b503      	push	{r0, r1, lr}
 800804c:	4601      	mov	r1, r0
 800804e:	ab03      	add	r3, sp, #12
 8008050:	4805      	ldr	r0, [pc, #20]	@ (8008068 <fiprintf+0x20>)
 8008052:	f853 2b04 	ldr.w	r2, [r3], #4
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	f7ff fca9 	bl	80079b0 <_vfiprintf_r>
 800805e:	b002      	add	sp, #8
 8008060:	f85d eb04 	ldr.w	lr, [sp], #4
 8008064:	b003      	add	sp, #12
 8008066:	4770      	bx	lr
 8008068:	20000048 	.word	0x20000048

0800806c <__swbuf_r>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	460e      	mov	r6, r1
 8008070:	4614      	mov	r4, r2
 8008072:	4605      	mov	r5, r0
 8008074:	b118      	cbz	r0, 800807e <__swbuf_r+0x12>
 8008076:	6a03      	ldr	r3, [r0, #32]
 8008078:	b90b      	cbnz	r3, 800807e <__swbuf_r+0x12>
 800807a:	f7ff fa4b 	bl	8007514 <__sinit>
 800807e:	69a3      	ldr	r3, [r4, #24]
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	071a      	lsls	r2, r3, #28
 8008086:	d501      	bpl.n	800808c <__swbuf_r+0x20>
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	b943      	cbnz	r3, 800809e <__swbuf_r+0x32>
 800808c:	4621      	mov	r1, r4
 800808e:	4628      	mov	r0, r5
 8008090:	f000 f82a 	bl	80080e8 <__swsetup_r>
 8008094:	b118      	cbz	r0, 800809e <__swbuf_r+0x32>
 8008096:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800809a:	4638      	mov	r0, r7
 800809c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	1a98      	subs	r0, r3, r2
 80080a4:	6963      	ldr	r3, [r4, #20]
 80080a6:	b2f6      	uxtb	r6, r6
 80080a8:	4283      	cmp	r3, r0
 80080aa:	4637      	mov	r7, r6
 80080ac:	dc05      	bgt.n	80080ba <__swbuf_r+0x4e>
 80080ae:	4621      	mov	r1, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	f7ff ffa1 	bl	8007ff8 <_fflush_r>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d1ed      	bne.n	8008096 <__swbuf_r+0x2a>
 80080ba:	68a3      	ldr	r3, [r4, #8]
 80080bc:	3b01      	subs	r3, #1
 80080be:	60a3      	str	r3, [r4, #8]
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	6022      	str	r2, [r4, #0]
 80080c6:	701e      	strb	r6, [r3, #0]
 80080c8:	6962      	ldr	r2, [r4, #20]
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d004      	beq.n	80080da <__swbuf_r+0x6e>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d5e1      	bpl.n	800809a <__swbuf_r+0x2e>
 80080d6:	2e0a      	cmp	r6, #10
 80080d8:	d1df      	bne.n	800809a <__swbuf_r+0x2e>
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f7ff ff8b 	bl	8007ff8 <_fflush_r>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d0d9      	beq.n	800809a <__swbuf_r+0x2e>
 80080e6:	e7d6      	b.n	8008096 <__swbuf_r+0x2a>

080080e8 <__swsetup_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4b29      	ldr	r3, [pc, #164]	@ (8008190 <__swsetup_r+0xa8>)
 80080ec:	4605      	mov	r5, r0
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	460c      	mov	r4, r1
 80080f2:	b118      	cbz	r0, 80080fc <__swsetup_r+0x14>
 80080f4:	6a03      	ldr	r3, [r0, #32]
 80080f6:	b90b      	cbnz	r3, 80080fc <__swsetup_r+0x14>
 80080f8:	f7ff fa0c 	bl	8007514 <__sinit>
 80080fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008100:	0719      	lsls	r1, r3, #28
 8008102:	d422      	bmi.n	800814a <__swsetup_r+0x62>
 8008104:	06da      	lsls	r2, r3, #27
 8008106:	d407      	bmi.n	8008118 <__swsetup_r+0x30>
 8008108:	2209      	movs	r2, #9
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008116:	e033      	b.n	8008180 <__swsetup_r+0x98>
 8008118:	0758      	lsls	r0, r3, #29
 800811a:	d512      	bpl.n	8008142 <__swsetup_r+0x5a>
 800811c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800811e:	b141      	cbz	r1, 8008132 <__swsetup_r+0x4a>
 8008120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008124:	4299      	cmp	r1, r3
 8008126:	d002      	beq.n	800812e <__swsetup_r+0x46>
 8008128:	4628      	mov	r0, r5
 800812a:	f7ff fb19 	bl	8007760 <_free_r>
 800812e:	2300      	movs	r3, #0
 8008130:	6363      	str	r3, [r4, #52]	@ 0x34
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	2300      	movs	r3, #0
 800813c:	6063      	str	r3, [r4, #4]
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f043 0308 	orr.w	r3, r3, #8
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	b94b      	cbnz	r3, 8008162 <__swsetup_r+0x7a>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008158:	d003      	beq.n	8008162 <__swsetup_r+0x7a>
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f000 f856 	bl	800820e <__smakebuf_r>
 8008162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008166:	f013 0201 	ands.w	r2, r3, #1
 800816a:	d00a      	beq.n	8008182 <__swsetup_r+0x9a>
 800816c:	2200      	movs	r2, #0
 800816e:	60a2      	str	r2, [r4, #8]
 8008170:	6962      	ldr	r2, [r4, #20]
 8008172:	4252      	negs	r2, r2
 8008174:	61a2      	str	r2, [r4, #24]
 8008176:	6922      	ldr	r2, [r4, #16]
 8008178:	b942      	cbnz	r2, 800818c <__swsetup_r+0xa4>
 800817a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800817e:	d1c5      	bne.n	800810c <__swsetup_r+0x24>
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	0799      	lsls	r1, r3, #30
 8008184:	bf58      	it	pl
 8008186:	6962      	ldrpl	r2, [r4, #20]
 8008188:	60a2      	str	r2, [r4, #8]
 800818a:	e7f4      	b.n	8008176 <__swsetup_r+0x8e>
 800818c:	2000      	movs	r0, #0
 800818e:	e7f7      	b.n	8008180 <__swsetup_r+0x98>
 8008190:	20000048 	.word	0x20000048

08008194 <_sbrk_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d06      	ldr	r5, [pc, #24]	@ (80081b0 <_sbrk_r+0x1c>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7f8 feec 	bl	8000f7c <_sbrk>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_sbrk_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_sbrk_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	2000032c 	.word	0x2000032c

080081b4 <abort>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	2006      	movs	r0, #6
 80081b8:	f000 f88e 	bl	80082d8 <raise>
 80081bc:	2001      	movs	r0, #1
 80081be:	f7f8 fe85 	bl	8000ecc <_exit>

080081c2 <__swhatbuf_r>:
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ca:	2900      	cmp	r1, #0
 80081cc:	b096      	sub	sp, #88	@ 0x58
 80081ce:	4615      	mov	r5, r2
 80081d0:	461e      	mov	r6, r3
 80081d2:	da0d      	bge.n	80081f0 <__swhatbuf_r+0x2e>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081da:	f04f 0100 	mov.w	r1, #0
 80081de:	bf14      	ite	ne
 80081e0:	2340      	movne	r3, #64	@ 0x40
 80081e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081e6:	2000      	movs	r0, #0
 80081e8:	6031      	str	r1, [r6, #0]
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	b016      	add	sp, #88	@ 0x58
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	466a      	mov	r2, sp
 80081f2:	f000 f879 	bl	80082e8 <_fstat_r>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	dbec      	blt.n	80081d4 <__swhatbuf_r+0x12>
 80081fa:	9901      	ldr	r1, [sp, #4]
 80081fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008200:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008204:	4259      	negs	r1, r3
 8008206:	4159      	adcs	r1, r3
 8008208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800820c:	e7eb      	b.n	80081e6 <__swhatbuf_r+0x24>

0800820e <__smakebuf_r>:
 800820e:	898b      	ldrh	r3, [r1, #12]
 8008210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008212:	079d      	lsls	r5, r3, #30
 8008214:	4606      	mov	r6, r0
 8008216:	460c      	mov	r4, r1
 8008218:	d507      	bpl.n	800822a <__smakebuf_r+0x1c>
 800821a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	2301      	movs	r3, #1
 8008224:	6163      	str	r3, [r4, #20]
 8008226:	b003      	add	sp, #12
 8008228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800822a:	ab01      	add	r3, sp, #4
 800822c:	466a      	mov	r2, sp
 800822e:	f7ff ffc8 	bl	80081c2 <__swhatbuf_r>
 8008232:	9f00      	ldr	r7, [sp, #0]
 8008234:	4605      	mov	r5, r0
 8008236:	4639      	mov	r1, r7
 8008238:	4630      	mov	r0, r6
 800823a:	f7ff fb05 	bl	8007848 <_malloc_r>
 800823e:	b948      	cbnz	r0, 8008254 <__smakebuf_r+0x46>
 8008240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008244:	059a      	lsls	r2, r3, #22
 8008246:	d4ee      	bmi.n	8008226 <__smakebuf_r+0x18>
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	e7e2      	b.n	800821a <__smakebuf_r+0xc>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	6020      	str	r0, [r4, #0]
 8008258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008264:	b15b      	cbz	r3, 800827e <__smakebuf_r+0x70>
 8008266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f84e 	bl	800830c <_isatty_r>
 8008270:	b128      	cbz	r0, 800827e <__smakebuf_r+0x70>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	f043 0301 	orr.w	r3, r3, #1
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	431d      	orrs	r5, r3
 8008282:	81a5      	strh	r5, [r4, #12]
 8008284:	e7cf      	b.n	8008226 <__smakebuf_r+0x18>

08008286 <_raise_r>:
 8008286:	291f      	cmp	r1, #31
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4605      	mov	r5, r0
 800828c:	460c      	mov	r4, r1
 800828e:	d904      	bls.n	800829a <_raise_r+0x14>
 8008290:	2316      	movs	r3, #22
 8008292:	6003      	str	r3, [r0, #0]
 8008294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008298:	bd38      	pop	{r3, r4, r5, pc}
 800829a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800829c:	b112      	cbz	r2, 80082a4 <_raise_r+0x1e>
 800829e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082a2:	b94b      	cbnz	r3, 80082b8 <_raise_r+0x32>
 80082a4:	4628      	mov	r0, r5
 80082a6:	f000 f853 	bl	8008350 <_getpid_r>
 80082aa:	4622      	mov	r2, r4
 80082ac:	4601      	mov	r1, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b4:	f000 b83a 	b.w	800832c <_kill_r>
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d00a      	beq.n	80082d2 <_raise_r+0x4c>
 80082bc:	1c59      	adds	r1, r3, #1
 80082be:	d103      	bne.n	80082c8 <_raise_r+0x42>
 80082c0:	2316      	movs	r3, #22
 80082c2:	6003      	str	r3, [r0, #0]
 80082c4:	2001      	movs	r0, #1
 80082c6:	e7e7      	b.n	8008298 <_raise_r+0x12>
 80082c8:	2100      	movs	r1, #0
 80082ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082ce:	4620      	mov	r0, r4
 80082d0:	4798      	blx	r3
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7e0      	b.n	8008298 <_raise_r+0x12>
	...

080082d8 <raise>:
 80082d8:	4b02      	ldr	r3, [pc, #8]	@ (80082e4 <raise+0xc>)
 80082da:	4601      	mov	r1, r0
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	f7ff bfd2 	b.w	8008286 <_raise_r>
 80082e2:	bf00      	nop
 80082e4:	20000048 	.word	0x20000048

080082e8 <_fstat_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	@ (8008308 <_fstat_r+0x20>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	f7f8 fe1c 	bl	8000f32 <_fstat>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d102      	bne.n	8008304 <_fstat_r+0x1c>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	b103      	cbz	r3, 8008304 <_fstat_r+0x1c>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	2000032c 	.word	0x2000032c

0800830c <_isatty_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	@ (8008328 <_isatty_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f8 fe1a 	bl	8000f50 <_isatty>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_isatty_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_isatty_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	2000032c 	.word	0x2000032c

0800832c <_kill_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	@ (800834c <_kill_r+0x20>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f7f8 fdb7 	bl	8000eac <_kill>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	d102      	bne.n	8008348 <_kill_r+0x1c>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	b103      	cbz	r3, 8008348 <_kill_r+0x1c>
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	bf00      	nop
 800834c:	2000032c 	.word	0x2000032c

08008350 <_getpid_r>:
 8008350:	f7f8 bda5 	b.w	8000e9e <_getpid>

08008354 <_init>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	bf00      	nop
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr

08008360 <_fini>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	bf00      	nop
 8008364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008366:	bc08      	pop	{r3}
 8008368:	469e      	mov	lr, r3
 800836a:	4770      	bx	lr
